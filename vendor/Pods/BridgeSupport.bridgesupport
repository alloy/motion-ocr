<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='BBUFFER' type='{ByteBuffer=&quot;nalloc&quot;i&quot;n&quot;i&quot;nwritten&quot;i&quot;array&quot;*}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nwritten' type='i'/>
<field declared_type='l_uint8*' name='array' type='*'/>
</struct>
<struct name='BMP_FH' type='{BMP_FileHeader=&quot;bfType&quot;s&quot;bfSize&quot;s&quot;bfFill1&quot;s&quot;bfReserved1&quot;s&quot;bfReserved2&quot;s&quot;bfOffBits&quot;s&quot;bfFill2&quot;s}'>
<field declared_type='l_int16' name='bfType' type='s'/>
<field declared_type='l_int16' name='bfSize' type='s'/>
<field declared_type='l_int16' name='bfFill1' type='s'/>
<field declared_type='l_int16' name='bfReserved1' type='s'/>
<field declared_type='l_int16' name='bfReserved2' type='s'/>
<field declared_type='l_int16' name='bfOffBits' type='s'/>
<field declared_type='l_int16' name='bfFill2' type='s'/>
</struct>
<struct name='BMP_FileHeader' type='{BMP_FileHeader=&quot;bfType&quot;s&quot;bfSize&quot;s&quot;bfFill1&quot;s&quot;bfReserved1&quot;s&quot;bfReserved2&quot;s&quot;bfOffBits&quot;s&quot;bfFill2&quot;s}'>
<field declared_type='l_int16' name='bfType' type='s'/>
<field declared_type='l_int16' name='bfSize' type='s'/>
<field declared_type='l_int16' name='bfFill1' type='s'/>
<field declared_type='l_int16' name='bfReserved1' type='s'/>
<field declared_type='l_int16' name='bfReserved2' type='s'/>
<field declared_type='l_int16' name='bfOffBits' type='s'/>
<field declared_type='l_int16' name='bfFill2' type='s'/>
</struct>
<struct name='BMP_IH' type='{BMP_InfoHeader=&quot;biSize&quot;i&quot;biWidth&quot;i&quot;biHeight&quot;i&quot;biPlanes&quot;s&quot;biBitCount&quot;s&quot;biCompression&quot;i&quot;biSizeImage&quot;i&quot;biXPelsPerMeter&quot;i&quot;biYPelsPerMeter&quot;i&quot;biClrUsed&quot;i&quot;biClrImportant&quot;i}'>
<field declared_type='l_int32' name='biSize' type='i'/>
<field declared_type='l_int32' name='biWidth' type='i'/>
<field declared_type='l_int32' name='biHeight' type='i'/>
<field declared_type='l_int16' name='biPlanes' type='s'/>
<field declared_type='l_int16' name='biBitCount' type='s'/>
<field declared_type='l_int32' name='biCompression' type='i'/>
<field declared_type='l_int32' name='biSizeImage' type='i'/>
<field declared_type='l_int32' name='biXPelsPerMeter' type='i'/>
<field declared_type='l_int32' name='biYPelsPerMeter' type='i'/>
<field declared_type='l_int32' name='biClrUsed' type='i'/>
<field declared_type='l_int32' name='biClrImportant' type='i'/>
</struct>
<struct name='BMP_InfoHeader' type='{BMP_InfoHeader=&quot;biSize&quot;i&quot;biWidth&quot;i&quot;biHeight&quot;i&quot;biPlanes&quot;s&quot;biBitCount&quot;s&quot;biCompression&quot;i&quot;biSizeImage&quot;i&quot;biXPelsPerMeter&quot;i&quot;biYPelsPerMeter&quot;i&quot;biClrUsed&quot;i&quot;biClrImportant&quot;i}'>
<field declared_type='l_int32' name='biSize' type='i'/>
<field declared_type='l_int32' name='biWidth' type='i'/>
<field declared_type='l_int32' name='biHeight' type='i'/>
<field declared_type='l_int16' name='biPlanes' type='s'/>
<field declared_type='l_int16' name='biBitCount' type='s'/>
<field declared_type='l_int32' name='biCompression' type='i'/>
<field declared_type='l_int32' name='biSizeImage' type='i'/>
<field declared_type='l_int32' name='biXPelsPerMeter' type='i'/>
<field declared_type='l_int32' name='biYPelsPerMeter' type='i'/>
<field declared_type='l_int32' name='biClrUsed' type='i'/>
<field declared_type='l_int32' name='biClrImportant' type='i'/>
</struct>
<struct name='BOX' type='{Box=&quot;x&quot;i&quot;y&quot;i&quot;w&quot;i&quot;h&quot;i&quot;refcount&quot;I}'>
<field declared_type='l_int32' name='x' type='i'/>
<field declared_type='l_int32' name='y' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
</struct>
<struct name='BOXA' type='{Boxa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;box&quot;^^{Box}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='struct Box**' name='box' type='^^{Box}'/>
</struct>
<struct name='BOXAA' type='{Boxaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;boxa&quot;^^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Boxa**' name='boxa' type='^^{Boxa}'/>
</struct>
<struct name='Box' type='{Box=&quot;x&quot;i&quot;y&quot;i&quot;w&quot;i&quot;h&quot;i&quot;refcount&quot;I}'>
<field declared_type='l_int32' name='x' type='i'/>
<field declared_type='l_int32' name='y' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
</struct>
<struct name='Boxa' type='{Boxa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;box&quot;^^{Box}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='struct Box**' name='box' type='^^{Box}'/>
</struct>
<struct name='Boxaa' type='{Boxaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;boxa&quot;^^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Boxa**' name='boxa' type='^^{Boxa}'/>
</struct>
<struct name='ByteBuffer' type='{ByteBuffer=&quot;nalloc&quot;i&quot;n&quot;i&quot;nwritten&quot;i&quot;array&quot;*}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nwritten' type='i'/>
<field declared_type='l_uint8*' name='array' type='*'/>
</struct>
<struct name='CCBORD' type='{CCBord=&quot;pix&quot;^{Pix}&quot;boxa&quot;^{Boxa}&quot;start&quot;^{Pta}&quot;refcount&quot;i&quot;local&quot;^{Ptaa}&quot;global&quot;^{Ptaa}&quot;step&quot;^{Numaa}&quot;splocal&quot;^{Pta}&quot;spglobal&quot;^{Pta}}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<field declared_type='struct Pta*' name='start' type='^{Pta=iiI^f^f}'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='struct Ptaa*' name='local' type='^{Ptaa=ii^^{Pta}}'/>
<field declared_type='struct Ptaa*' name='global' type='^{Ptaa=ii^^{Pta}}'/>
<field declared_type='struct Numaa*' name='step' type='^{Numaa=ii^^{Numa}}'/>
<field declared_type='struct Pta*' name='splocal' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='spglobal' type='^{Pta=iiI^f^f}'/>
</struct>
<struct name='CCBORDA' type='{CCBorda=&quot;pix&quot;^{Pix}&quot;w&quot;i&quot;h&quot;i&quot;n&quot;i&quot;nalloc&quot;i&quot;ccb&quot;^^{CCBord}}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct CCBord**' name='ccb' type='^^{CCBord}'/>
</struct>
<struct name='CCBord' type='{CCBord=&quot;pix&quot;^{Pix}&quot;boxa&quot;^{Boxa}&quot;start&quot;^{Pta}&quot;refcount&quot;i&quot;local&quot;^{Ptaa}&quot;global&quot;^{Ptaa}&quot;step&quot;^{Numaa}&quot;splocal&quot;^{Pta}&quot;spglobal&quot;^{Pta}}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<field declared_type='struct Pta*' name='start' type='^{Pta=iiI^f^f}'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='struct Ptaa*' name='local' type='^{Ptaa=ii^^{Pta}}'/>
<field declared_type='struct Ptaa*' name='global' type='^{Ptaa=ii^^{Pta}}'/>
<field declared_type='struct Numaa*' name='step' type='^{Numaa=ii^^{Numa}}'/>
<field declared_type='struct Pta*' name='splocal' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='spglobal' type='^{Pta=iiI^f^f}'/>
</struct>
<struct name='CCBorda' type='{CCBorda=&quot;pix&quot;^{Pix}&quot;w&quot;i&quot;h&quot;i&quot;n&quot;i&quot;nalloc&quot;i&quot;ccb&quot;^^{CCBord}}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct CCBord**' name='ccb' type='^^{CCBord}'/>
</struct>
<struct name='DLLIST' type='{DoubleLinkedList=&quot;prev&quot;^{DoubleLinkedList}&quot;next&quot;^{DoubleLinkedList}&quot;data&quot;^v}'>
<field declared_type='struct DoubleLinkedList*' name='prev' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field declared_type='struct DoubleLinkedList*' name='next' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field declared_type='void*' name='data' type='^v'/>
</struct>
<struct name='DPIX' type='{DPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^d}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='wpl' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_float64*' name='data' type='^d'/>
</struct>
<struct name='DPix' type='{DPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^d}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='wpl' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_float64*' name='data' type='^d'/>
</struct>
<struct name='DoubleLinkedList' type='{DoubleLinkedList=&quot;prev&quot;^{DoubleLinkedList}&quot;next&quot;^{DoubleLinkedList}&quot;data&quot;^v}'>
<field declared_type='struct DoubleLinkedList*' name='prev' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field declared_type='struct DoubleLinkedList*' name='next' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field declared_type='void*' name='data' type='^v'/>
</struct>
<struct name='EANYCODE_CHAR' type='{_EANYCODE_CHAR=&quot;char_code&quot;S&quot;left&quot;s&quot;right&quot;s&quot;top&quot;s&quot;bottom&quot;s&quot;font_index&quot;s&quot;confidence&quot;C&quot;point_size&quot;C&quot;blanks&quot;c&quot;formatting&quot;C}'>
<field declared_type='uinT16' name='char_code' type='S'/>
<field declared_type='inT16' name='left' type='s'/>
<field declared_type='inT16' name='right' type='s'/>
<field declared_type='inT16' name='top' type='s'/>
<field declared_type='inT16' name='bottom' type='s'/>
<field declared_type='inT16' name='font_index' type='s'/>
<field declared_type='uinT8' name='confidence' type='C'/>
<field declared_type='uinT8' name='point_size' type='C'/>
<field declared_type='inT8' name='blanks' type='c'/>
<field declared_type='uinT8' name='formatting' type='C'/>
</struct>
<struct name='FPIX' type='{FPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^f}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='wpl' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_float32*' name='data' type='^f'/>
</struct>
<struct name='FPIXA' type='{FPixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;fpix&quot;^^{FPix}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='struct FPix**' name='fpix' type='^^{FPix}'/>
</struct>
<struct name='FPix' type='{FPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^f}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='wpl' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_float32*' name='data' type='^f'/>
</struct>
<struct name='FPixa' type='{FPixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;fpix&quot;^^{FPix}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='struct FPix**' name='fpix' type='^^{FPix}'/>
</struct>
<struct name='GPLOT' type='{GPlot=&quot;rootname&quot;*&quot;cmdname&quot;*&quot;cmddata&quot;^{Sarray}&quot;datanames&quot;^{Sarray}&quot;plotdata&quot;^{Sarray}&quot;plottitles&quot;^{Sarray}&quot;plotstyles&quot;^{Numa}&quot;nplots&quot;i&quot;outname&quot;*&quot;outformat&quot;i&quot;scaling&quot;i&quot;title&quot;*&quot;xlabel&quot;*&quot;ylabel&quot;*}'>
<field declared_type='char*' name='rootname' type='*'/>
<field declared_type='char*' name='cmdname' type='*'/>
<field declared_type='struct Sarray*' name='cmddata' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='datanames' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='plotdata' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='plottitles' type='^{Sarray=iii^*}'/>
<field declared_type='struct Numa*' name='plotstyles' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='nplots' type='i'/>
<field declared_type='char*' name='outname' type='*'/>
<field declared_type='l_int32' name='outformat' type='i'/>
<field declared_type='l_int32' name='scaling' type='i'/>
<field declared_type='char*' name='title' type='*'/>
<field declared_type='char*' name='xlabel' type='*'/>
<field declared_type='char*' name='ylabel' type='*'/>
</struct>
<struct name='GPlot' type='{GPlot=&quot;rootname&quot;*&quot;cmdname&quot;*&quot;cmddata&quot;^{Sarray}&quot;datanames&quot;^{Sarray}&quot;plotdata&quot;^{Sarray}&quot;plottitles&quot;^{Sarray}&quot;plotstyles&quot;^{Numa}&quot;nplots&quot;i&quot;outname&quot;*&quot;outformat&quot;i&quot;scaling&quot;i&quot;title&quot;*&quot;xlabel&quot;*&quot;ylabel&quot;*}'>
<field declared_type='char*' name='rootname' type='*'/>
<field declared_type='char*' name='cmdname' type='*'/>
<field declared_type='struct Sarray*' name='cmddata' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='datanames' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='plotdata' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='plottitles' type='^{Sarray=iii^*}'/>
<field declared_type='struct Numa*' name='plotstyles' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='nplots' type='i'/>
<field declared_type='char*' name='outname' type='*'/>
<field declared_type='l_int32' name='outformat' type='i'/>
<field declared_type='l_int32' name='scaling' type='i'/>
<field declared_type='char*' name='title' type='*'/>
<field declared_type='char*' name='xlabel' type='*'/>
<field declared_type='char*' name='ylabel' type='*'/>
</struct>
<struct name='JBCLASSER' type='{JbClasser=&quot;safiles&quot;^{Sarray}&quot;method&quot;i&quot;components&quot;i&quot;maxwidth&quot;i&quot;maxheight&quot;i&quot;npages&quot;i&quot;baseindex&quot;i&quot;nacomps&quot;^{Numa}&quot;sizehaus&quot;i&quot;rankhaus&quot;f&quot;thresh&quot;f&quot;weightfactor&quot;f&quot;naarea&quot;^{Numa}&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;keep_pixaa&quot;i&quot;pixaa&quot;^{Pixaa}&quot;pixat&quot;^{Pixa}&quot;pixatd&quot;^{Pixa}&quot;nahash&quot;^{NumaHash}&quot;nafgt&quot;^{Numa}&quot;ptac&quot;^{Pta}&quot;ptact&quot;^{Pta}&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}&quot;ptall&quot;^{Pta}}'>
<field declared_type='struct Sarray*' name='safiles' type='^{Sarray=iii^*}'/>
<field declared_type='l_int32' name='method' type='i'/>
<field declared_type='l_int32' name='components' type='i'/>
<field declared_type='l_int32' name='maxwidth' type='i'/>
<field declared_type='l_int32' name='maxheight' type='i'/>
<field declared_type='l_int32' name='npages' type='i'/>
<field declared_type='l_int32' name='baseindex' type='i'/>
<field declared_type='struct Numa*' name='nacomps' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='sizehaus' type='i'/>
<field declared_type='l_float32' name='rankhaus' type='f'/>
<field declared_type='l_float32' name='thresh' type='f'/>
<field declared_type='l_float32' name='weightfactor' type='f'/>
<field declared_type='struct Numa*' name='naarea' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='nclass' type='i'/>
<field declared_type='l_int32' name='keep_pixaa' type='i'/>
<field declared_type='struct Pixaa*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<field declared_type='struct Pixa*' name='pixat' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='struct Pixa*' name='pixatd' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='struct NumaHash*' name='nahash' type='^{NumaHash=ii^^{Numa}}'/>
<field declared_type='struct Numa*' name='nafgt' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Pta*' name='ptac' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='ptact' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Numa*' name='naclass' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='napage' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Pta*' name='ptaul' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='ptall' type='^{Pta=iiI^f^f}'/>
</struct>
<struct name='JBDATA' type='{JbData=&quot;pix&quot;^{Pix}&quot;npages&quot;i&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;latticew&quot;i&quot;latticeh&quot;i&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='npages' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='nclass' type='i'/>
<field declared_type='l_int32' name='latticew' type='i'/>
<field declared_type='l_int32' name='latticeh' type='i'/>
<field declared_type='struct Numa*' name='naclass' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='napage' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Pta*' name='ptaul' type='^{Pta=iiI^f^f}'/>
</struct>
<struct name='JbClasser' type='{JbClasser=&quot;safiles&quot;^{Sarray}&quot;method&quot;i&quot;components&quot;i&quot;maxwidth&quot;i&quot;maxheight&quot;i&quot;npages&quot;i&quot;baseindex&quot;i&quot;nacomps&quot;^{Numa}&quot;sizehaus&quot;i&quot;rankhaus&quot;f&quot;thresh&quot;f&quot;weightfactor&quot;f&quot;naarea&quot;^{Numa}&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;keep_pixaa&quot;i&quot;pixaa&quot;^{Pixaa}&quot;pixat&quot;^{Pixa}&quot;pixatd&quot;^{Pixa}&quot;nahash&quot;^{NumaHash}&quot;nafgt&quot;^{Numa}&quot;ptac&quot;^{Pta}&quot;ptact&quot;^{Pta}&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}&quot;ptall&quot;^{Pta}}'>
<field declared_type='struct Sarray*' name='safiles' type='^{Sarray=iii^*}'/>
<field declared_type='l_int32' name='method' type='i'/>
<field declared_type='l_int32' name='components' type='i'/>
<field declared_type='l_int32' name='maxwidth' type='i'/>
<field declared_type='l_int32' name='maxheight' type='i'/>
<field declared_type='l_int32' name='npages' type='i'/>
<field declared_type='l_int32' name='baseindex' type='i'/>
<field declared_type='struct Numa*' name='nacomps' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='sizehaus' type='i'/>
<field declared_type='l_float32' name='rankhaus' type='f'/>
<field declared_type='l_float32' name='thresh' type='f'/>
<field declared_type='l_float32' name='weightfactor' type='f'/>
<field declared_type='struct Numa*' name='naarea' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='nclass' type='i'/>
<field declared_type='l_int32' name='keep_pixaa' type='i'/>
<field declared_type='struct Pixaa*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<field declared_type='struct Pixa*' name='pixat' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='struct Pixa*' name='pixatd' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='struct NumaHash*' name='nahash' type='^{NumaHash=ii^^{Numa}}'/>
<field declared_type='struct Numa*' name='nafgt' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Pta*' name='ptac' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='ptact' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Numa*' name='naclass' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='napage' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Pta*' name='ptaul' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='ptall' type='^{Pta=iiI^f^f}'/>
</struct>
<struct name='JbData' type='{JbData=&quot;pix&quot;^{Pix}&quot;npages&quot;i&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;latticew&quot;i&quot;latticeh&quot;i&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='npages' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='nclass' type='i'/>
<field declared_type='l_int32' name='latticew' type='i'/>
<field declared_type='l_int32' name='latticeh' type='i'/>
<field declared_type='struct Numa*' name='naclass' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='napage' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Pta*' name='ptaul' type='^{Pta=iiI^f^f}'/>
</struct>
<struct name='L_BMF' type='{L_Bmf=&quot;pixa&quot;^{Pixa}&quot;size&quot;i&quot;directory&quot;*&quot;baseline1&quot;i&quot;baseline2&quot;i&quot;baseline3&quot;i&quot;lineheight&quot;i&quot;kernwidth&quot;i&quot;spacewidth&quot;i&quot;vertlinesep&quot;i&quot;fonttab&quot;^i&quot;baselinetab&quot;^i&quot;widthtab&quot;^i}'>
<field declared_type='struct Pixa*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='l_int32' name='size' type='i'/>
<field declared_type='char*' name='directory' type='*'/>
<field declared_type='l_int32' name='baseline1' type='i'/>
<field declared_type='l_int32' name='baseline2' type='i'/>
<field declared_type='l_int32' name='baseline3' type='i'/>
<field declared_type='l_int32' name='lineheight' type='i'/>
<field declared_type='l_int32' name='kernwidth' type='i'/>
<field declared_type='l_int32' name='spacewidth' type='i'/>
<field declared_type='l_int32' name='vertlinesep' type='i'/>
<field declared_type='l_int32*' name='fonttab' type='^i'/>
<field declared_type='l_int32*' name='baselinetab' type='^i'/>
<field declared_type='l_int32*' name='widthtab' type='^i'/>
</struct>
<struct name='L_BYTEA' type='{L_Bytea=&quot;nalloc&quot;I&quot;size&quot;I&quot;refcount&quot;i&quot;data&quot;*}'>
<field declared_type='size_t' name='nalloc' type='L'/>
<field declared_type='size_t' name='size' type='L'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='l_uint8*' name='data' type='*'/>
</struct>
<struct name='L_Bmf' type='{L_Bmf=&quot;pixa&quot;^{Pixa}&quot;size&quot;i&quot;directory&quot;*&quot;baseline1&quot;i&quot;baseline2&quot;i&quot;baseline3&quot;i&quot;lineheight&quot;i&quot;kernwidth&quot;i&quot;spacewidth&quot;i&quot;vertlinesep&quot;i&quot;fonttab&quot;^i&quot;baselinetab&quot;^i&quot;widthtab&quot;^i}'>
<field declared_type='struct Pixa*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='l_int32' name='size' type='i'/>
<field declared_type='char*' name='directory' type='*'/>
<field declared_type='l_int32' name='baseline1' type='i'/>
<field declared_type='l_int32' name='baseline2' type='i'/>
<field declared_type='l_int32' name='baseline3' type='i'/>
<field declared_type='l_int32' name='lineheight' type='i'/>
<field declared_type='l_int32' name='kernwidth' type='i'/>
<field declared_type='l_int32' name='spacewidth' type='i'/>
<field declared_type='l_int32' name='vertlinesep' type='i'/>
<field declared_type='l_int32*' name='fonttab' type='^i'/>
<field declared_type='l_int32*' name='baselinetab' type='^i'/>
<field declared_type='l_int32*' name='widthtab' type='^i'/>
</struct>
<struct name='L_Bytea' type='{L_Bytea=&quot;nalloc&quot;I&quot;size&quot;I&quot;refcount&quot;i&quot;data&quot;*}'>
<field declared_type='size_t' name='nalloc' type='L'/>
<field declared_type='size_t' name='size' type='L'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='l_uint8*' name='data' type='*'/>
</struct>
<struct name='L_COMPRESSED_DATA' type='{L_Compressed_Data=&quot;type&quot;i&quot;datacomp&quot;*&quot;nbytescomp&quot;I&quot;data85&quot;*&quot;nbytes85&quot;I&quot;cmapdata85&quot;*&quot;cmapdatahex&quot;*&quot;ncolors&quot;i&quot;w&quot;i&quot;h&quot;i&quot;bps&quot;i&quot;spp&quot;i&quot;minisblack&quot;i&quot;nbytes&quot;I&quot;res&quot;i}'>
<field declared_type='l_int32' name='type' type='i'/>
<field declared_type='l_uint8*' name='datacomp' type='*'/>
<field declared_type='size_t' name='nbytescomp' type='L'/>
<field declared_type='char*' name='data85' type='*'/>
<field declared_type='size_t' name='nbytes85' type='L'/>
<field declared_type='char*' name='cmapdata85' type='*'/>
<field declared_type='char*' name='cmapdatahex' type='*'/>
<field declared_type='l_int32' name='ncolors' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='bps' type='i'/>
<field declared_type='l_int32' name='spp' type='i'/>
<field declared_type='l_int32' name='minisblack' type='i'/>
<field declared_type='size_t' name='nbytes' type='L'/>
<field declared_type='l_int32' name='res' type='i'/>
</struct>
<struct name='L_Compressed_Data' type='{L_Compressed_Data=&quot;type&quot;i&quot;datacomp&quot;*&quot;nbytescomp&quot;I&quot;data85&quot;*&quot;nbytes85&quot;I&quot;cmapdata85&quot;*&quot;cmapdatahex&quot;*&quot;ncolors&quot;i&quot;w&quot;i&quot;h&quot;i&quot;bps&quot;i&quot;spp&quot;i&quot;minisblack&quot;i&quot;nbytes&quot;I&quot;res&quot;i}'>
<field declared_type='l_int32' name='type' type='i'/>
<field declared_type='l_uint8*' name='datacomp' type='*'/>
<field declared_type='size_t' name='nbytescomp' type='L'/>
<field declared_type='char*' name='data85' type='*'/>
<field declared_type='size_t' name='nbytes85' type='L'/>
<field declared_type='char*' name='cmapdata85' type='*'/>
<field declared_type='char*' name='cmapdatahex' type='*'/>
<field declared_type='l_int32' name='ncolors' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='bps' type='i'/>
<field declared_type='l_int32' name='spp' type='i'/>
<field declared_type='l_int32' name='minisblack' type='i'/>
<field declared_type='size_t' name='nbytes' type='L'/>
<field declared_type='l_int32' name='res' type='i'/>
</struct>
<struct name='L_DEWARP' type='{L_Dewarp=&quot;pixs&quot;^{Pix}&quot;pixd&quot;^{Pix}&quot;sampvdispar&quot;^{FPix}&quot;samphdispar&quot;^{FPix}&quot;fullvdispar&quot;^{FPix}&quot;fullhdispar&quot;^{FPix}&quot;naflats&quot;^{Numa}&quot;nacurves&quot;^{Numa}&quot;w&quot;i&quot;h&quot;i&quot;pageno&quot;i&quot;sampling&quot;i&quot;redfactor&quot;i&quot;minlines&quot;i&quot;nlines&quot;i&quot;medcurv&quot;i&quot;leftcurv&quot;i&quot;rightcurv&quot;i&quot;nx&quot;i&quot;ny&quot;i&quot;hasref&quot;i&quot;refpage&quot;i&quot;success&quot;i&quot;valid&quot;i&quot;debug&quot;i}'>
<field declared_type='struct Pix*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Pix*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct FPix*' name='sampvdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct FPix*' name='samphdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct FPix*' name='fullvdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct FPix*' name='fullhdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct Numa*' name='naflats' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='nacurves' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='pageno' type='i'/>
<field declared_type='l_int32' name='sampling' type='i'/>
<field declared_type='l_int32' name='redfactor' type='i'/>
<field declared_type='l_int32' name='minlines' type='i'/>
<field declared_type='l_int32' name='nlines' type='i'/>
<field declared_type='l_int32' name='medcurv' type='i'/>
<field declared_type='l_int32' name='leftcurv' type='i'/>
<field declared_type='l_int32' name='rightcurv' type='i'/>
<field declared_type='l_int32' name='nx' type='i'/>
<field declared_type='l_int32' name='ny' type='i'/>
<field declared_type='l_int32' name='hasref' type='i'/>
<field declared_type='l_int32' name='refpage' type='i'/>
<field declared_type='l_int32' name='success' type='i'/>
<field declared_type='l_int32' name='valid' type='i'/>
<field declared_type='l_int32' name='debug' type='i'/>
</struct>
<struct name='L_DEWARPA' type='{L_Dewarpa=&quot;nalloc&quot;i&quot;maxpage&quot;i&quot;dewarp&quot;^^{L_Dewarp}&quot;namodels&quot;^{Numa}&quot;napages&quot;^{Numa}&quot;redfactor&quot;i&quot;sampling&quot;i&quot;minlines&quot;i&quot;maxdist&quot;i&quot;min_medcurv&quot;i&quot;max_medcurv&quot;i&quot;max_leftcurv&quot;i&quot;max_rightcurv&quot;i&quot;fullmodel&quot;i&quot;modelsready&quot;i}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='maxpage' type='i'/>
<field declared_type='struct L_Dewarp**' name='dewarp' type='^^{L_Dewarp}'/>
<field declared_type='struct Numa*' name='namodels' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='napages' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='redfactor' type='i'/>
<field declared_type='l_int32' name='sampling' type='i'/>
<field declared_type='l_int32' name='minlines' type='i'/>
<field declared_type='l_int32' name='maxdist' type='i'/>
<field declared_type='l_int32' name='min_medcurv' type='i'/>
<field declared_type='l_int32' name='max_medcurv' type='i'/>
<field declared_type='l_int32' name='max_leftcurv' type='i'/>
<field declared_type='l_int32' name='max_rightcurv' type='i'/>
<field declared_type='l_int32' name='fullmodel' type='i'/>
<field declared_type='l_int32' name='modelsready' type='i'/>
</struct>
<struct name='L_DNA' type='{L_Dna=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;startx&quot;d&quot;delx&quot;d&quot;array&quot;^d}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='l_float64' name='startx' type='d'/>
<field declared_type='l_float64' name='delx' type='d'/>
<field declared_type='l_float64*' name='array' type='^d'/>
</struct>
<struct name='L_DNAA' type='{L_Dnaa=&quot;nalloc&quot;i&quot;n&quot;i&quot;dna&quot;^^{L_Dna}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='struct L_Dna**' name='dna' type='^^{L_Dna}'/>
</struct>
<struct name='L_Dewarp' type='{L_Dewarp=&quot;pixs&quot;^{Pix}&quot;pixd&quot;^{Pix}&quot;sampvdispar&quot;^{FPix}&quot;samphdispar&quot;^{FPix}&quot;fullvdispar&quot;^{FPix}&quot;fullhdispar&quot;^{FPix}&quot;naflats&quot;^{Numa}&quot;nacurves&quot;^{Numa}&quot;w&quot;i&quot;h&quot;i&quot;pageno&quot;i&quot;sampling&quot;i&quot;redfactor&quot;i&quot;minlines&quot;i&quot;nlines&quot;i&quot;medcurv&quot;i&quot;leftcurv&quot;i&quot;rightcurv&quot;i&quot;nx&quot;i&quot;ny&quot;i&quot;hasref&quot;i&quot;refpage&quot;i&quot;success&quot;i&quot;valid&quot;i&quot;debug&quot;i}'>
<field declared_type='struct Pix*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Pix*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct FPix*' name='sampvdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct FPix*' name='samphdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct FPix*' name='fullvdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct FPix*' name='fullhdispar' type='^{FPix=iiiIii^f}'/>
<field declared_type='struct Numa*' name='naflats' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='nacurves' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='pageno' type='i'/>
<field declared_type='l_int32' name='sampling' type='i'/>
<field declared_type='l_int32' name='redfactor' type='i'/>
<field declared_type='l_int32' name='minlines' type='i'/>
<field declared_type='l_int32' name='nlines' type='i'/>
<field declared_type='l_int32' name='medcurv' type='i'/>
<field declared_type='l_int32' name='leftcurv' type='i'/>
<field declared_type='l_int32' name='rightcurv' type='i'/>
<field declared_type='l_int32' name='nx' type='i'/>
<field declared_type='l_int32' name='ny' type='i'/>
<field declared_type='l_int32' name='hasref' type='i'/>
<field declared_type='l_int32' name='refpage' type='i'/>
<field declared_type='l_int32' name='success' type='i'/>
<field declared_type='l_int32' name='valid' type='i'/>
<field declared_type='l_int32' name='debug' type='i'/>
</struct>
<struct name='L_Dewarpa' type='{L_Dewarpa=&quot;nalloc&quot;i&quot;maxpage&quot;i&quot;dewarp&quot;^^{L_Dewarp}&quot;namodels&quot;^{Numa}&quot;napages&quot;^{Numa}&quot;redfactor&quot;i&quot;sampling&quot;i&quot;minlines&quot;i&quot;maxdist&quot;i&quot;min_medcurv&quot;i&quot;max_medcurv&quot;i&quot;max_leftcurv&quot;i&quot;max_rightcurv&quot;i&quot;fullmodel&quot;i&quot;modelsready&quot;i}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='maxpage' type='i'/>
<field declared_type='struct L_Dewarp**' name='dewarp' type='^^{L_Dewarp}'/>
<field declared_type='struct Numa*' name='namodels' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='napages' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='redfactor' type='i'/>
<field declared_type='l_int32' name='sampling' type='i'/>
<field declared_type='l_int32' name='minlines' type='i'/>
<field declared_type='l_int32' name='maxdist' type='i'/>
<field declared_type='l_int32' name='min_medcurv' type='i'/>
<field declared_type='l_int32' name='max_medcurv' type='i'/>
<field declared_type='l_int32' name='max_leftcurv' type='i'/>
<field declared_type='l_int32' name='max_rightcurv' type='i'/>
<field declared_type='l_int32' name='fullmodel' type='i'/>
<field declared_type='l_int32' name='modelsready' type='i'/>
</struct>
<struct name='L_Dna' type='{L_Dna=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;startx&quot;d&quot;delx&quot;d&quot;array&quot;^d}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='l_float64' name='startx' type='d'/>
<field declared_type='l_float64' name='delx' type='d'/>
<field declared_type='l_float64*' name='array' type='^d'/>
</struct>
<struct name='L_Dnaa' type='{L_Dnaa=&quot;nalloc&quot;i&quot;n&quot;i&quot;dna&quot;^^{L_Dna}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='struct L_Dna**' name='dna' type='^^{L_Dna}'/>
</struct>
<struct name='L_HEAP' type='{L_Heap=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;direction&quot;i}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
<field declared_type='l_int32' name='direction' type='i'/>
</struct>
<struct name='L_Heap' type='{L_Heap=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;direction&quot;i}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
<field declared_type='l_int32' name='direction' type='i'/>
</struct>
<struct name='L_KERNEL' type='{L_Kernel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^f}'>
<field declared_type='l_int32' name='sy' type='i'/>
<field declared_type='l_int32' name='sx' type='i'/>
<field declared_type='l_int32' name='cy' type='i'/>
<field declared_type='l_int32' name='cx' type='i'/>
<field declared_type='l_float32**' name='data' type='^^f'/>
</struct>
<struct name='L_Kernel' type='{L_Kernel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^f}'>
<field declared_type='l_int32' name='sy' type='i'/>
<field declared_type='l_int32' name='sx' type='i'/>
<field declared_type='l_int32' name='cy' type='i'/>
<field declared_type='l_int32' name='cx' type='i'/>
<field declared_type='l_float32**' name='data' type='^^f'/>
</struct>
<struct name='L_PDF_DATA' type='{L_Pdf_Data=&quot;title&quot;*&quot;n&quot;i&quot;ncmap&quot;i&quot;cida&quot;^{L_Ptra}&quot;id&quot;*&quot;obj1&quot;*&quot;obj2&quot;*&quot;obj3&quot;*&quot;obj4&quot;*&quot;obj5&quot;*&quot;poststream&quot;*&quot;trailer&quot;*&quot;xy&quot;^{Pta}&quot;wh&quot;^{Pta}&quot;mediabox&quot;^{Box}&quot;saprex&quot;^{Sarray}&quot;sacmap&quot;^{Sarray}&quot;objsize&quot;^{L_Dna}&quot;objloc&quot;^{L_Dna}&quot;xrefloc&quot;i}'>
<field declared_type='char*' name='title' type='*'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='ncmap' type='i'/>
<field declared_type='struct L_Ptra*' name='cida' type='^{L_Ptra=iii^^v}'/>
<field declared_type='char*' name='id' type='*'/>
<field declared_type='char*' name='obj1' type='*'/>
<field declared_type='char*' name='obj2' type='*'/>
<field declared_type='char*' name='obj3' type='*'/>
<field declared_type='char*' name='obj4' type='*'/>
<field declared_type='char*' name='obj5' type='*'/>
<field declared_type='char*' name='poststream' type='*'/>
<field declared_type='char*' name='trailer' type='*'/>
<field declared_type='struct Pta*' name='xy' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='wh' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Box*' name='mediabox' type='^{Box=iiiiI}'/>
<field declared_type='struct Sarray*' name='saprex' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='sacmap' type='^{Sarray=iii^*}'/>
<field declared_type='struct L_Dna*' name='objsize' type='^{L_Dna=iiidd^d}'/>
<field declared_type='struct L_Dna*' name='objloc' type='^{L_Dna=iiidd^d}'/>
<field declared_type='l_int32' name='xrefloc' type='i'/>
</struct>
<struct name='L_PTRA' type='{L_Ptra=&quot;nalloc&quot;i&quot;imax&quot;i&quot;nactual&quot;i&quot;array&quot;^^v}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='imax' type='i'/>
<field declared_type='l_int32' name='nactual' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
</struct>
<struct name='L_PTRAA' type='{L_Ptraa=&quot;nalloc&quot;i&quot;ptra&quot;^^{L_Ptra}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct L_Ptra**' name='ptra' type='^^{L_Ptra}'/>
</struct>
<struct name='L_Pdf_Data' type='{L_Pdf_Data=&quot;title&quot;*&quot;n&quot;i&quot;ncmap&quot;i&quot;cida&quot;^{L_Ptra}&quot;id&quot;*&quot;obj1&quot;*&quot;obj2&quot;*&quot;obj3&quot;*&quot;obj4&quot;*&quot;obj5&quot;*&quot;poststream&quot;*&quot;trailer&quot;*&quot;xy&quot;^{Pta}&quot;wh&quot;^{Pta}&quot;mediabox&quot;^{Box}&quot;saprex&quot;^{Sarray}&quot;sacmap&quot;^{Sarray}&quot;objsize&quot;^{L_Dna}&quot;objloc&quot;^{L_Dna}&quot;xrefloc&quot;i}'>
<field declared_type='char*' name='title' type='*'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='ncmap' type='i'/>
<field declared_type='struct L_Ptra*' name='cida' type='^{L_Ptra=iii^^v}'/>
<field declared_type='char*' name='id' type='*'/>
<field declared_type='char*' name='obj1' type='*'/>
<field declared_type='char*' name='obj2' type='*'/>
<field declared_type='char*' name='obj3' type='*'/>
<field declared_type='char*' name='obj4' type='*'/>
<field declared_type='char*' name='obj5' type='*'/>
<field declared_type='char*' name='poststream' type='*'/>
<field declared_type='char*' name='trailer' type='*'/>
<field declared_type='struct Pta*' name='xy' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Pta*' name='wh' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Box*' name='mediabox' type='^{Box=iiiiI}'/>
<field declared_type='struct Sarray*' name='saprex' type='^{Sarray=iii^*}'/>
<field declared_type='struct Sarray*' name='sacmap' type='^{Sarray=iii^*}'/>
<field declared_type='struct L_Dna*' name='objsize' type='^{L_Dna=iiidd^d}'/>
<field declared_type='struct L_Dna*' name='objloc' type='^{L_Dna=iiidd^d}'/>
<field declared_type='l_int32' name='xrefloc' type='i'/>
</struct>
<struct name='L_Ptra' type='{L_Ptra=&quot;nalloc&quot;i&quot;imax&quot;i&quot;nactual&quot;i&quot;array&quot;^^v}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='imax' type='i'/>
<field declared_type='l_int32' name='nactual' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
</struct>
<struct name='L_Ptraa' type='{L_Ptraa=&quot;nalloc&quot;i&quot;ptra&quot;^^{L_Ptra}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct L_Ptra**' name='ptra' type='^^{L_Ptra}'/>
</struct>
<struct name='L_QUEUE' type='{L_Queue=&quot;nalloc&quot;i&quot;nhead&quot;i&quot;nelem&quot;i&quot;array&quot;^^v&quot;stack&quot;^{L_Stack}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='nhead' type='i'/>
<field declared_type='l_int32' name='nelem' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
<field declared_type='struct L_Stack*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_Queue' type='{L_Queue=&quot;nalloc&quot;i&quot;nhead&quot;i&quot;nelem&quot;i&quot;array&quot;^^v&quot;stack&quot;^{L_Stack}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='nhead' type='i'/>
<field declared_type='l_int32' name='nelem' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
<field declared_type='struct L_Stack*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_REGPARAMS' type='{L_RegParams=&quot;fp&quot;^{__sFILE}&quot;testname&quot;*&quot;tempfile&quot;*&quot;mode&quot;i&quot;index&quot;i&quot;success&quot;i&quot;display&quot;i&quot;tstart&quot;^v}'>
<field declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<field declared_type='char*' name='testname' type='*'/>
<field declared_type='char*' name='tempfile' type='*'/>
<field declared_type='l_int32' name='mode' type='i'/>
<field declared_type='l_int32' name='index' type='i'/>
<field declared_type='l_int32' name='success' type='i'/>
<field declared_type='l_int32' name='display' type='i'/>
<field declared_type='L_TIMER' name='tstart' type='^v'/>
</struct>
<struct name='L_RegParams' type='{L_RegParams=&quot;fp&quot;^{__sFILE}&quot;testname&quot;*&quot;tempfile&quot;*&quot;mode&quot;i&quot;index&quot;i&quot;success&quot;i&quot;display&quot;i&quot;tstart&quot;^v}'>
<field declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<field declared_type='char*' name='testname' type='*'/>
<field declared_type='char*' name='tempfile' type='*'/>
<field declared_type='l_int32' name='mode' type='i'/>
<field declared_type='l_int32' name='index' type='i'/>
<field declared_type='l_int32' name='success' type='i'/>
<field declared_type='l_int32' name='display' type='i'/>
<field declared_type='L_TIMER' name='tstart' type='^v'/>
</struct>
<struct name='L_STACK' type='{L_Stack=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;auxstack&quot;^{L_Stack}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
<field declared_type='struct L_Stack*' name='auxstack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_SUDOKU' type='{L_Sudoku=&quot;num&quot;i&quot;locs&quot;^i&quot;current&quot;i&quot;init&quot;^i&quot;state&quot;^i&quot;nguess&quot;i&quot;finished&quot;i&quot;failure&quot;i}'>
<field declared_type='l_int32' name='num' type='i'/>
<field declared_type='l_int32*' name='locs' type='^i'/>
<field declared_type='l_int32' name='current' type='i'/>
<field declared_type='l_int32*' name='init' type='^i'/>
<field declared_type='l_int32*' name='state' type='^i'/>
<field declared_type='l_int32' name='nguess' type='i'/>
<field declared_type='l_int32' name='finished' type='i'/>
<field declared_type='l_int32' name='failure' type='i'/>
</struct>
<struct name='L_Stack' type='{L_Stack=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;auxstack&quot;^{L_Stack}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='void**' name='array' type='^^v'/>
<field declared_type='struct L_Stack*' name='auxstack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_Sudoku' type='{L_Sudoku=&quot;num&quot;i&quot;locs&quot;^i&quot;current&quot;i&quot;init&quot;^i&quot;state&quot;^i&quot;nguess&quot;i&quot;finished&quot;i&quot;failure&quot;i}'>
<field declared_type='l_int32' name='num' type='i'/>
<field declared_type='l_int32*' name='locs' type='^i'/>
<field declared_type='l_int32' name='current' type='i'/>
<field declared_type='l_int32*' name='init' type='^i'/>
<field declared_type='l_int32*' name='state' type='^i'/>
<field declared_type='l_int32' name='nguess' type='i'/>
<field declared_type='l_int32' name='finished' type='i'/>
<field declared_type='l_int32' name='failure' type='i'/>
</struct>
<struct name='L_WSHED' type='{L_WShed=&quot;pixs&quot;^{Pix}&quot;pixm&quot;^{Pix}&quot;mindepth&quot;i&quot;pixlab&quot;^{Pix}&quot;pixt&quot;^{Pix}&quot;lines8&quot;^^v&quot;linem1&quot;^^v&quot;linelab32&quot;^^v&quot;linet1&quot;^^v&quot;pixad&quot;^{Pixa}&quot;ptas&quot;^{Pta}&quot;nasi&quot;^{Numa}&quot;nash&quot;^{Numa}&quot;namh&quot;^{Numa}&quot;nalevels&quot;^{Numa}&quot;nseeds&quot;i&quot;nother&quot;i&quot;lut&quot;^i&quot;links&quot;^^{Numa}&quot;arraysize&quot;i&quot;debug&quot;i}'>
<field declared_type='struct Pix*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Pix*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='mindepth' type='i'/>
<field declared_type='struct Pix*' name='pixlab' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Pix*' name='pixt' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='void**' name='lines8' type='^^v'/>
<field declared_type='void**' name='linem1' type='^^v'/>
<field declared_type='void**' name='linelab32' type='^^v'/>
<field declared_type='void**' name='linet1' type='^^v'/>
<field declared_type='struct Pixa*' name='pixad' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='struct Pta*' name='ptas' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Numa*' name='nasi' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='nash' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='namh' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='nalevels' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='nseeds' type='i'/>
<field declared_type='l_int32' name='nother' type='i'/>
<field declared_type='l_int32*' name='lut' type='^i'/>
<field declared_type='struct Numa**' name='links' type='^^{Numa}'/>
<field declared_type='l_int32' name='arraysize' type='i'/>
<field declared_type='l_int32' name='debug' type='i'/>
</struct>
<struct name='L_WShed' type='{L_WShed=&quot;pixs&quot;^{Pix}&quot;pixm&quot;^{Pix}&quot;mindepth&quot;i&quot;pixlab&quot;^{Pix}&quot;pixt&quot;^{Pix}&quot;lines8&quot;^^v&quot;linem1&quot;^^v&quot;linelab32&quot;^^v&quot;linet1&quot;^^v&quot;pixad&quot;^{Pixa}&quot;ptas&quot;^{Pta}&quot;nasi&quot;^{Numa}&quot;nash&quot;^{Numa}&quot;namh&quot;^{Numa}&quot;nalevels&quot;^{Numa}&quot;nseeds&quot;i&quot;nother&quot;i&quot;lut&quot;^i&quot;links&quot;^^{Numa}&quot;arraysize&quot;i&quot;debug&quot;i}'>
<field declared_type='struct Pix*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Pix*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='mindepth' type='i'/>
<field declared_type='struct Pix*' name='pixlab' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='struct Pix*' name='pixt' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='void**' name='lines8' type='^^v'/>
<field declared_type='void**' name='linem1' type='^^v'/>
<field declared_type='void**' name='linelab32' type='^^v'/>
<field declared_type='void**' name='linet1' type='^^v'/>
<field declared_type='struct Pixa*' name='pixad' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field declared_type='struct Pta*' name='ptas' type='^{Pta=iiI^f^f}'/>
<field declared_type='struct Numa*' name='nasi' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='nash' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='namh' type='^{Numa=iiiff^f}'/>
<field declared_type='struct Numa*' name='nalevels' type='^{Numa=iiiff^f}'/>
<field declared_type='l_int32' name='nseeds' type='i'/>
<field declared_type='l_int32' name='nother' type='i'/>
<field declared_type='l_int32*' name='lut' type='^i'/>
<field declared_type='struct Numa**' name='links' type='^^{Numa}'/>
<field declared_type='l_int32' name='arraysize' type='i'/>
<field declared_type='l_int32' name='debug' type='i'/>
</struct>
<struct name='MATRIX_COORD' type='{MATRIX_COORD=&quot;Delete&quot;?&quot;row&quot;i}'>
<field declared_type='void (void *)' name='Delete' type='?'/>
<field declared_type='int' name='row' type='i'/>
</struct>
<struct name='NUMA' type='{Numa=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;startx&quot;f&quot;delx&quot;f&quot;array&quot;^f}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='l_float32' name='startx' type='f'/>
<field declared_type='l_float32' name='delx' type='f'/>
<field declared_type='l_float32*' name='array' type='^f'/>
</struct>
<struct name='NUMA2D' type='{Numa2d=&quot;nrows&quot;i&quot;ncols&quot;i&quot;initsize&quot;i&quot;numa&quot;^^^{Numa}}'>
<field declared_type='l_int32' name='nrows' type='i'/>
<field declared_type='l_int32' name='ncols' type='i'/>
<field declared_type='l_int32' name='initsize' type='i'/>
<field declared_type='struct Numa***' name='numa' type='^^^{Numa}'/>
</struct>
<struct name='NUMAA' type='{Numaa=&quot;nalloc&quot;i&quot;n&quot;i&quot;numa&quot;^^{Numa}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='struct Numa**' name='numa' type='^^{Numa}'/>
</struct>
<struct name='NUMAHASH' type='{NumaHash=&quot;nbuckets&quot;i&quot;initsize&quot;i&quot;numa&quot;^^{Numa}}'>
<field declared_type='l_int32' name='nbuckets' type='i'/>
<field declared_type='l_int32' name='initsize' type='i'/>
<field declared_type='struct Numa**' name='numa' type='^^{Numa}'/>
</struct>
<struct name='Numa' type='{Numa=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;startx&quot;f&quot;delx&quot;f&quot;array&quot;^f}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='l_float32' name='startx' type='f'/>
<field declared_type='l_float32' name='delx' type='f'/>
<field declared_type='l_float32*' name='array' type='^f'/>
</struct>
<struct name='Numa2d' type='{Numa2d=&quot;nrows&quot;i&quot;ncols&quot;i&quot;initsize&quot;i&quot;numa&quot;^^^{Numa}}'>
<field declared_type='l_int32' name='nrows' type='i'/>
<field declared_type='l_int32' name='ncols' type='i'/>
<field declared_type='l_int32' name='initsize' type='i'/>
<field declared_type='struct Numa***' name='numa' type='^^^{Numa}'/>
</struct>
<struct name='NumaHash' type='{NumaHash=&quot;nbuckets&quot;i&quot;initsize&quot;i&quot;numa&quot;^^{Numa}}'>
<field declared_type='l_int32' name='nbuckets' type='i'/>
<field declared_type='l_int32' name='initsize' type='i'/>
<field declared_type='struct Numa**' name='numa' type='^^{Numa}'/>
</struct>
<struct name='Numaa' type='{Numaa=&quot;nalloc&quot;i&quot;n&quot;i&quot;numa&quot;^^{Numa}}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='struct Numa**' name='numa' type='^^{Numa}'/>
</struct>
<struct name='PIX' type='{Pix=&quot;w&quot;I&quot;h&quot;I&quot;d&quot;I&quot;wpl&quot;I&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;informat&quot;i&quot;text&quot;*&quot;colormap&quot;^{PixColormap}&quot;data&quot;^I}'>
<field declared_type='l_uint32' name='w' type='I'/>
<field declared_type='l_uint32' name='h' type='I'/>
<field declared_type='l_uint32' name='d' type='I'/>
<field declared_type='l_uint32' name='wpl' type='I'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_int32' name='informat' type='i'/>
<field declared_type='char*' name='text' type='*'/>
<field declared_type='struct PixColormap*' name='colormap' type='^{PixColormap=^viii}'/>
<field declared_type='l_uint32*' name='data' type='^I'/>
</struct>
<struct name='PIXA' type='{Pixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;pix&quot;^^{Pix}&quot;boxa&quot;^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='struct Pix**' name='pix' type='^^{Pix}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PIXAA' type='{Pixaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pixa&quot;^^{Pixa}&quot;boxa&quot;^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Pixa**' name='pixa' type='^^{Pixa}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PIXAC' type='{PixaComp=&quot;n&quot;i&quot;nalloc&quot;i&quot;offset&quot;i&quot;pixc&quot;^^{PixComp}&quot;boxa&quot;^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='offset' type='i'/>
<field declared_type='struct PixComp**' name='pixc' type='^^{PixComp}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PIXACC' type='{Pixacc=&quot;w&quot;i&quot;h&quot;i&quot;offset&quot;i&quot;pix&quot;^{Pix}}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='offset' type='i'/>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</struct>
<struct name='PIXC' type='{PixComp=&quot;w&quot;i&quot;h&quot;i&quot;d&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;comptype&quot;i&quot;text&quot;*&quot;cmapflag&quot;i&quot;data&quot;*&quot;size&quot;I}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='d' type='i'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_int32' name='comptype' type='i'/>
<field declared_type='char*' name='text' type='*'/>
<field declared_type='l_int32' name='cmapflag' type='i'/>
<field declared_type='l_uint8*' name='data' type='*'/>
<field declared_type='size_t' name='size' type='L'/>
</struct>
<struct name='PIXCMAP' type='{PixColormap=&quot;array&quot;^v&quot;depth&quot;i&quot;nalloc&quot;i&quot;n&quot;i}'>
<field declared_type='void*' name='array' type='^v'/>
<field declared_type='l_int32' name='depth' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
</struct>
<struct name='PIXTILING' type='{PixTiling=&quot;pix&quot;^{Pix}&quot;nx&quot;i&quot;ny&quot;i&quot;w&quot;i&quot;h&quot;i&quot;xoverlap&quot;i&quot;yoverlap&quot;i&quot;strip&quot;i}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='nx' type='i'/>
<field declared_type='l_int32' name='ny' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='xoverlap' type='i'/>
<field declared_type='l_int32' name='yoverlap' type='i'/>
<field declared_type='l_int32' name='strip' type='i'/>
</struct>
<struct name='PTA' type='{Pta=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;x&quot;^f&quot;y&quot;^f}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_float32*' name='x' type='^f'/>
<field declared_type='l_float32*' name='y' type='^f'/>
</struct>
<struct name='PTAA' type='{Ptaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pta&quot;^^{Pta}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Pta**' name='pta' type='^^{Pta}'/>
</struct>
<struct name='Pix' type='{Pix=&quot;w&quot;I&quot;h&quot;I&quot;d&quot;I&quot;wpl&quot;I&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;informat&quot;i&quot;text&quot;*&quot;colormap&quot;^{PixColormap}&quot;data&quot;^I}'>
<field declared_type='l_uint32' name='w' type='I'/>
<field declared_type='l_uint32' name='h' type='I'/>
<field declared_type='l_uint32' name='d' type='I'/>
<field declared_type='l_uint32' name='wpl' type='I'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_int32' name='informat' type='i'/>
<field declared_type='char*' name='text' type='*'/>
<field declared_type='struct PixColormap*' name='colormap' type='^{PixColormap=^viii}'/>
<field declared_type='l_uint32*' name='data' type='^I'/>
</struct>
<struct name='PixColormap' type='{PixColormap=&quot;array&quot;^v&quot;depth&quot;i&quot;nalloc&quot;i&quot;n&quot;i}'>
<field declared_type='void*' name='array' type='^v'/>
<field declared_type='l_int32' name='depth' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
</struct>
<struct name='PixComp' type='{PixComp=&quot;w&quot;i&quot;h&quot;i&quot;d&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;comptype&quot;i&quot;text&quot;*&quot;cmapflag&quot;i&quot;data&quot;*&quot;size&quot;I}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='d' type='i'/>
<field declared_type='l_int32' name='xres' type='i'/>
<field declared_type='l_int32' name='yres' type='i'/>
<field declared_type='l_int32' name='comptype' type='i'/>
<field declared_type='char*' name='text' type='*'/>
<field declared_type='l_int32' name='cmapflag' type='i'/>
<field declared_type='l_uint8*' name='data' type='*'/>
<field declared_type='size_t' name='size' type='L'/>
</struct>
<struct name='PixTiling' type='{PixTiling=&quot;pix&quot;^{Pix}&quot;nx&quot;i&quot;ny&quot;i&quot;w&quot;i&quot;h&quot;i&quot;xoverlap&quot;i&quot;yoverlap&quot;i&quot;strip&quot;i}'>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field declared_type='l_int32' name='nx' type='i'/>
<field declared_type='l_int32' name='ny' type='i'/>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='xoverlap' type='i'/>
<field declared_type='l_int32' name='yoverlap' type='i'/>
<field declared_type='l_int32' name='strip' type='i'/>
</struct>
<struct name='Pixa' type='{Pixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;pix&quot;^^{Pix}&quot;boxa&quot;^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='struct Pix**' name='pix' type='^^{Pix}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PixaComp' type='{PixaComp=&quot;n&quot;i&quot;nalloc&quot;i&quot;offset&quot;i&quot;pixc&quot;^^{PixComp}&quot;boxa&quot;^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='offset' type='i'/>
<field declared_type='struct PixComp**' name='pixc' type='^^{PixComp}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='Pixaa' type='{Pixaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pixa&quot;^^{Pixa}&quot;boxa&quot;^{Boxa}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Pixa**' name='pixa' type='^^{Pixa}'/>
<field declared_type='struct Boxa*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='Pixacc' type='{Pixacc=&quot;w&quot;i&quot;h&quot;i&quot;offset&quot;i&quot;pix&quot;^{Pix}}'>
<field declared_type='l_int32' name='w' type='i'/>
<field declared_type='l_int32' name='h' type='i'/>
<field declared_type='l_int32' name='offset' type='i'/>
<field declared_type='struct Pix*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</struct>
<struct name='Pta' type='{Pta=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;x&quot;^f&quot;y&quot;^f}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_uint32' name='refcount' type='I'/>
<field declared_type='l_float32*' name='x' type='^f'/>
<field declared_type='l_float32*' name='y' type='^f'/>
</struct>
<struct name='Ptaa' type='{Ptaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pta&quot;^^{Pta}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Pta**' name='pta' type='^^{Pta}'/>
</struct>
<struct name='RGBA_QUAD' type='{RGBA_Quad=&quot;blue&quot;C&quot;green&quot;C&quot;red&quot;C&quot;reserved&quot;C}'>
<field declared_type='l_uint8' name='blue' type='C'/>
<field declared_type='l_uint8' name='green' type='C'/>
<field declared_type='l_uint8' name='red' type='C'/>
<field declared_type='l_uint8' name='reserved' type='C'/>
</struct>
<struct name='RGBA_Quad' type='{RGBA_Quad=&quot;blue&quot;C&quot;green&quot;C&quot;red&quot;C&quot;reserved&quot;C}'>
<field declared_type='l_uint8' name='blue' type='C'/>
<field declared_type='l_uint8' name='green' type='C'/>
<field declared_type='l_uint8' name='red' type='C'/>
<field declared_type='l_uint8' name='reserved' type='C'/>
</struct>
<struct name='SARRAY' type='{Sarray=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;array&quot;^*}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='char**' name='array' type='^*'/>
</struct>
<struct name='SEL' type='{Sel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^i&quot;name&quot;*}'>
<field declared_type='l_int32' name='sy' type='i'/>
<field declared_type='l_int32' name='sx' type='i'/>
<field declared_type='l_int32' name='cy' type='i'/>
<field declared_type='l_int32' name='cx' type='i'/>
<field declared_type='l_int32**' name='data' type='^^i'/>
<field declared_type='char*' name='name' type='*'/>
</struct>
<struct name='SELA' type='{Sela=&quot;n&quot;i&quot;nalloc&quot;i&quot;sel&quot;^^{Sel}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Sel**' name='sel' type='^^{Sel}'/>
</struct>
<struct name='Sarray' type='{Sarray=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;array&quot;^*}'>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='refcount' type='i'/>
<field declared_type='char**' name='array' type='^*'/>
</struct>
<struct name='Sel' type='{Sel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^i&quot;name&quot;*}'>
<field declared_type='l_int32' name='sy' type='i'/>
<field declared_type='l_int32' name='sx' type='i'/>
<field declared_type='l_int32' name='cy' type='i'/>
<field declared_type='l_int32' name='cx' type='i'/>
<field declared_type='l_int32**' name='data' type='^^i'/>
<field declared_type='char*' name='name' type='*'/>
</struct>
<struct name='Sela' type='{Sela=&quot;n&quot;i&quot;nalloc&quot;i&quot;sel&quot;^^{Sel}}'>
<field declared_type='l_int32' name='n' type='i'/>
<field declared_type='l_int32' name='nalloc' type='i'/>
<field declared_type='struct Sel**' name='sel' type='^^{Sel}'/>
</struct>
<struct name='WIDTH_RECORD' type='{_WIDTH_RECORD=&quot;num_chars&quot;i&quot;widths&quot;[1i]}'>
<field declared_type='int' name='num_chars' type='i'/>
<field declared_type='int*' name='widths' type='[1i]'/>
</struct>
<opaque name='INT_FEATURE' type='^{INT_FEATURE_STRUCT=}'/>
<opaque name='LIST' type='^{list_rec=}'/>
<opaque name='SEAM' type='^{seam_record=}'/>
<opaque name='SPLIT' type='^{split_record=}'/>
<opaque name='TessMutableIterator' type='^{TessMutableIterator=}'/>
<opaque name='TessPageIterator' type='^{TessPageIterator=}'/>
<opaque name='TessResultIterator' type='^{TessResultIterator=}'/>
<opaque name='VECTOR' type='^{TPOINT=}'/>
<constant const='true' declared_type='l_int32' name='ADDED_BORDER' type='i'/>
<constant const='true' declared_type='int' name='ASSERT_FAILED' type='i'/>
<constant const='true' declared_type='int' name='BAD_PARAMETER' type='i'/>
<constant declared_type='int' name='BITS16' type='i'/>
<constant declared_type='int' name='BLOBNBOX' type='i'/>
<constant declared_type='int' name='BLOBNBOX_CLIST' type='i'/>
<constant declared_type='int' name='BLOBNBOX_IT' type='i'/>
<constant declared_type='int' name='BLOBNBOX_LIST' type='i'/>
<constant declared_type='int' name='BLOB_CHOICE' type='i'/>
<constant declared_type='int' name='BLOB_CHOICE_IT' type='i'/>
<constant declared_type='int' name='BLOB_CHOICE_LIST' type='i'/>
<constant declared_type='int' name='BLOB_CHOICE_LIST_CLIST' type='i'/>
<constant declared_type='int' name='BLOB_CHOICE_LIST_C_IT' type='i'/>
<constant declared_type='int' name='BLOCK' type='i'/>
<constant declared_type='int' name='BLOCK_IT' type='i'/>
<constant declared_type='int' name='BLOCK_LINE_IT' type='i'/>
<constant declared_type='int' name='BLOCK_LIST' type='i'/>
<constant declared_type='int' name='BLOCK_RECT_IT' type='i'/>
<constant declared_type='int' name='BLOCK_RES' type='i'/>
<constant declared_type='int' name='BLOCK_RES_CLIST' type='i'/>
<constant declared_type='int' name='BLOCK_RES_C_IT' type='i'/>
<constant declared_type='int' name='BLOCK_RES_IT' type='i'/>
<constant declared_type='int' name='BLOCK_RES_LIST' type='i'/>
<constant declared_type='int' name='BlamerBundle' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_FUNC_1' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_FUNC_2' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_FUN_3' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_GOTO_A' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_GOTO_B' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_GOTO_C' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_SHIFT' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_START_A' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_START_B' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_START_C' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_STOP' type='i'/>
<constant const='true' declared_type='l_int32' name='C128_SYMBOL_WIDTH' type='i'/>
<constant const='true' declared_type='l_int32' name='C25_START' type='i'/>
<constant const='true' declared_type='l_int32' name='C25_STOP' type='i'/>
<constant const='true' declared_type='l_int32' name='C39_START' type='i'/>
<constant const='true' declared_type='l_int32' name='C39_STOP' type='i'/>
<constant const='true' declared_type='l_int32' name='C93_START' type='i'/>
<constant const='true' declared_type='l_int32' name='C93_STOP' type='i'/>
<constant const='true' declared_type='int' name='CANTCONNECTPIPE' type='i'/>
<constant const='true' declared_type='int' name='CANTCREATEFILE' type='i'/>
<constant const='true' declared_type='int' name='CANTMAKEPIPE' type='i'/>
<constant const='true' declared_type='int' name='CANTOPENFILE' type='i'/>
<constant declared_type='int' name='CHAR_FRAGMENT' type='i'/>
<constant const='true' declared_type='l_int32' name='CI25_START' type='i'/>
<constant const='true' declared_type='l_int32' name='CI25_STOP' type='i'/>
<constant declared_type='int' name='CLIST' type='i'/>
<constant declared_type='void' name='CLIST_ITERATOR' type='v'/>
<constant declared_type='int' name='CLIST_LINK' type='i'/>
<constant declared_type='int' name='CRACKEDGE' type='i'/>
<constant declared_type='int' name='C_BLOB' type='i'/>
<constant declared_type='int' name='C_BLOB_IT' type='i'/>
<constant declared_type='int' name='C_BLOB_LIST' type='i'/>
<constant declared_type='int' name='C_OUTLINE' type='i'/>
<constant declared_type='int' name='C_OUTLINE_IT' type='i'/>
<constant declared_type='int' name='C_OUTLINE_LIST' type='i'/>
<constant declared_type='int' name='CharSamp' type='i'/>
<constant const='true' declared_type='char**' name='Codabar' type='[20*]'/>
<constant const='true' declared_type='char*' name='CodabarVal' type='[21c]'/>
<constant const='true' declared_type='char**' name='Code128' type='[107*]'/>
<constant const='true' declared_type='char**' name='Code2of5' type='[12*]'/>
<constant const='true' declared_type='char**' name='Code39' type='[44*]'/>
<constant const='true' declared_type='char*' name='Code39Val' type='[45c]'/>
<constant const='true' declared_type='char**' name='Code93' type='[48*]'/>
<constant const='true' declared_type='char*' name='Code93Val' type='[49c]'/>
<constant const='true' declared_type='char**' name='CodeI2of5' type='[12*]'/>
<constant declared_type='int' name='DENORM' type='i'/>
<constant const='true' declared_type='int' name='DONT_ASSIGN_LISTS' type='i'/>
<constant const='true' declared_type='int' name='DONT_CONSTRUCT_LIST_BY_COPY' type='i'/>
<constant declared_type='int' name='EDGEPT' type='i'/>
<constant declared_type='int' name='EDGEPT_CLIST' type='i'/>
<constant declared_type='int' name='EDGEPT_C_IT' type='i'/>
<constant declared_type='int' name='ELIST' type='i'/>
<constant declared_type='int' name='ELIST2' type='i'/>
<constant declared_type='void' name='ELIST2_ITERATOR' type='v'/>
<constant declared_type='int' name='ELIST2_LINK' type='i'/>
<constant declared_type='void' name='ELIST_ITERATOR' type='v'/>
<constant declared_type='int' name='ELIST_LINK' type='i'/>
<constant const='true' declared_type='int' name='EMPTY_LIST' type='i'/>
<constant declared_type='int' name='ERRCODE' type='i'/>
<constant declared_type='int' name='ETEXT_DESC' type='i'/>
<constant const='true' declared_type='int' name='EXECFAILED' type='i'/>
<constant declared_type='int' name='FCOORD' type='i'/>
<constant declared_type='int' name='ICOORD' type='i'/>
<constant declared_type='int' name='ICOORDELT' type='i'/>
<constant declared_type='int' name='ICOORDELT_IT' type='i'/>
<constant declared_type='int' name='ICOORDELT_LIST' type='i'/>
<constant const='true' declared_type='int' name='ILLEGAL_GRADIENT' type='i'/>
<constant declared_type='int' name='IMAGE' type='i'/>
<constant const='true' declared_type='char*' name='INVALID_UNICHAR' type='[20c]'/>
<constant const='true' declared_type='int' name='INVALID_UNICHAR_ID' type='i'/>
<constant const='true' declared_type='int' name='LOSTBLOCKLINE' type='i'/>
<constant const='true' declared_type='l_int32' name='L_ALPHA_SHIFT' type='i'/>
<constant const='true' declared_type='l_int32' name='L_BLUE_SHIFT' type='i'/>
<constant const='true' declared_type='l_float32' name='L_BLUE_WEIGHT' type='f'/>
<constant const='true' declared_type='l_int32' name='L_GREEN_SHIFT' type='i'/>
<constant const='true' declared_type='l_float32' name='L_GREEN_WEIGHT' type='f'/>
<constant const='true' declared_type='l_int32' name='L_NOCOPY' type='i'/>
<constant const='true' declared_type='l_int32' name='L_RED_SHIFT' type='i'/>
<constant const='true' declared_type='l_float32' name='L_RED_WEIGHT' type='f'/>
<constant declared_type='int' name='MATRIX' type='i'/>
<constant const='true' declared_type='int' name='MEMORY_OUT' type='i'/>
<constant const='true' declared_type='int' name='NO_LIST' type='i'/>
<constant const='true' declared_type='int' name='NULL_CURRENT' type='i'/>
<constant const='true' declared_type='int' name='NULL_DATA' type='i'/>
<constant const='true' declared_type='int' name='NULL_NEXT' type='i'/>
<constant const='true' declared_type='int' name='NULL_OBJECT' type='i'/>
<constant const='true' declared_type='int' name='NULL_PREV' type='i'/>
<constant const='true' declared_type='l_int32' name='NumSupportedBarcodeFormats' type='i'/>
<constant declared_type='int' name='OrientationDetector' type='i'/>
<constant declared_type='int' name='PAGE_RES' type='i'/>
<constant declared_type='int' name='PAGE_RES_IT' type='i'/>
<constant declared_type='int' name='PARA' type='i'/>
<constant declared_type='int' name='PARA_IT' type='i'/>
<constant declared_type='int' name='PARA_LIST' type='i'/>
<constant declared_type='int' name='PBLOB' type='i'/>
<constant declared_type='int' name='PBLOB_IT' type='i'/>
<constant declared_type='int' name='PBLOB_LIST' type='i'/>
<constant declared_type='int' name='PB_LINE_IT' type='i'/>
<constant declared_type='int' name='PDBLK' type='i'/>
<constant declared_type='int' name='PDBLK_CLIST' type='i'/>
<constant declared_type='int' name='PDBLK_C_IT' type='i'/>
<constant declared_type='int' name='PGEventHandler' type='i'/>
<constant declared_type='int' name='POLY_BLOCK' type='i'/>
<constant declared_type='int' name='ParagraphModel' type='i'/>
<constant declared_type='int' name='ParamContent' type='i'/>
<constant declared_type='int' name='ParamContent_IT' type='i'/>
<constant declared_type='int' name='ParamContent_LIST' type='i'/>
<constant declared_type='int' name='ParamsEditor' type='i'/>
<constant declared_type='int' name='QLSQ' type='i'/>
<constant declared_type='int' name='QRSequenceGenerator' type='i'/>
<constant declared_type='int' name='QSPLINE' type='i'/>
<constant declared_type='int' name='QUAD_COEFFS' type='i'/>
<constant const='true' declared_type='int' name='READFAILED' type='i'/>
<constant declared_type='int' name='REJ' type='i'/>
<constant declared_type='int' name='REJMAP' type='i'/>
<constant declared_type='int' name='ROW' type='i'/>
<constant declared_type='int' name='ROW_IT' type='i'/>
<constant declared_type='int' name='ROW_LIST' type='i'/>
<constant declared_type='int' name='ROW_RES' type='i'/>
<constant declared_type='int' name='ROW_RES_IT' type='i'/>
<constant declared_type='int' name='ROW_RES_LIST' type='i'/>
<constant const='true' declared_type='int' name='SELECTFAILED' type='i'/>
<constant const='true' declared_type='int' name='SERIALISE_LINKS' type='i'/>
<constant declared_type='int' name='STATS' type='i'/>
<constant const='true' declared_type='int' name='STILL_LINKED' type='i'/>
<constant declared_type='int' name='STRING' type='i'/>
<constant declared_type='int' name='SVMenuNode' type='i'/>
<constant declared_type='int' name='ScriptDetector' type='i'/>
<constant declared_type='int' name='ScrollView' type='i'/>
<constant const='true' declared_type='l_int32*' name='SupportedBarcodeFormat' type='[7i]'/>
<constant const='true' declared_type='char**' name='SupportedBarcodeFormatName' type='[7*]'/>
<constant declared_type='int' name='TBLOB' type='i'/>
<constant declared_type='int' name='TBOX' type='i'/>
<constant declared_type='int' name='TO_BLOCK' type='i'/>
<constant declared_type='int' name='TO_BLOCK_IT' type='i'/>
<constant declared_type='int' name='TO_BLOCK_LIST' type='i'/>
<constant declared_type='int' name='TO_ROW' type='i'/>
<constant declared_type='int' name='TO_ROW_IT' type='i'/>
<constant declared_type='int' name='TO_ROW_LIST' type='i'/>
<constant declared_type='int' name='TPOINT' type='i'/>
<constant declared_type='int' name='TessClosure' type='i'/>
<constant declared_type='int' name='UNICHAR' type='i'/>
<constant declared_type='int' name='UNICHARMAP' type='i'/>
<constant declared_type='int' name='UNICHARSET' type='i'/>
<constant const='true' declared_type='l_int32' name='UPCA_MID' type='i'/>
<constant const='true' declared_type='l_int32' name='UPCA_START' type='i'/>
<constant const='true' declared_type='l_int32' name='UPCA_STOP' type='i'/>
<constant const='true' declared_type='char**' name='Upca' type='[13*]'/>
<constant declared_type='int' name='WERD' type='i'/>
<constant declared_type='int' name='WERD_CHOICE' type='i'/>
<constant declared_type='int' name='WERD_CHOICE_IT' type='i'/>
<constant declared_type='int' name='WERD_CHOICE_LIST' type='i'/>
<constant declared_type='int' name='WERD_IT' type='i'/>
<constant declared_type='int' name='WERD_LIST' type='i'/>
<constant declared_type='int' name='WERD_RES' type='i'/>
<constant declared_type='int' name='WERD_RES_IT' type='i'/>
<constant declared_type='int' name='WERD_RES_LIST' type='i'/>
<constant const='true' declared_type='int' name='WRITEFAILED' type='i'/>
<constant const='true' declared_type='int' name='WRONG_WORD' type='i'/>
<constant declared_type='int*' name='current_block_list' type='^i'/>
<constant declared_type='struct ETEXT_DESC*' name='global_monitor' type='^{ETEXT_DESC=}'/>
<constant const='true' declared_type='char**' name='gplotfileoutputs' type='^*'/>
<constant const='true' declared_type='char**' name='gplotfilestyles' type='^*'/>
<constant const='true' declared_type='char**' name='gplotstylenames' type='^*'/>
<constant const='true' declared_type='char*' name='kAmbigsFileSuffix' type='[14c]'/>
<constant const='true' declared_type='char*' name='kBigramDawgFileSuffix' type='[12c]'/>
<constant const='true' declared_type='inT16' name='kBlamerBoxTolerance' type='s'/>
<constant const='true' declared_type='int' name='kBlnBaselineOffset' type='i'/>
<constant const='true' declared_type='int' name='kBlnCellHeight' type='i'/>
<constant const='true' declared_type='int' name='kBlnXHeight' type='i'/>
<constant const='true' declared_type='int' name='kBoxReadBufSize' type='i'/>
<constant const='true' declared_type='char*' name='kBuiltInCutoffsFileSuffix' type='[10c]'/>
<constant const='true' declared_type='char*' name='kBuiltInTemplatesFileSuffix' type='[8c]'/>
<constant const='true' declared_type='char*' name='kCubeSystemDawgFileSuffix' type='[15c]'/>
<constant const='true' declared_type='char*' name='kCubeUnicharsetFileSuffix' type='[16c]'/>
<constant const='true' declared_type='char*' name='kFixedLengthDawgsFileSuffix' type='[19c]'/>
<constant const='true' declared_type='char*' name='kFreqDawgFileSuffix' type='[10c]'/>
<constant const='true' declared_type='char*' name='kLangConfigFileSuffix' type='[7c]'/>
<constant const='true' declared_type='char*' name='kNormProtoFileSuffix' type='[10c]'/>
<constant const='true' declared_type='char*' name='kNumberDawgFileSuffix' type='[12c]'/>
<constant const='true' declared_type='char*' name='kParamsTrainingModelFileSuffix' type='[22c]'/>
<constant const='true' declared_type='char**' name='kPolyBlockNames' type='^*'/>
<constant const='true' declared_type='char*' name='kPuncDawgFileSuffix' type='[10c]'/>
<constant const='true' declared_type='char*' name='kShapeTableFileSuffix' type='[11c]'/>
<constant const='true' declared_type='char*' name='kSystemDawgFileSuffix' type='[10c]'/>
<constant const='true' declared_type='char*' name='kUnambigDawgFileSuffix' type='[13c]'/>
<constant const='true' declared_type='char*' name='kUnicharsetFileSuffix' type='[11c]'/>
<constant declared_type='int' name='operator' type='i'/>
<constant declared_type='int' name='tesseract' type='i'/>
<string_constant name='INT32FORMAT' value='%d'/>
<string_constant name='INT64FORMAT' value='%lld'/>
<string_constant name='JB_DATA_EXT' value='.data'/>
<string_constant name='JB_TEMPLATE_EXT' value='.templates.png'/>
<enum name='ABORT' value='2'/>
<enum name='AC_INITIAL_CAP' value='3'/>
<enum name='AC_LC_ABBREV' value='4'/>
<enum name='AC_LOWER_CASE' value='1'/>
<enum name='AC_UC_ABBREV' value='5'/>
<enum name='AC_UNACCEPTABLE' value='0'/>
<enum name='AC_UPPER_CASE' value='2'/>
<enum name='ASYMMETRIC_MORPH_BC' value='1'/>
<enum name='BMP_FHBYTES' value='14'/>
<enum name='BMP_ID' value='19778'/>
<enum name='BMP_IHBYTES' value='40'/>
<enum name='BND_ABOVE' value='3'/>
<enum name='BND_BELOW' value='1'/>
<enum name='BND_COUNT' value='4'/>
<enum name='BND_LEFT' value='0'/>
<enum name='BND_RIGHT' value='2'/>
<enum name='BOXAA_VERSION_NUMBER' value='3'/>
<enum name='BOXA_VERSION_NUMBER' value='2'/>
<enum name='BRT_COUNT' value='8'/>
<enum name='BRT_HLINE' value='1'/>
<enum name='BRT_NOISE' value='0'/>
<enum name='BRT_POLYIMAGE' value='4'/>
<enum name='BRT_RECTIMAGE' value='3'/>
<enum name='BRT_TEXT' value='7'/>
<enum name='BRT_UNKNOWN' value='5'/>
<enum name='BRT_VERT_TEXT' value='6'/>
<enum name='BRT_VLINE' value='2'/>
<enum name='BSTT_COUNT' value='6'/>
<enum name='BSTT_DIGIT' value='2'/>
<enum name='BSTT_ITALIC' value='1'/>
<enum name='BSTT_MATH' value='3'/>
<enum name='BSTT_NONE' value='0'/>
<enum name='BSTT_SKIP' value='5'/>
<enum name='BSTT_UNCLEAR' value='4'/>
<enum name='BTFT_CHAIN' value='3'/>
<enum name='BTFT_COUNT' value='7'/>
<enum name='BTFT_LEADER' value='6'/>
<enum name='BTFT_NEIGHBOURS' value='2'/>
<enum name='BTFT_NONE' value='0'/>
<enum name='BTFT_NONTEXT' value='1'/>
<enum name='BTFT_STRONG_CHAIN' value='4'/>
<enum name='BTFT_TEXT_ON_IMAGE' value='5'/>
<enum name='CCB_GLOBAL_COORDS' value='2'/>
<enum name='CCB_LOCAL_COORDS' value='1'/>
<enum name='CCB_SAVE_ALL_PTS' value='1'/>
<enum name='CCB_SAVE_TURNING_PTS' value='2'/>
<enum name='COLOR_BLUE' value='2'/>
<enum name='COLOR_GREEN' value='1'/>
<enum name='COLOR_RED' value='0'/>
<enum name='COMPOUND_PERM' value='12'/>
<enum name='CR_DELETE' value='3'/>
<enum name='CR_KEEP_SPACE' value='1'/>
<enum name='CR_LOOSE_SPACE' value='2'/>
<enum name='CR_NONE' value='0'/>
<enum name='DBG' value='-1'/>
<enum name='DEFAULT_CLIP_LOWER_1' value='10'/>
<enum name='DEFAULT_CLIP_LOWER_2' value='5'/>
<enum name='DEFAULT_CLIP_UPPER_1' value='10'/>
<enum name='DEFAULT_CLIP_UPPER_2' value='5'/>
<enum name='DEWARP_VERSION_NUMBER' value='2'/>
<enum name='DF_BLAMER' value='5'/>
<enum name='DF_BN_POLYGONAL' value='4'/>
<enum name='DF_BOX' value='0'/>
<enum name='DF_EDGE_STEP' value='3'/>
<enum name='DF_POLYGONAL' value='2'/>
<enum name='DF_TEXT' value='1'/>
<enum name='DIRBITS' value='7'/>
<enum name='DIRSCALE' value='1000'/>
<enum name='DIR_LEFT_TO_RIGHT' value='1'/>
<enum name='DIR_MIX' value='3'/>
<enum name='DIR_NEUTRAL' value='0'/>
<enum name='DIR_RIGHT_TO_LEFT' value='2'/>
<enum name='DNA_VERSION_NUMBER' value='1'/>
<enum name='DOC_DAWG_PERM' value='9'/>
<enum name='DPIX_VERSION_NUMBER' value='2'/>
<enum name='EDGEPTFLAGS' value='4'/>
<enum name='FALSE' value='0'/>
<enum name='FILE_ABORT' value='3'/>
<enum name='FPIX_VERSION_NUMBER' value='2'/>
<enum name='FREQ_DAWG_PERM' value='11'/>
<enum name='GPLOT_DOTS' value='4'/>
<enum name='GPLOT_EPS' value='3'/>
<enum name='GPLOT_IMPULSES' value='2'/>
<enum name='GPLOT_LATEX' value='5'/>
<enum name='GPLOT_LINEAR_SCALE' value='0'/>
<enum name='GPLOT_LINES' value='0'/>
<enum name='GPLOT_LINESPOINTS' value='3'/>
<enum name='GPLOT_LOG_SCALE_X' value='1'/>
<enum name='GPLOT_LOG_SCALE_X_Y' value='3'/>
<enum name='GPLOT_LOG_SCALE_Y' value='2'/>
<enum name='GPLOT_NONE' value='0'/>
<enum name='GPLOT_PNG' value='1'/>
<enum name='GPLOT_POINTS' value='1'/>
<enum name='GPLOT_PS' value='2'/>
<enum name='GPLOT_VERSION_NUMBER' value='1'/>
<enum name='GPLOT_X11' value='4'/>
<enum name='HAVE_FMEMOPEN' value='0'/>
<enum name='HAVE_LIBGIF' value='0'/>
<enum name='HAVE_LIBJPEG' value='1'/>
<enum name='HAVE_LIBPNG' value='1'/>
<enum name='HAVE_LIBTIFF' value='1'/>
<enum name='HAVE_LIBUNGIF' value='0'/>
<enum name='HAVE_LIBWEBP' value='0'/>
<enum name='HAVE_LIBZ' value='1'/>
<enum name='IFF_BMP' value='1'/>
<enum name='IFF_DEFAULT' value='17'/>
<enum name='IFF_GIF' value='13'/>
<enum name='IFF_JFIF_JPEG' value='2'/>
<enum name='IFF_JP2' value='14'/>
<enum name='IFF_LPDF' value='16'/>
<enum name='IFF_PNG' value='3'/>
<enum name='IFF_PNM' value='11'/>
<enum name='IFF_PS' value='12'/>
<enum name='IFF_SPIX' value='18'/>
<enum name='IFF_TIFF' value='4'/>
<enum name='IFF_TIFF_G3' value='7'/>
<enum name='IFF_TIFF_G4' value='8'/>
<enum name='IFF_TIFF_LZW' value='9'/>
<enum name='IFF_TIFF_PACKBITS' value='5'/>
<enum name='IFF_TIFF_RLE' value='6'/>
<enum name='IFF_TIFF_ZIP' value='10'/>
<enum name='IFF_UNKNOWN' value='0'/>
<enum name='IFF_WEBP' value='15'/>
<enum name='INTERSECTING' value='32767'/>
<enum name='IRR_ADAPTION' value='8'/>
<enum name='IRR_CHOPPER' value='2'/>
<enum name='IRR_CLASSIFIER' value='1'/>
<enum name='IRR_CLASS_LM_TRADEOFF' value='3'/>
<enum name='IRR_CLASS_OLD_LM_TRADEOFF' value='7'/>
<enum name='IRR_CORRECT' value='0'/>
<enum name='IRR_NO_TRUTH' value='10'/>
<enum name='IRR_NO_TRUTH_SPLIT' value='9'/>
<enum name='IRR_NUM_REASONS' value='12'/>
<enum name='IRR_PAGE_LAYOUT' value='4'/>
<enum name='IRR_SEGSEARCH_HEUR' value='5'/>
<enum name='IRR_SEGSEARCH_PP' value='6'/>
<enum name='IRR_UNKNOWN' value='11'/>
<enum name='JB_CHARACTERS' value='1'/>
<enum name='JB_CONN_COMPS' value='0'/>
<enum name='JB_CORRELATION' value='1'/>
<enum name='JB_RANKHAUS' value='0'/>
<enum name='JB_WORDS' value='2'/>
<enum name='KERNEL_VERSION_NUMBER' value='2'/>
<enum name='LEPTONICA_FT_RESOLUTION' value='96'/>
<enum name='LIBLEPT_MAJOR_VERSION' value='1'/>
<enum name='LIBLEPT_MINOR_VERSION' value='69'/>
<enum name='LIST_ABORT' value='1'/>
<enum name='LOC_ADAPTIVE' value='24'/>
<enum name='LOC_DOC_BLK_REJ' value='22'/>
<enum name='LOC_EDGE_PROG' value='4'/>
<enum name='LOC_FUZZY_SPACE' value='14'/>
<enum name='LOC_INIT' value='3'/>
<enum name='LOC_MM_ADAPT' value='21'/>
<enum name='LOC_PASS1' value='7'/>
<enum name='LOC_PASS2' value='8'/>
<enum name='LOC_TEXT_ORD_ROWS' value='5'/>
<enum name='LOC_TEXT_ORD_WORDS' value='6'/>
<enum name='LOC_UNUSED0' value='0'/>
<enum name='LOC_UNUSED1' value='1'/>
<enum name='LOC_UNUSED2' value='2'/>
<enum name='LOC_WRITE_RESULTS' value='23'/>
<enum name='LOWER_CASE_PERM' value='3'/>
<enum name='L_ADD_ABOVE' value='1'/>
<enum name='L_ADD_AT_BOTTOM' value='3'/>
<enum name='L_ADD_AT_TOP' value='2'/>
<enum name='L_ADD_BELOW' value='4'/>
<enum name='L_ADJUST_BOT' value='4'/>
<enum name='L_ADJUST_LEFT' value='0'/>
<enum name='L_ADJUST_LEFT_AND_RIGHT' value='2'/>
<enum name='L_ADJUST_RIGHT' value='1'/>
<enum name='L_ADJUST_TOP' value='3'/>
<enum name='L_ADJUST_TOP_AND_BOT' value='5'/>
<enum name='L_ALL_EDGES' value='2'/>
<enum name='L_ALPHA_CHANNEL' value='3'/>
<enum name='L_ARITH_ADD' value='1'/>
<enum name='L_ARITH_DIVIDE' value='4'/>
<enum name='L_ARITH_MULTIPLY' value='3'/>
<enum name='L_ARITH_SUBTRACT' value='2'/>
<enum name='L_AUTO_DOWNSHIFT' value='0'/>
<enum name='L_BF_ANY' value='1'/>
<enum name='L_BF_CODABAR' value='9'/>
<enum name='L_BF_CODE128' value='2'/>
<enum name='L_BF_CODE2OF5' value='5'/>
<enum name='L_BF_CODE39' value='7'/>
<enum name='L_BF_CODE93' value='8'/>
<enum name='L_BF_CODEI2OF5' value='6'/>
<enum name='L_BF_EAN13' value='4'/>
<enum name='L_BF_EAN8' value='3'/>
<enum name='L_BF_UNKNOWN' value='0'/>
<enum name='L_BF_UPCA' value='10'/>
<enum name='L_BLEND_GRAY' value='4'/>
<enum name='L_BLEND_GRAY_WITH_INVERSE' value='5'/>
<enum name='L_BLEND_TO_BLACK' value='3'/>
<enum name='L_BLEND_TO_WHITE' value='2'/>
<enum name='L_BLEND_WITH_INVERSE' value='1'/>
<enum name='L_BOTH_DIRECTIONS' value='3'/>
<enum name='L_BOUNDARY_BG' value='1'/>
<enum name='L_BOUNDARY_FG' value='2'/>
<enum name='L_BRING_IN_BLACK' value='2'/>
<enum name='L_BRING_IN_WHITE' value='1'/>
<enum name='L_CHOOSE_CONSECUTIVE' value='1'/>
<enum name='L_CHOOSE_MAX' value='2'/>
<enum name='L_CHOOSE_MAX_MIN_DIFF' value='3'/>
<enum name='L_CHOOSE_MIN' value='1'/>
<enum name='L_CHOOSE_SKIP_BY' value='2'/>
<enum name='L_CLEAR_PIXELS' value='2'/>
<enum name='L_CLIP_TO_ZERO' value='1'/>
<enum name='L_CLONE' value='2'/>
<enum name='L_COMPACTION' value='2'/>
<enum name='L_COMPARE_ABS_DIFF' value='3'/>
<enum name='L_COMPARE_SUBTRACT' value='2'/>
<enum name='L_COMPARE_XOR' value='1'/>
<enum name='L_CONTINUED_BORDER' value='1'/>
<enum name='L_COPY' value='1'/>
<enum name='L_COPY_CLONE' value='3'/>
<enum name='L_DISPLAY_WITH_IV' value='4'/>
<enum name='L_DISPLAY_WITH_XLI' value='2'/>
<enum name='L_DISPLAY_WITH_XV' value='1'/>
<enum name='L_DISPLAY_WITH_XZGV' value='3'/>
<enum name='L_EQUAL_TO_ZERO' value='2'/>
<enum name='L_EUCLIDEAN_DISTANCE' value='2'/>
<enum name='L_EXCLUDE_REGION' value='2'/>
<enum name='L_EXCLUSIVE_OR' value='8'/>
<enum name='L_FILL_BLACK' value='2'/>
<enum name='L_FILL_WHITE' value='1'/>
<enum name='L_FIRST_IMAGE' value='1'/>
<enum name='L_FLATE_ENCODE' value='3'/>
<enum name='L_FLIP_PIXELS' value='3'/>
<enum name='L_FOUND' value='1'/>
<enum name='L_FROM_BOTTOM' value='3'/>
<enum name='L_FROM_LEFT' value='0'/>
<enum name='L_FROM_RIGHT' value='1'/>
<enum name='L_FROM_TOP' value='2'/>
<enum name='L_FULL_DOWNSHIFT' value='2'/>
<enum name='L_G4_ENCODE' value='2'/>
<enum name='L_GREATER_THAN_ZERO' value='3'/>
<enum name='L_HANDLE_ONLY' value='0'/>
<enum name='L_HINT_GRAY' value='1'/>
<enum name='L_HORIZ' value='1'/>
<enum name='L_HORIZONTAL_EDGES' value='0'/>
<enum name='L_HORIZONTAL_LINE' value='0'/>
<enum name='L_HORIZONTAL_RUNS' value='0'/>
<enum name='L_HS_HISTO' value='1'/>
<enum name='L_HV_HISTO' value='2'/>
<enum name='L_INCLUDE_REGION' value='1'/>
<enum name='L_INSERT' value='0'/>
<enum name='L_INTERPOLATED' value='1'/>
<enum name='L_INTERSECTION' value='6'/>
<enum name='L_JPEG_ENCODE' value='1'/>
<enum name='L_LAST_IMAGE' value='3'/>
<enum name='L_LESS_THAN_ZERO' value='1'/>
<enum name='L_LINEAR_INTERP' value='1'/>
<enum name='L_LINEAR_SCALE' value='1'/>
<enum name='L_LINEAR_WARP' value='1'/>
<enum name='L_LOG_SCALE' value='2'/>
<enum name='L_MANHATTAN_DISTANCE' value='1'/>
<enum name='L_MAX_DIFF' value='3'/>
<enum name='L_MAX_DIFF_FROM_AVERAGE_2' value='1'/>
<enum name='L_MAX_MIN_DIFF_FROM_2' value='2'/>
<enum name='L_MEAN_ABSVAL' value='1'/>
<enum name='L_MEDIAN_VAL' value='2'/>
<enum name='L_MIN_DOWNSHIFT' value='1'/>
<enum name='L_MIRRORED_BORDER' value='3'/>
<enum name='L_MODE_COUNT' value='4'/>
<enum name='L_MODE_VAL' value='3'/>
<enum name='L_MORPH_CLOSE' value='4'/>
<enum name='L_MORPH_DILATE' value='1'/>
<enum name='L_MORPH_ERODE' value='2'/>
<enum name='L_MORPH_HMT' value='5'/>
<enum name='L_MORPH_OPEN' value='3'/>
<enum name='L_NEG_SLOPE_LINE' value='3'/>
<enum name='L_NEXT_IMAGE' value='2'/>
<enum name='L_NOT_FOUND' value='0'/>
<enum name='L_NO_COMPACTION' value='1'/>
<enum name='L_OBLIQUE_LINE' value='4'/>
<enum name='L_PAINT_DARK' value='2'/>
<enum name='L_PAINT_LIGHT' value='1'/>
<enum name='L_POS_SLOPE_LINE' value='1'/>
<enum name='L_QUADRATIC_INTERP' value='2'/>
<enum name='L_QUADRATIC_WARP' value='2'/>
<enum name='L_REG_COMPARE' value='1'/>
<enum name='L_REG_DISPLAY' value='2'/>
<enum name='L_REG_GENERATE' value='0'/>
<enum name='L_REMOVE' value='1'/>
<enum name='L_ROOT_MEAN_SQUARE' value='5'/>
<enum name='L_ROTATE_AREA_MAP' value='1'/>
<enum name='L_ROTATE_SAMPLING' value='3'/>
<enum name='L_ROTATE_SHEAR' value='2'/>
<enum name='L_RO_SC_TR' value='5'/>
<enum name='L_RO_TR_SC' value='3'/>
<enum name='L_RUN_OFF' value='0'/>
<enum name='L_RUN_ON' value='1'/>
<enum name='L_SAMPLED' value='2'/>
<enum name='L_SC_RO_TR' value='2'/>
<enum name='L_SC_TR_RO' value='6'/>
<enum name='L_SELECT_BLUE' value='3'/>
<enum name='L_SELECT_GREEN' value='2'/>
<enum name='L_SELECT_HEIGHT' value='2'/>
<enum name='L_SELECT_IF_BOTH' value='4'/>
<enum name='L_SELECT_IF_EITHER' value='3'/>
<enum name='L_SELECT_IF_GT' value='2'/>
<enum name='L_SELECT_IF_GTE' value='4'/>
<enum name='L_SELECT_IF_LT' value='1'/>
<enum name='L_SELECT_IF_LTE' value='3'/>
<enum name='L_SELECT_MAX' value='5'/>
<enum name='L_SELECT_MIN' value='4'/>
<enum name='L_SELECT_RED' value='1'/>
<enum name='L_SELECT_WIDTH' value='1'/>
<enum name='L_SET_BLACK' value='2'/>
<enum name='L_SET_PIXELS' value='1'/>
<enum name='L_SET_WHITE' value='1'/>
<enum name='L_SHEAR_ABOUT_CENTER' value='2'/>
<enum name='L_SHEAR_ABOUT_CORNER' value='1'/>
<enum name='L_SLOPE_BORDER' value='2'/>
<enum name='L_SOBEL_EDGE' value='1'/>
<enum name='L_SORT_BY_AREA' value='10'/>
<enum name='L_SORT_BY_ASPECT_RATIO' value='11'/>
<enum name='L_SORT_BY_HEIGHT' value='6'/>
<enum name='L_SORT_BY_MAX_DIMENSION' value='8'/>
<enum name='L_SORT_BY_MIN_DIMENSION' value='7'/>
<enum name='L_SORT_BY_PERIMETER' value='9'/>
<enum name='L_SORT_BY_WIDTH' value='5'/>
<enum name='L_SORT_BY_X' value='3'/>
<enum name='L_SORT_BY_Y' value='4'/>
<enum name='L_SORT_DECREASING' value='2'/>
<enum name='L_SORT_INCREASING' value='1'/>
<enum name='L_STANDARD_DEVIATION' value='6'/>
<enum name='L_SUBPIXEL_ORDER_BGR' value='2'/>
<enum name='L_SUBPIXEL_ORDER_RGB' value='1'/>
<enum name='L_SUBPIXEL_ORDER_VBGR' value='4'/>
<enum name='L_SUBPIXEL_ORDER_VRGB' value='3'/>
<enum name='L_SUBTRACTION' value='7'/>
<enum name='L_SUDOKU_INIT' value='0'/>
<enum name='L_SUDOKU_STATE' value='1'/>
<enum name='L_SV_HISTO' value='3'/>
<enum name='L_TAKE_ABSVAL' value='2'/>
<enum name='L_TEXT_ORIENT_DOWN' value='3'/>
<enum name='L_TEXT_ORIENT_LEFT' value='2'/>
<enum name='L_TEXT_ORIENT_RIGHT' value='4'/>
<enum name='L_TEXT_ORIENT_UNKNOWN' value='0'/>
<enum name='L_TEXT_ORIENT_UP' value='1'/>
<enum name='L_THIN_BG' value='2'/>
<enum name='L_THIN_FG' value='1'/>
<enum name='L_TOPHAT_BLACK' value='1'/>
<enum name='L_TOPHAT_WHITE' value='0'/>
<enum name='L_TR_RO_SC' value='4'/>
<enum name='L_TR_SC_RO' value='1'/>
<enum name='L_TWO_SIDED_EDGE' value='2'/>
<enum name='L_UNION' value='5'/>
<enum name='L_USE_WIDTHS' value='1'/>
<enum name='L_USE_WINDOWS' value='2'/>
<enum name='L_VARIANCE' value='7'/>
<enum name='L_VERT' value='2'/>
<enum name='L_VERTICAL_EDGES' value='1'/>
<enum name='L_VERTICAL_LINE' value='2'/>
<enum name='L_VERTICAL_RUNS' value='1'/>
<enum name='L_WARP_TO_LEFT' value='1'/>
<enum name='L_WARP_TO_RIGHT' value='2'/>
<enum name='MAP_ACCEPT' value='49'/>
<enum name='MAP_REJECT_PERM' value='48'/>
<enum name='MAP_REJECT_POTENTIAL' value='51'/>
<enum name='MAP_REJECT_TEMP' value='50'/>
<enum name='MAXLENGTH' value='128'/>
<enum name='MAX_AMBIG_SIZE' value='10'/>
<enum name='MAX_FLOAT32' value='3.4028235E+38'/>
<enum name='MAX_FONT_NAME' value='34'/>
<enum name='MAX_INT16' value='32767'/>
<enum name='MAX_INT32' value='2147483647'/>
<enum name='MAX_INT8' value='127'/>
<enum name='MAX_NUM_INT_FEATURES' value='512'/>
<enum name='MAX_OCR_NAME' value='32'/>
<enum name='MAX_OCR_VERSION' value='17'/>
<enum name='MAX_PATH' value='1024'/>
<enum name='MAX_UINT16' value='65535'/>
<enum name='MAX_UINT32' value='4294967295'/>
<enum name='MAX_UINT8' value='255'/>
<enum name='MEMORY_ABORT' value='2'/>
<enum name='MIN_FLOAT32' value='1.1754944E-38'/>
<enum name='MIN_INT16' value='32768'/>
<enum name='MIN_INT32' value='2147483648'/>
<enum name='MIN_INT8' value='128'/>
<enum name='MIN_UINT16' value='0'/>
<enum name='MIN_UINT32' value='0'/>
<enum name='MIN_UINT8' value='0'/>
<enum name='MODULUS' value='128'/>
<enum name='NGRAM_PERM' value='5'/>
<enum name='NO_ABORT_CODE' value='0'/>
<enum name='NO_PERM' value='0'/>
<enum name='NUMA_VERSION_NUMBER' value='1'/>
<enum name='NUMBER_PERM' value='6'/>
<enum name='NUM_BACKGROUNDS' value='8'/>
<enum name='NUM_BLOCK_ATTR' value='7'/>
<enum name='NUM_GPLOT_OUTPUTS' value='6'/>
<enum name='NUM_GPLOT_STYLES' value='5'/>
<enum name='NUM_TEXT_ATTR' value='10'/>
<enum name='OEM_CUBE_ONLY' value='1'/>
<enum name='OEM_DEFAULT' value='3'/>
<enum name='OEM_TESSERACT_CUBE_COMBINED' value='2'/>
<enum name='OEM_TESSERACT_ONLY' value='0'/>
<enum name='ORIENTATION_PAGE_DOWN' value='2'/>
<enum name='ORIENTATION_PAGE_LEFT' value='3'/>
<enum name='ORIENTATION_PAGE_RIGHT' value='1'/>
<enum name='ORIENTATION_PAGE_UP' value='0'/>
<enum name='PITCH_CORR_FIXED' value='5'/>
<enum name='PITCH_CORR_PROP' value='6'/>
<enum name='PITCH_DEF' value='0'/>
<enum name='PITCH_DEF_FIXED' value='1'/>
<enum name='PITCH_DEF_PROP' value='3'/>
<enum name='PITCH_DUNNO' value='0'/>
<enum name='PITCH_FIXED' value='1'/>
<enum name='PITCH_MAYBE_FIXED' value='2'/>
<enum name='PITCH_MAYBE_PROP' value='4'/>
<enum name='PITCH_VAR' value='2'/>
<enum name='PIXAA_VERSION_NUMBER' value='2'/>
<enum name='PIXACOMP_VERSION_NUMBER' value='2'/>
<enum name='PIXA_VERSION_NUMBER' value='2'/>
<enum name='PIX_CLR' value='0'/>
<enum name='PIX_DST' value='20'/>
<enum name='PIX_MASK' value='16'/>
<enum name='PIX_PAINT' value='28'/>
<enum name='PIX_SET' value='30'/>
<enum name='PIX_SRC' value='24'/>
<enum name='PIX_SUBTRACT' value='4'/>
<enum name='PIX_XOR' value='12'/>
<enum name='PSM_AUTO' value='3'/>
<enum name='PSM_AUTO_ONLY' value='2'/>
<enum name='PSM_AUTO_OSD' value='1'/>
<enum name='PSM_CIRCLE_WORD' value='9'/>
<enum name='PSM_COUNT' value='11'/>
<enum name='PSM_OSD_ONLY' value='0'/>
<enum name='PSM_SINGLE_BLOCK' value='6'/>
<enum name='PSM_SINGLE_BLOCK_VERT_TEXT' value='5'/>
<enum name='PSM_SINGLE_CHAR' value='10'/>
<enum name='PSM_SINGLE_COLUMN' value='4'/>
<enum name='PSM_SINGLE_LINE' value='7'/>
<enum name='PSM_SINGLE_WORD' value='8'/>
<enum name='PTA_VERSION_NUMBER' value='1'/>
<enum name='PT_CAPTION_TEXT' value='8'/>
<enum name='PT_COUNT' value='15'/>
<enum name='PT_EQUATION' value='4'/>
<enum name='PT_FLOWING_IMAGE' value='9'/>
<enum name='PT_FLOWING_TEXT' value='1'/>
<enum name='PT_HEADING_IMAGE' value='10'/>
<enum name='PT_HEADING_TEXT' value='2'/>
<enum name='PT_HORZ_LINE' value='12'/>
<enum name='PT_INLINE_EQUATION' value='5'/>
<enum name='PT_NOISE' value='14'/>
<enum name='PT_PULLOUT_IMAGE' value='11'/>
<enum name='PT_PULLOUT_TEXT' value='3'/>
<enum name='PT_TABLE' value='6'/>
<enum name='PT_UNKNOWN' value='0'/>
<enum name='PT_VERTICAL_TEXT' value='7'/>
<enum name='PT_VERT_LINE' value='13'/>
<enum name='PUNC_PERM' value='1'/>
<enum name='REMOVE_CMAP_BASED_ON_SRC' value='3'/>
<enum name='REMOVE_CMAP_TO_BINARY' value='0'/>
<enum name='REMOVE_CMAP_TO_FULL_COLOR' value='2'/>
<enum name='REMOVE_CMAP_TO_GRAYSCALE' value='1'/>
<enum name='RIL_BLOCK' value='0'/>
<enum name='RIL_PARA' value='1'/>
<enum name='RIL_SYMBOL' value='4'/>
<enum name='RIL_TEXTLINE' value='2'/>
<enum name='RIL_WORD' value='3'/>
<enum name='R_1IL_CONFLICT' value='3'/>
<enum name='R_BAD_PERMUTER' value='11'/>
<enum name='R_BAD_QUALITY' value='17'/>
<enum name='R_BAD_REPETITION' value='7'/>
<enum name='R_BLOCK_REJ' value='19'/>
<enum name='R_CONTAINS_BLANKS' value='10'/>
<enum name='R_DOC_REJ' value='18'/>
<enum name='R_DUBIOUS' value='13'/>
<enum name='R_EDGE_CHAR' value='2'/>
<enum name='R_HYPHEN' value='12'/>
<enum name='R_HYPHEN_ACCEPT' value='23'/>
<enum name='R_MINIMAL_REJ_ACCEPT' value='26'/>
<enum name='R_MM_ACCEPT' value='24'/>
<enum name='R_MM_REJECT' value='6'/>
<enum name='R_MOSTLY_REJ' value='15'/>
<enum name='R_NN_ACCEPT' value='22'/>
<enum name='R_NOT_TESS_ACCEPTED' value='9'/>
<enum name='R_NO_ALPHANUMS' value='14'/>
<enum name='R_POOR_MATCH' value='8'/>
<enum name='R_POSTNN_1IL' value='4'/>
<enum name='R_QUALITY_ACCEPT' value='25'/>
<enum name='R_REJ_CBLOB' value='5'/>
<enum name='R_ROW_REJ' value='20'/>
<enum name='R_SMALL_XHT' value='1'/>
<enum name='R_TESS_FAILURE' value='0'/>
<enum name='R_UNLV_REJ' value='21'/>
<enum name='R_XHT_FIXUP' value='16'/>
<enum name='SARRAY_VERSION_NUMBER' value='1'/>
<enum name='SEL_DONT_CARE' value='0'/>
<enum name='SEL_HIT' value='1'/>
<enum name='SEL_MISS' value='2'/>
<enum name='SEL_VERSION_NUMBER' value='1'/>
<enum name='SPLIT_ON_BLANK_LINE' value='2'/>
<enum name='SPLIT_ON_BOTH' value='3'/>
<enum name='SPLIT_ON_LEADING_WHITE' value='1'/>
<enum name='STEP_MASK' value='3'/>
<enum name='STRING_IS_PROTECTED' value='0'/>
<enum name='SUBLOC_FIX_XHT' value='3'/>
<enum name='SUBLOC_NORM' value='0'/>
<enum name='SUBSUBLOC_NN' value='2'/>
<enum name='SUBSUBLOC_OTHER' value='0'/>
<enum name='SUBSUBLOC_TESS' value='1'/>
<enum name='SYMMETRIC_MORPH_BC' value='0'/>
<enum name='SYSTEM_DAWG_PERM' value='8'/>
<enum name='TESSEXIT' value='1'/>
<enum name='TESSLOG' value='0'/>
<enum name='TEXTLINE_ORDER_LEFT_TO_RIGHT' value='0'/>
<enum name='TEXTLINE_ORDER_RIGHT_TO_LEFT' value='1'/>
<enum name='TEXTLINE_ORDER_TOP_TO_BOTTOM' value='2'/>
<enum name='TIFF_BIGEND_ID' value='19789'/>
<enum name='TIFF_LITTLEEND_ID' value='18761'/>
<enum name='TOP_CHOICE_PERM' value='2'/>
<enum name='TRUE' value='1'/>
<enum name='TT_CONFIRMED' value='4'/>
<enum name='TT_DELETED' value='1'/>
<enum name='TT_MAYBE_ALIGNED' value='3'/>
<enum name='TT_MAYBE_RAGGED' value='2'/>
<enum name='TT_NONE' value='0'/>
<enum name='TT_VLINE' value='5'/>
<enum name='UNDEF' value='-1'/>
<enum name='UNICHAR_LEN' value='30'/>
<enum name='UPPER_CASE_PERM' value='4'/>
<enum name='USER_DAWG_PERM' value='10'/>
<enum name='USER_PATTERN_PERM' value='7'/>
<enum name='USE_BMPIO' value='1'/>
<enum name='USE_INLINE_ACCESSORS' value='1'/>
<enum name='USE_PDFIO' value='1'/>
<enum name='USE_PNMIO' value='1'/>
<enum name='USE_PSIO' value='1'/>
<enum name='VT_BOOLEAN' value='1'/>
<enum name='VT_DOUBLE' value='3'/>
<enum name='VT_INTEGER' value='0'/>
<enum name='VT_STRING' value='2'/>
<enum name='WRITING_DIRECTION_LEFT_TO_RIGHT' value='0'/>
<enum name='WRITING_DIRECTION_RIGHT_TO_LEFT' value='1'/>
<enum name='WRITING_DIRECTION_TOP_TO_BOTTOM' value='2'/>
<enum name='W_BOL' value='3'/>
<enum name='W_BOLD' value='2'/>
<enum name='W_DONT_CHOP' value='8'/>
<enum name='W_EOL' value='4'/>
<enum name='W_FUZZY_NON' value='11'/>
<enum name='W_FUZZY_SP' value='10'/>
<enum name='W_INVERSE' value='12'/>
<enum name='W_ITALIC' value='1'/>
<enum name='W_NORMALIZED' value='5'/>
<enum name='W_REP_CHAR' value='9'/>
<enum name='W_SCRIPT_HAS_XHEIGHT' value='6'/>
<enum name='W_SCRIPT_IS_LATIN' value='7'/>
<enum name='W_SEGMENTED' value='0'/>
<function name='ApproximateOutline'>
<arg declared_type='int*' name='c_outline' type='^i'/>
<retval declared_type='struct TESSLINE*' type='^{TESSLINE=???????????????{TPOINT=??}{TPOINT=??}B}'/>
</function>
<function name='BLOBNBOX_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='BLOB_CHOICE_LIST_c1_copier'>
<arg declared_type='void*' name='old_element' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='BLOB_CHOICE_LIST_c1_zapper'>
<arg declared_type='void*' name='link' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='BLOB_CHOICE_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='BLOCK_RES_c1_copier'>
<arg declared_type='void*' name='old_element' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='BLOCK_RES_c1_zapper'>
<arg declared_type='void*' name='link' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='BLOCK_RES_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='BLOCK_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='C_BLOB_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='C_OUTLINE_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='DirOtherWay'>
<arg declared_type='enum BlobNeighbourDir' name='dir' type='i'/>
<retval declared_type='enum BlobNeighbourDir' type='i'/>
</function>
<function inline='true' name='DominatesInMerge'>
<arg declared_type='enum BlobTextFlowType' name='type1' type='i'/>
<arg declared_type='enum BlobTextFlowType' name='type2' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='EDGEPT_c1_copier'>
<arg declared_type='void*' name='old_element' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='EDGEPT_c1_zapper'>
<arg declared_type='void*' name='link' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='EqualIgnoringCaseAndTerminalPunct'>
<arg const='true' declared_type='int' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ExtractBlobsFromSegmentation'>
<arg declared_type='int*' name='blocks' type='^i'/>
<arg declared_type='int*' name='output_blob_list' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='FullPageBlock'>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int*' name='blocks' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICOORDELT_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='MakeBoxFileStr'>
<arg const='true' declared_type='char*' name='unichar_str' type='*'/>
<arg const='true' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='OpenBoxFile'>
<arg const='true' declared_type='int' type='i'/>
<retval declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='OrientationIdToValue'>
<arg const='true' declared_type='int' type='i'/>
<retval const='true' declared_type='int' type='i'/>
</function>
<function name='PARA_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='PDBLK_c1_copier'>
<arg declared_type='void*' name='old_element' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='PDBLK_c1_zapper'>
<arg declared_type='void*' name='link' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='PTIsImageType'>
<arg declared_type='enum PolyBlockType' name='type' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function inline='true' name='PTIsLineType'>
<arg declared_type='enum PolyBlockType' name='type' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function inline='true' name='PTIsTextType'>
<arg declared_type='enum PolyBlockType' name='type' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ParamContent_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ParseBoxFileStr'>
<arg const='true' declared_type='char*' name='boxfile_str' type='*'/>
<arg declared_type='int*' name='page_number' type='^i'/>
<arg declared_type='int*' name='utf8_str' type='^i'/>
<arg declared_type='int*' name='bounding_box' type='^i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='PrintSegmentationStats'>
<arg declared_type='int*' name='block_list' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ROW_RES_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ROW_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ReadNextBox'>
<arg declared_type='int' name='target_page' type='i'/>
<arg declared_type='int*' name='line_number' type='^i'/>
<arg declared_type='FILE*' name='box_file' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='int*' name='utf8_str' type='^i'/>
<arg declared_type='int*' name='bounding_box' type='^i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='RefreshWordBlobsFromNewBlobs'>
<arg declared_type='int*' name='block_list' type='^i'/>
<arg declared_type='int*' name='new_blobs' type='^i'/>
<arg declared_type='int*' name='not_found_blobs' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TO_BLOCK_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TO_ROW_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIAdaptToWordStr'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='TessPageSegMode' name='mode' type='i'/>
<arg const='true' declared_type='char*' name='wordstr' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIAllWordConfidences'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TessBaseAPIAnalyseLayout'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='TessPageIterator*' type='^{TessPageIterator=}'/>
</function>
<function name='TessBaseAPIClear'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIClearAdaptiveClassifier'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPICreate'>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TessBaseAPIDelete'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIDumpPGM'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIEnd'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIGetAvailableLanguagesAsVector'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<retval declared_type='char**' type='^*'/>
</function>
<function name='TessBaseAPIGetBoolVariable'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int*' name='value' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIGetBoxText'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='int' name='page_number' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIGetComponentImages'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<arg declared_type='int' name='text_only' type='i'/>
<arg declared_type='PIXA**' name='pixa' type='^^{Pixa}'/>
<arg declared_type='int**' name='blockids' type='^^i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='TessBaseAPIGetConnectedComponents'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='PIXA**' name='cc' type='^^{Pixa}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='TessBaseAPIGetDoubleVariable'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='double*' name='value' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIGetHOCRText'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='int' name='page_number' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIGetInitLanguagesAsString'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIGetIntVariable'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int*' name='value' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIGetIterator'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='TessResultIterator*' type='^{TessResultIterator=}'/>
</function>
<function name='TessBaseAPIGetLoadedLanguagesAsVector'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<retval declared_type='char**' type='^*'/>
</function>
<function name='TessBaseAPIGetMutableIterator'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='TessMutableIterator*' type='^{TessMutableIterator=}'/>
</function>
<function name='TessBaseAPIGetPageSegMode'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<retval declared_type='TessPageSegMode' type='i'/>
</function>
<function name='TessBaseAPIGetRegions'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='PIXA**' name='pixa' type='^^{Pixa}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='TessBaseAPIGetStringVariable'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIGetStrips'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='PIXA**' name='pixa' type='^^{Pixa}'/>
<arg declared_type='int**' name='blockids' type='^^i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='TessBaseAPIGetTextDirection'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='int*' name='out_offset' type='^i'/>
<arg declared_type='float*' name='out_slope' type='^f'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIGetTextlines'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='PIXA**' name='pixa' type='^^{Pixa}'/>
<arg declared_type='int**' name='blockids' type='^^i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='TessBaseAPIGetThresholdedImage'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='TessBaseAPIGetThresholdedImageScaleFactor'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIGetUNLVText'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIGetUTF8Text'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIGetUnichar'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='int' name='unichar_id' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIGetWords'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='PIXA**' name='pixa' type='^^{Pixa}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='TessBaseAPIInit1'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='datapath' type='*'/>
<arg const='true' declared_type='char*' name='language' type='*'/>
<arg declared_type='TessOcrEngineMode' name='oem' type='i'/>
<arg declared_type='char**' name='configs' type='^*'/>
<arg declared_type='int' name='configs_size' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIInit2'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='datapath' type='*'/>
<arg const='true' declared_type='char*' name='language' type='*'/>
<arg declared_type='TessOcrEngineMode' name='oem' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIInit3'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='datapath' type='*'/>
<arg const='true' declared_type='char*' name='language' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIInitForAnalysePage'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIInitLangMod'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='datapath' type='*'/>
<arg const='true' declared_type='char*' name='language' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIIsValidWord'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='word' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIMeanTextConf'>
<arg declared_type='int*' name='handle' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIPrintVariables'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIPrintVariablesToFile'>
<arg const='true' declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIProcessPage'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='int' name='page_index' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg const='true' declared_type='char*' name='retry_config' type='*'/>
<arg declared_type='int' name='timeout_millisec' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIProcessPages'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg const='true' declared_type='char*' name='retry_config' type='*'/>
<arg declared_type='int' name='timeout_millisec' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPIReadConfigFile'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIReadDebugConfigFile'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPIRecognize'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='struct ETEXT_DESC*' name='monitor' type='^{ETEXT_DESC=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIRecognizeForChopTest'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='struct ETEXT_DESC*' name='monitor' type='^{ETEXT_DESC=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPIRect'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='unsigned char*' name='imagedata' type='*'/>
<arg declared_type='int' name='bytes_per_pixel' type='i'/>
<arg declared_type='int' name='bytes_per_line' type='i'/>
<arg declared_type='int' name='left' type='i'/>
<arg declared_type='int' name='top' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessBaseAPISetDebugVariable'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessBaseAPISetImage'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='unsigned char*' name='imagedata' type='*'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='bytes_per_pixel' type='i'/>
<arg declared_type='int' name='bytes_per_line' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetImage2'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetInputName'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetMinOrientationMargin'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='double' name='margin' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetOutputName'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetPageSegMode'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='TessPageSegMode' name='mode' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetRectangle'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='int' name='left' type='i'/>
<arg declared_type='int' name='top' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetSourceResolution'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg declared_type='int' name='ppi' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessBaseAPISetVariable'>
<arg declared_type='int*' name='handle' type='^i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessDeleteIntArray'>
<arg declared_type='int*' name='arr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessDeleteText'>
<arg declared_type='char*' name='text' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessDeleteTextArray'>
<arg declared_type='char**' name='arr' type='^*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessPageIteratorBaseline'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<arg declared_type='int*' name='x1' type='^i'/>
<arg declared_type='int*' name='y1' type='^i'/>
<arg declared_type='int*' name='x2' type='^i'/>
<arg declared_type='int*' name='y2' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessPageIteratorBegin'>
<arg declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessPageIteratorBlockType'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<retval declared_type='TessPolyBlockType' type='i'/>
</function>
<function name='TessPageIteratorBoundingBox'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<arg declared_type='int*' name='left' type='^i'/>
<arg declared_type='int*' name='top' type='^i'/>
<arg declared_type='int*' name='right' type='^i'/>
<arg declared_type='int*' name='bottom' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessPageIteratorCopy'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<retval declared_type='TessPageIterator*' type='^{TessPageIterator=}'/>
</function>
<function name='TessPageIteratorDelete'>
<arg declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessPageIteratorGetBinaryImage'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='TessPageIteratorGetImage'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<arg declared_type='int' name='padding' type='i'/>
<arg declared_type='int*' name='left' type='^i'/>
<arg declared_type='int*' name='top' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='TessPageIteratorIsAtBeginningOf'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessPageIteratorIsAtFinalElement'>
<arg const='true' declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<arg declared_type='TessPageIteratorLevel' name='element' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessPageIteratorNext'>
<arg declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessPageIteratorOrientation'>
<arg declared_type='TessPageIterator*' name='handle' type='^{TessPageIterator=}'/>
<arg declared_type='TessOrientation*' name='orientation' type='^i'/>
<arg declared_type='TessWritingDirection*' name='writing_direction' type='^i'/>
<arg declared_type='TessTextlineOrder*' name='textline_order' type='^i'/>
<arg declared_type='float*' name='deskew_angle' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessResultIteratorConfidence'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<retval declared_type='float' type='f'/>
</function>
<function name='TessResultIteratorCopy'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='TessResultIterator*' type='^{TessResultIterator=}'/>
</function>
<function name='TessResultIteratorDelete'>
<arg declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TessResultIteratorGetPageIterator'>
<arg declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='TessPageIterator*' type='^{TessPageIterator=}'/>
</function>
<function name='TessResultIteratorGetPageIteratorConst'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval const='true' declared_type='TessPageIterator*' type='^{TessPageIterator=}'/>
</function>
<function name='TessResultIteratorGetUTF8Text'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<arg declared_type='TessPageIteratorLevel' name='level' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TessResultIteratorSymbolIsDropcap'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessResultIteratorSymbolIsSubscript'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessResultIteratorSymbolIsSuperscript'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessResultIteratorWordFontAttributes'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<arg declared_type='int*' name='is_bold' type='^i'/>
<arg declared_type='int*' name='is_italic' type='^i'/>
<arg declared_type='int*' name='is_underlined' type='^i'/>
<arg declared_type='int*' name='is_monospace' type='^i'/>
<arg declared_type='int*' name='is_serif' type='^i'/>
<arg declared_type='int*' name='is_smallcaps' type='^i'/>
<arg declared_type='int*' name='pointsize' type='^i'/>
<arg declared_type='int*' name='font_id' type='^i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TessResultIteratorWordIsFromDictionary'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessResultIteratorWordIsNumeric'>
<arg const='true' declared_type='TessResultIterator*' name='handle' type='^{TessResultIterator=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TessVersion'>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='WERD_CHOICE_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='WERD_RES_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='WERD_zapper'>
<arg declared_type='int*' name='link' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='absDifferenceLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas1' type='^I'/>
<arg declared_type='l_uint32*' name='datas2' type='^I'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpls1' type='i'/>
<arg declared_type='l_int32' name='wpls2' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='account_splits_left'>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='struct TBLOB*' name='blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='struct TBLOB*' name='end_blob' type='^{TBLOB=??????????????}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='account_splits_left_helper'>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='struct TBLOB*' name='blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='struct TBLOB*' name='end_blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='inT32*' name='depth' type='^i'/>
<arg declared_type='inT8*' name='width' type='*'/>
<arg declared_type='inT8*' name='found_em' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='account_splits_right'>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='struct TBLOB*' name='blob' type='^{TBLOB=??????????????}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='accumulateLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='addColorizedGrayToCmap'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='NUMA**' name='pna' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='addConstantGrayLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='addGrayLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='add_seam'>
<arg declared_type='SEAMS' name='seam_list' type='i'/>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<retval declared_type='SEAMS' type='i'/>
</function>
<function name='adjacentOnPixelInRaster'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32*' name='pxa' type='^i'/>
<arg declared_type='l_int32*' name='pya' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='affineInvertXform'>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_float32**' name='pvci' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='affineXformPt'>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32*' name='pxp' type='^f'/>
<arg declared_type='l_float32*' name='pyp' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='affineXformSampledPt'>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32*' name='pxp' type='^i'/>
<arg declared_type='l_int32*' name='pyp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='alloc_big_zeros'>
<arg declared_type='inT32' name='count' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='alloc_mem'>
<arg declared_type='inT32' name='count' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='alloc_struct'>
<arg declared_type='inT32' name='count' type='i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='applyCubicFit'>
<arg declared_type='l_float32' name='a' type='f'/>
<arg declared_type='l_float32' name='b' type='f'/>
<arg declared_type='l_float32' name='c' type='f'/>
<arg declared_type='l_float32' name='d' type='f'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32*' name='py' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='applyLinearFit'>
<arg declared_type='l_float32' name='a' type='f'/>
<arg declared_type='l_float32' name='b' type='f'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32*' name='py' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='applyQuadraticFit'>
<arg declared_type='l_float32' name='a' type='f'/>
<arg declared_type='l_float32' name='b' type='f'/>
<arg declared_type='l_float32' name='c' type='f'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32*' name='py' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='applyQuarticFit'>
<arg declared_type='l_float32' name='a' type='f'/>
<arg declared_type='l_float32' name='b' type='f'/>
<arg declared_type='l_float32' name='c' type='f'/>
<arg declared_type='l_float32' name='d' type='f'/>
<arg declared_type='l_float32' name='e' type='f'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32*' name='py' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='arrayFindEachSequence'>
<arg const='true' declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='l_int32' name='datalen' type='i'/>
<arg const='true' declared_type='l_uint8*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='seqlen' type='i'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='arrayFindSequence'>
<arg const='true' declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='l_int32' name='datalen' type='i'/>
<arg const='true' declared_type='l_uint8*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='seqlen' type='i'/>
<arg declared_type='l_int32*' name='poffset' type='^i'/>
<arg declared_type='l_int32*' name='pfound' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='arrayRead'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='l_int32*' name='pnbytes' type='^i'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='arrayReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pnbytes' type='^i'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='barcodeDispatchDecoder'>
<arg declared_type='char*' name='barstr' type='*'/>
<arg declared_type='l_int32' name='format' type='i'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='barcodeFormatIsSupported'>
<arg declared_type='l_int32' name='format' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferBytesToWrite'>
<arg declared_type='BBUFFER*' name='bb' type='^{ByteBuffer=iii*}'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferCreate'>
<arg declared_type='l_uint8*' name='indata' type='*'/>
<arg declared_type='l_int32' name='nalloc' type='i'/>
<retval declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
</function>
<function name='bbufferDestroy'>
<arg declared_type='BBUFFER**' name='pbb' type='^^{ByteBuffer}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bbufferDestroyAndSaveData'>
<arg declared_type='BBUFFER**' name='pbb' type='^^{ByteBuffer}'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='bbufferExtendArray'>
<arg declared_type='BBUFFER*' name='bb' type='^{ByteBuffer=iii*}'/>
<arg declared_type='l_int32' name='nbytes' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferRead'>
<arg declared_type='BBUFFER*' name='bb' type='^{ByteBuffer=iii*}'/>
<arg declared_type='l_uint8*' name='src' type='*'/>
<arg declared_type='l_int32' name='nbytes' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferReadStream'>
<arg declared_type='BBUFFER*' name='bb' type='^{ByteBuffer=iii*}'/>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32' name='nbytes' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferWrite'>
<arg declared_type='BBUFFER*' name='bb' type='^{ByteBuffer=iii*}'/>
<arg declared_type='l_uint8*' name='dest' type='*'/>
<arg declared_type='size_t' name='nbytes' type='L'/>
<arg declared_type='size_t*' name='pnout' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferWriteStream'>
<arg declared_type='BBUFFER*' name='bb' type='^{ByteBuffer=iii*}'/>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='size_t' name='nbytes' type='L'/>
<arg declared_type='size_t*' name='pnout' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bilinearXformPt'>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32*' name='pxp' type='^f'/>
<arg declared_type='l_float32*' name='pyp' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bilinearXformSampledPt'>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32*' name='pxp' type='^i'/>
<arg declared_type='l_int32*' name='pyp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bln_word_window_handle'>
<retval declared_type='int*' type='^i'/>
</function>
<function name='blob_origin'>
<arg declared_type='struct TBLOB*' name='blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='struct TPOINT*' name='origin' type='^{TPOINT=??}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='blobs'>
<retval declared_type='int' type='i'/>
</function>
<function name='blobs_widths'>
<arg declared_type='struct TBLOB*' name='blobs' type='^{TBLOB=??????????????}'/>
<retval declared_type='WIDTH_RECORD*' type='^{_WIDTH_RECORD=i[1i]}'/>
</function>
<function name='blockconvAccumLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='blockconvLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_uint32*' name='dataa' type='^I'/>
<arg declared_type='l_int32' name='wpla' type='i'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='blocksumLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_uint32*' name='dataa' type='^I'/>
<arg declared_type='l_int32' name='wpla' type='i'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bmfCreate'>
<arg const='true' declared_type='char*' name='dir' type='*'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
</function>
<function name='bmfDestroy'>
<arg declared_type='L_BMF**' name='pbmf' type='^^{L_Bmf}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bmfGetBaseline'>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg declared_type='char' name='chr' type='c'/>
<arg declared_type='l_int32*' name='pbaseline' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bmfGetLineStrings'>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg const='true' declared_type='char*' name='textstr' type='*'/>
<arg declared_type='l_int32' name='maxw' type='i'/>
<arg declared_type='l_int32' name='firstindent' type='i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='bmfGetPix'>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg declared_type='char' name='chr' type='c'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='bmfGetStringWidth'>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg const='true' declared_type='char*' name='textstr' type='*'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bmfGetWidth'>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg declared_type='char' name='chr' type='c'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bmfGetWordWidths'>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg const='true' declared_type='char*' name='textstr' type='*'/>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='boxAdjustSides'>
<arg declared_type='BOX*' name='boxd' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='boxs' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='delleft' type='i'/>
<arg declared_type='l_int32' name='delright' type='i'/>
<arg declared_type='l_int32' name='deltop' type='i'/>
<arg declared_type='l_int32' name='delbot' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxBoundingRegion'>
<arg declared_type='BOX*' name='box1' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='box2' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxChangeRefcount'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxClipToRectangle'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='wi' type='i'/>
<arg declared_type='l_int32' name='hi' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxClone'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxContains'>
<arg declared_type='BOX*' name='box1' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='box2' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32*' name='presult' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxContainsPt'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32' name='y' type='f'/>
<arg declared_type='l_int32*' name='pcontains' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxCopy'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxCreate'>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxCreateValid'>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxDestroy'>
<arg declared_type='BOX**' name='pbox' type='^^{Box}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='boxEqual'>
<arg declared_type='BOX*' name='box1' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='box2' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxGetCenter'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_float32*' name='pcx' type='^f'/>
<arg declared_type='l_float32*' name='pcy' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxGetGeometry'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxGetRefcount'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxIntersectByLine'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='slope' type='f'/>
<arg declared_type='l_int32*' name='px1' type='^i'/>
<arg declared_type='l_int32*' name='py1' type='^i'/>
<arg declared_type='l_int32*' name='px2' type='^i'/>
<arg declared_type='l_int32*' name='py2' type='^i'/>
<arg declared_type='l_int32*' name='pn' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxIntersects'>
<arg declared_type='BOX*' name='box1' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='box2' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32*' name='presult' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxIsValid'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32*' name='pvalid' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxOverlapFraction'>
<arg declared_type='BOX*' name='box1' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='box2' type='^{Box=iiiiI}'/>
<arg declared_type='l_float32*' name='pfract' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxOverlapRegion'>
<arg declared_type='BOX*' name='box1' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='box2' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxPrintStreamInfo'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxRelocateOneSide'>
<arg declared_type='BOX*' name='boxd' type='^{Box=iiiiI}'/>
<arg declared_type='BOX*' name='boxs' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='loc' type='i'/>
<arg declared_type='l_int32' name='sideflag' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxRotateOrth'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='rotation' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxSetGeometry'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxTransform'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='shiftx' type='i'/>
<arg declared_type='l_int32' name='shifty' type='i'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxTransformOrdered'>
<arg declared_type='BOX*' name='boxs' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='shiftx' type='i'/>
<arg declared_type='l_int32' name='shifty' type='i'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='l_int32' name='xcen' type='i'/>
<arg declared_type='l_int32' name='ycen' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='order' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='box_next'>
<arg declared_type='int*' name='it' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='box_next_pre_chopped'>
<arg declared_type='int*' name='it' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='boxaAddBox'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaAffineTransform'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32*' name='mat' type='^f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaBinSort'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='sorttype' type='i'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaClear'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaClipToBox'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaCombineOverlaps'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaConstrainSize'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='widthflag' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='heightflag' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaContainedInBox'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaConvertToPta'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='ncorners' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='boxaCopy'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaDestroy'>
<arg declared_type='BOXA**' name='pboxa' type='^^{Boxa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='boxaEncapsulateAligned'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='num' type='i'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaEqual'>
<arg declared_type='BOXA*' name='boxa1' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOXA*' name='boxa2' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='maxdist' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtendArray'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtendArrayToSize'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtractAsNuma'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='NUMA**' name='pnax' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnay' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnaw' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnah' type='^^{Numa}'/>
<arg declared_type='l_int32' name='keepinvalid' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtractAsPta'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='PTA**' name='pptal' type='^^{Pta}'/>
<arg declared_type='PTA**' name='pptat' type='^^{Pta}'/>
<arg declared_type='PTA**' name='pptar' type='^^{Pta}'/>
<arg declared_type='PTA**' name='pptab' type='^^{Pta}'/>
<arg declared_type='l_int32' name='keepinvalid' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtractSortedPattern'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='boxaGetBox'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetBoxGeometry'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetCount'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetCoverage'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<arg declared_type='l_int32' name='exactflag' type='i'/>
<arg declared_type='l_float32*' name='pfract' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetExtent'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='BOX**' name='pbox' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetMedian'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetNearestToPt'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetRankSize'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetValidBox'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetValidCount'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetWhiteblocks'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='sortflag' type='i'/>
<arg declared_type='l_int32' name='maxboxes' type='i'/>
<arg declared_type='l_float32' name='maxoverlap' type='f'/>
<arg declared_type='l_int32' name='maxperim' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='maxpops' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaInitFull'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaInsertBox'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaIntersectsBox'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaJoin'>
<arg declared_type='BOXA*' name='boxad' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='istart' type='i'/>
<arg declared_type='l_int32' name='iend' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaLinearFit'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='l_int32' name='max_error' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaLocationRange'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32*' name='pminx' type='^i'/>
<arg declared_type='l_int32*' name='pminy' type='^i'/>
<arg declared_type='l_int32*' name='pmaxx' type='^i'/>
<arg declared_type='l_int32*' name='pmaxy' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaMakeSizeIndicator'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='relation' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='boxaMergeEvenOdd'>
<arg declared_type='BOXA*' name='boxae' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOXA*' name='boxao' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaPermutePseudorandom'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaPermuteRandom'>
<arg declared_type='BOXA*' name='boxad' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaPlotSides'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg const='true' declared_type='char*' name='plotname' type='*'/>
<arg declared_type='NUMA**' name='pnal' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnat' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnar' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnab' type='^^{Numa}'/>
<arg declared_type='l_int32' name='outformat' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaPruneSortedOnOverlap'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='maxoverlap' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaRemoveBox'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaReplaceBox'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaRotate'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='xc' type='f'/>
<arg declared_type='l_float32' name='yc' type='f'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaRotateOrth'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='rotation' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaScale'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSelectBySize'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='relation' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSelectWithIndicator'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSizeRange'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32*' name='pminw' type='^i'/>
<arg declared_type='l_int32*' name='pminh' type='^i'/>
<arg declared_type='l_int32*' name='pmaxw' type='^i'/>
<arg declared_type='l_int32*' name='pmaxh' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaSmoothSequence'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='l_int32' name='max_error' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSort'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='sorttype' type='i'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSort2d'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='NUMAA**' name='pnaad' type='^^{Numaa}'/>
<arg declared_type='l_int32' name='delta1' type='i'/>
<arg declared_type='l_int32' name='delta2' type='i'/>
<arg declared_type='l_int32' name='minh1' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaSort2dByIndex'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaSortByIndex'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='NUMA*' name='naindex' type='^{Numa=iiiff^f}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSplitEvenOdd'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='BOXA**' name='pboxae' type='^^{Boxa}'/>
<arg declared_type='BOXA**' name='pboxao' type='^^{Boxa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaSwapBoxes'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='i' type='i'/>
<arg declared_type='l_int32' name='j' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaTransform'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='shiftx' type='i'/>
<arg declared_type='l_int32' name='shifty' type='i'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaTransformOrdered'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='shiftx' type='i'/>
<arg declared_type='l_int32' name='shifty' type='i'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='l_int32' name='xcen' type='i'/>
<arg declared_type='l_int32' name='ycen' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='order' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaTranslate'>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='transx' type='f'/>
<arg declared_type='l_float32' name='transy' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaAddBox'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaAddBoxa'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='BOXA*' name='ba' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaAlignBox'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaCopy'>
<arg declared_type='BOXAA*' name='baas' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaDestroy'>
<arg declared_type='BOXAA**' name='pbaa' type='^^{Boxaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='boxaaDisplay'>
<arg declared_type='BOXAA*' name='boxaa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='linewba' type='i'/>
<arg declared_type='l_int32' name='linewb' type='i'/>
<arg declared_type='l_uint32' name='colorba' type='I'/>
<arg declared_type='l_uint32' name='colorb' type='I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='boxaaExtendArray'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaExtendArrayToSize'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaExtendWithInit'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='maxindex' type='i'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaFlattenAligned'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='num' type='i'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaaFlattenToBoxa'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaaGetBox'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='iboxa' type='i'/>
<arg declared_type='l_int32' name='ibox' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaaGetBoxCount'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaGetBoxa'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaaGetCount'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaGetExtent'>
<arg declared_type='BOXAA*' name='boxaa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='BOX**' name='pbox' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaInitFull'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaInsertBoxa'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaQuadtreeRegions'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaRemoveBoxa'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaReplaceBoxa'>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='break_pieces'>
<arg declared_type='struct TBLOB*' name='blobs' type='^{TBLOB=??????????????}'/>
<arg declared_type='SEAMS' name='seams' type='i'/>
<arg declared_type='inT16' name='start' type='s'/>
<arg declared_type='inT16' name='end' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='build_image_window'>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='c_blob_comparator'>
<arg const='true' declared_type='void*' name='blob1p' type='^v'/>
<arg const='true' declared_type='void*' name='blob2p' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='call_tester'>
<arg declared_type='struct TBLOB*' name='tessblob' type='^{TBLOB=??????????????}'/>
<arg declared_type='BOOL8' name='correct_blob' type='C'/>
<arg declared_type='char*' name='text' type='*'/>
<arg declared_type='inT32' name='count' type='i'/>
<arg declared_type='LIST' name='result' type='^{list_rec=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='call_train_tester'>
<arg declared_type='struct TBLOB*' name='tessblob' type='^{TBLOB=??????????????}'/>
<arg declared_type='BOOL8' name='correct_blob' type='C'/>
<arg declared_type='char*' name='text' type='*'/>
<arg declared_type='inT32' name='count' type='i'/>
<arg declared_type='LIST' name='result' type='^{list_rec=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccbCreate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
</function>
<function name='ccbDestroy'>
<arg declared_type='CCBORD**' name='pccb' type='^^{CCBord}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccbaAddCcb'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg declared_type='CCBORD*' name='ccb' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaCreate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='ccbaDestroy'>
<arg declared_type='CCBORDA**' name='pccba' type='^^{CCBorda}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccbaDisplayBorder'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaDisplayImage1'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaDisplayImage2'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaDisplaySPBorder'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaExtendArray'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateGlobalLocs'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateSPGlobalLocs'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg declared_type='l_int32' name='ptsflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateSinglePath'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateStepChains'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGetCcb'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
</function>
<function name='ccbaGetCount'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='ccbaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='ccbaStepChainsToPixCoords'>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg declared_type='l_int32' name='coordtype' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaWriteSVG'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaWriteSVGString'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='ccbaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='CCBORDA*' name='ccba' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='choose_nth_item'>
<arg declared_type='inT32' name='index' type='i'/>
<arg declared_type='float*' name='array' type='^f'/>
<arg declared_type='inT32' name='count' type='i'/>
<retval declared_type='inT32' type='i'/>
</function>
<function name='combine_seams'>
<arg declared_type='SEAM*' name='dest_seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='SEAM*' name='source_seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='composeRGBPixel'>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_uint32*' name='ppixel' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='compressed_dataDestroy'>
<arg declared_type='L_COMPRESSED_DATA**' name='pcid' type='^^{L_Compressed_Data}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='compute_reject_threshold'>
<arg declared_type='int*' name='blob_choices' type='^i'/>
<retval declared_type='float' type='f'/>
</function>
<function name='concatenatePdf'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='concatenatePdfToData'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertByteToHexAscii'>
<arg declared_type='l_uint8' name='byteval' type='C'/>
<arg declared_type='char*' name='pnib1' type='*'/>
<arg declared_type='char*' name='pnib2' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='convertFilesFittedToPS'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_float32' name='xpts' type='f'/>
<arg declared_type='l_float32' name='ypts' type='f'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFilesTo1bpp'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='upscaling' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='firstpage' type='i'/>
<arg declared_type='l_int32' name='npages' type='i'/>
<arg const='true' declared_type='char*' name='dirout' type='*'/>
<arg declared_type='l_int32' name='outformat' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFilesToPS'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFilesToPdf'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFlateToPS'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg const='true' declared_type='char*' name='operation' type='*'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFlateToPSEmbed'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFlateToPSString'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='char**' name='poutstr' type='^*'/>
<arg declared_type='l_int32*' name='pnbytes' type='^i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertG4ToPS'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg const='true' declared_type='char*' name='operation' type='*'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='maskflag' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertG4ToPSEmbed'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertG4ToPSString'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='char**' name='poutstr' type='^*'/>
<arg declared_type='l_int32*' name='pnbytes' type='^i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='maskflag' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertHSVToRGB'>
<arg declared_type='l_int32' name='hval' type='i'/>
<arg declared_type='l_int32' name='sval' type='i'/>
<arg declared_type='l_int32' name='vval' type='i'/>
<arg declared_type='l_int32*' name='prval' type='^i'/>
<arg declared_type='l_int32*' name='pgval' type='^i'/>
<arg declared_type='l_int32*' name='pbval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertImageDataToPdf'>
<arg declared_type='l_uint8*' name='imdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='L_PDF_DATA**' name='plpd' type='^^{L_Pdf_Data}'/>
<arg declared_type='l_int32' name='position' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertImageDataToPdfData'>
<arg declared_type='l_uint8*' name='imdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='L_PDF_DATA**' name='plpd' type='^^{L_Pdf_Data}'/>
<arg declared_type='l_int32' name='position' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertJpegToPS'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg const='true' declared_type='char*' name='operation' type='*'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertJpegToPSEmbed'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertJpegToPSString'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='char**' name='poutstr' type='^*'/>
<arg declared_type='l_int32*' name='pnbytes' type='^i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertNumberedMasksToBoxaa'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='numpre' type='i'/>
<arg declared_type='l_int32' name='numpost' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='convertOnBigEnd16'>
<arg declared_type='l_uint16' name='shortin' type='S'/>
<retval declared_type='l_uint16' type='S'/>
</function>
<function name='convertOnBigEnd32'>
<arg declared_type='l_uint32' name='wordin' type='I'/>
<retval declared_type='l_uint32' type='I'/>
</function>
<function name='convertOnLittleEnd16'>
<arg declared_type='l_uint16' name='shortin' type='S'/>
<retval declared_type='l_uint16' type='S'/>
</function>
<function name='convertOnLittleEnd32'>
<arg declared_type='l_uint32' name='wordin' type='I'/>
<retval declared_type='l_uint32' type='I'/>
</function>
<function name='convertRGBToHSV'>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32*' name='phval' type='^i'/>
<arg declared_type='l_int32*' name='psval' type='^i'/>
<arg declared_type='l_int32*' name='pvval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertRGBToYUV'>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32*' name='pyval' type='^i'/>
<arg declared_type='l_int32*' name='puval' type='^i'/>
<arg declared_type='l_int32*' name='pvval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertSegmentedFilesToPdf'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='BOXAA*' name='baa' type='^{Boxaa=ii^^{Boxa}}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertSegmentedPagesToPS'>
<arg const='true' declared_type='char*' name='pagedir' type='*'/>
<arg const='true' declared_type='char*' name='pagestr' type='*'/>
<arg const='true' declared_type='char*' name='maskdir' type='*'/>
<arg const='true' declared_type='char*' name='maskstr' type='*'/>
<arg declared_type='l_int32' name='numpre' type='i'/>
<arg declared_type='l_int32' name='numpost' type='i'/>
<arg declared_type='l_int32' name='maxnum' type='i'/>
<arg declared_type='l_float32' name='textscale' type='f'/>
<arg declared_type='l_float32' name='imagescale' type='f'/>
<arg declared_type='l_int32' name='threshold' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertSortedToNumberedPathnames'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='numpre' type='i'/>
<arg declared_type='l_int32' name='numpost' type='i'/>
<arg declared_type='l_int32' name='maxnum' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='convertTiffMultipageToPS'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg const='true' declared_type='char*' name='tempfile' type='*'/>
<arg declared_type='l_float32' name='fillfract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPSEmbed'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg declared_type='l_int32' name='level' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdf'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='L_PDF_DATA**' name='plpd' type='^^{L_Pdf_Data}'/>
<arg declared_type='l_int32' name='position' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdfData'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='L_PDF_DATA**' name='plpd' type='^^{L_Pdf_Data}'/>
<arg declared_type='l_int32' name='position' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdfDataSegmented'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdfSegmented'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertYUVToRGB'>
<arg declared_type='l_int32' name='yval' type='i'/>
<arg declared_type='l_int32' name='uval' type='i'/>
<arg declared_type='l_int32' name='vval' type='i'/>
<arg declared_type='l_int32*' name='prval' type='^i'/>
<arg declared_type='l_int32*' name='pgval' type='^i'/>
<arg declared_type='l_int32*' name='pbval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='count_blobs'>
<arg declared_type='struct TBLOB*' name='blobs' type='^{TBLOB=??????????????}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='create2dFloatArray'>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<retval declared_type='l_float32**' type='^^f'/>
</function>
<function name='create2dIntArray'>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<retval declared_type='l_int32**' type='^^i'/>
</function>
<function name='createMatrix2dRotate'>
<arg declared_type='l_float32' name='xc' type='f'/>
<arg declared_type='l_float32' name='yc' type='f'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='createMatrix2dScale'>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='createMatrix2dTranslate'>
<arg declared_type='l_float32' name='transx' type='f'/>
<arg declared_type='l_float32' name='transy' type='f'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='crotate_cblob'>
<arg declared_type='int*' name='blob' type='^i'/>
<arg declared_type='int' name='rotation' type='i'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='cutline'>
<arg declared_type='struct EDGEPT*' name='first' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='last' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='int' name='area' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='decodeAscii85'>
<arg declared_type='char*' name='ina' type='*'/>
<arg declared_type='l_int32' name='insize' type='i'/>
<arg declared_type='l_int32*' name='poutsize' type='^i'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='decreasing_top_order'>
<arg const='true' declared_type='void*' name='row1' type='^v'/>
<arg const='true' declared_type='void*' name='row2' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='delete_seam'>
<arg declared_type='void*' name='arg' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='delete_split'>
<arg declared_type='SPLIT*' name='split' type='^{split_record=^{EDGEPT}^{EDGEPT}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dewarpBuildModel'>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<arg const='true' declared_type='char*' name='debugfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpCreate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
</function>
<function name='dewarpCreateReference'>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='refpage' type='i'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
</function>
<function name='dewarpDebug'>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<arg const='true' declared_type='char*' name='subdir' type='*'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpDestroy'>
<arg declared_type='L_DEWARP**' name='pdew' type='^^{L_Dewarp}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dewarpFindHorizDisparity'>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpFindVertDisparity'>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpGetResult'>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='dewarpGetTextlineCenters'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='dewarpMinimize'>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpPopulateFullRes'>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
</function>
<function name='dewarpReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
</function>
<function name='dewarpRemoveShortLines'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTAA*' name='ptaas' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='dewarpShowResults'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='firstpage' type='i'/>
<arg declared_type='l_int32' name='lastpage' type='i'/>
<arg const='true' declared_type='char*' name='pdfout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaApplyDisparity'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='debugfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaCreate'>
<arg declared_type='l_int32' name='nptrs' type='i'/>
<arg declared_type='l_int32' name='sampling' type='i'/>
<arg declared_type='l_int32' name='redfactor' type='i'/>
<arg declared_type='l_int32' name='minlines' type='i'/>
<arg declared_type='l_int32' name='maxdist' type='i'/>
<retval declared_type='L_DEWARPA*' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
</function>
<function name='dewarpaCreateFromPixacomp'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='sampling' type='i'/>
<arg declared_type='l_int32' name='minlines' type='i'/>
<arg declared_type='l_int32' name='maxdist' type='i'/>
<retval declared_type='L_DEWARPA*' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
</function>
<function name='dewarpaDestroy'>
<arg declared_type='L_DEWARPA**' name='pdewa' type='^^{L_Dewarpa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dewarpaDestroyDewarp'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaExtendArrayToSize'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaGetDewarp'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
</function>
<function name='dewarpaGetResult'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='dewarpaInfo'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaInsertDewarp'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='L_DEWARP*' name='dew' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiiiiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaInsertRefModels'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaListPages'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaModelStats'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32*' name='pnnone' type='^i'/>
<arg declared_type='l_int32*' name='pnactual' type='^i'/>
<arg declared_type='l_int32*' name='pnvalid' type='^i'/>
<arg declared_type='l_int32*' name='pnref' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='L_DEWARPA*' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
</function>
<function name='dewarpaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_DEWARPA*' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
</function>
<function name='dewarpaSetCurvatures'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='min_medcurv' type='i'/>
<arg declared_type='l_int32' name='max_medcurv' type='i'/>
<arg declared_type='l_int32' name='max_leftcurv' type='i'/>
<arg declared_type='l_int32' name='max_rightcurv' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaSetMaxDistance'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='maxdist' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaSetValidModels'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaShowArrays'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_float32' name='scalefact' type='f'/>
<arg declared_type='l_int32' name='first' type='i'/>
<arg declared_type='l_int32' name='last' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaStripRefModels'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaUseFullModel'>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<arg declared_type='l_int32' name='fullmodel' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_DEWARPA*' name='dewa' type='^{L_Dewarpa=ii^^{L_Dewarp}^{Numa}^{Numa}iiiiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dilateGrayLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<arg declared_type='l_uint8*' name='buffer' type='*'/>
<arg declared_type='l_uint8*' name='maxarray' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='direction'>
<arg declared_type='int*' name='point' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='displayHSVColorRange'>
<arg declared_type='l_int32' name='hval' type='i'/>
<arg declared_type='l_int32' name='sval' type='i'/>
<arg declared_type='l_int32' name='vval' type='i'/>
<arg declared_type='l_int32' name='huehw' type='i'/>
<arg declared_type='l_int32' name='sathw' type='i'/>
<arg declared_type='l_int32' name='nsamp' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='display_bln_lines'>
<arg declared_type='int' name='window' type='i'/>
<arg declared_type='int' name='ScrollView' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='distanceFunctionLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherTo2bppLineLow'>
<arg declared_type='l_uint32*' name='lined' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_uint32*' name='bufs1' type='^I'/>
<arg declared_type='l_uint32*' name='bufs2' type='^I'/>
<arg declared_type='l_int32*' name='tabval' type='^i'/>
<arg declared_type='l_int32*' name='tab38' type='^i'/>
<arg declared_type='l_int32*' name='tab14' type='^i'/>
<arg declared_type='l_int32' name='lastlineflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherTo2bppLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='bufs1' type='^I'/>
<arg declared_type='l_uint32*' name='bufs2' type='^I'/>
<arg declared_type='l_int32*' name='tabval' type='^i'/>
<arg declared_type='l_int32*' name='tab38' type='^i'/>
<arg declared_type='l_int32*' name='tab14' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLUTLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='bufs1' type='^I'/>
<arg declared_type='l_uint32*' name='bufs2' type='^I'/>
<arg declared_type='l_int32*' name='tabval' type='^i'/>
<arg declared_type='l_int32*' name='tab38' type='^i'/>
<arg declared_type='l_int32*' name='tab14' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLineLUTLow'>
<arg declared_type='l_uint32*' name='lined' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_uint32*' name='bufs1' type='^I'/>
<arg declared_type='l_uint32*' name='bufs2' type='^I'/>
<arg declared_type='l_int32*' name='tabval' type='^i'/>
<arg declared_type='l_int32*' name='tab38' type='^i'/>
<arg declared_type='l_int32*' name='tab14' type='^i'/>
<arg declared_type='l_int32' name='lastlineflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLineLow'>
<arg declared_type='l_uint32*' name='lined' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_uint32*' name='bufs1' type='^I'/>
<arg declared_type='l_uint32*' name='bufs2' type='^I'/>
<arg declared_type='l_int32' name='lowerclip' type='i'/>
<arg declared_type='l_int32' name='upperclip' type='i'/>
<arg declared_type='l_int32' name='lastlineflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='bufs1' type='^I'/>
<arg declared_type='l_uint32*' name='bufs2' type='^I'/>
<arg declared_type='l_int32' name='lowerclip' type='i'/>
<arg declared_type='l_int32' name='upperclip' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='divide_blobs'>
<arg declared_type='struct TBLOB*' name='blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='struct TBLOB*' name='other_blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='_Bool' name='italic_blob' type='B'/>
<arg const='true' declared_type='struct TPOINT' type='{TPOINT=??}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='divisible_blob'>
<arg declared_type='struct TBLOB*' name='blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='_Bool' name='italic_blob' type='B'/>
<arg declared_type='struct TPOINT*' name='location' type='^{TPOINT=??}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='dont_allow_1Il'>
<arg declared_type='int*' name='word' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dpixAddMultConstant'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_float64' name='addc' type='d'/>
<arg declared_type='l_float64' name='multc' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixChangeRefcount'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixClone'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixConvertToFPix'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='dpixConvertToPix'>
<arg declared_type='DPIX*' name='dpixs' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='negvals' type='i'/>
<arg declared_type='l_int32' name='errorflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='dpixCopy'>
<arg declared_type='DPIX*' name='dpixd' type='^{DPix=iiiIii^d}'/>
<arg declared_type='DPIX*' name='dpixs' type='^{DPix=iiiIii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixCopyResolution'>
<arg declared_type='DPIX*' name='dpixd' type='^{DPix=iiiIii^d}'/>
<arg declared_type='DPIX*' name='dpixs' type='^{DPix=iiiIii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixCreate'>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixCreateTemplate'>
<arg declared_type='DPIX*' name='dpixs' type='^{DPix=iiiIii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixDestroy'>
<arg declared_type='DPIX**' name='pdpix' type='^^{DPix}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dpixEndianByteSwap'>
<arg declared_type='DPIX*' name='dpixd' type='^{DPix=iiiIii^d}'/>
<arg declared_type='DPIX*' name='dpixs' type='^{DPix=iiiIii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixGetData'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<retval declared_type='l_float64*' type='^d'/>
</function>
<function name='dpixGetDimensions'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetMax'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_float64*' name='pmaxval' type='^d'/>
<arg declared_type='l_int32*' name='pxmaxloc' type='^i'/>
<arg declared_type='l_int32*' name='pymaxloc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetMin'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_float64*' name='pminval' type='^d'/>
<arg declared_type='l_int32*' name='pxminloc' type='^i'/>
<arg declared_type='l_int32*' name='pyminloc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetPixel'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float64*' name='pval' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetRefcount'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetResolution'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32*' name='pxres' type='^i'/>
<arg declared_type='l_int32*' name='pyres' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetWpl'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixLinearCombination'>
<arg declared_type='DPIX*' name='dpixd' type='^{DPix=iiiIii^d}'/>
<arg declared_type='DPIX*' name='dpixs1' type='^{DPix=iiiIii^d}'/>
<arg declared_type='DPIX*' name='dpixs2' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_float32' name='a' type='f'/>
<arg declared_type='l_float32' name='b' type='f'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixResizeImageData'>
<arg declared_type='DPIX*' name='dpixd' type='^{DPix=iiiIii^d}'/>
<arg declared_type='DPIX*' name='dpixs' type='^{DPix=iiiIii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixScaleByInteger'>
<arg declared_type='DPIX*' name='dpixs' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='dpixSetAllArbitrary'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_float64' name='inval' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetData'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_float64*' name='data' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetDimensions'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetPixel'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float64' name='val' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetResolution'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='xres' type='i'/>
<arg declared_type='l_int32' name='yres' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetWpl'>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='DPIX*' name='dpix' type='^{DPix=iiiIii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dyn_prog'>
<arg declared_type='int' name='n' type='i'/>
<arg declared_type='int*' name='x' type='^i'/>
<arg declared_type='int*' name='y' type='^i'/>
<arg declared_type='int' name='ymax' type='i'/>
<arg declared_type='int*' name='oldx' type='^i'/>
<arg declared_type='int*' name='oldy' type='^i'/>
<arg declared_type='int' name='oldn' type='i'/>
<arg declared_type='float' name='factor' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='edgesteps_to_edgepts'>
<arg declared_type='int*' name='c_outline' type='^i'/>
<arg declared_type='int' name='edgepts' type='i'/>
<retval declared_type='struct EDGEPT*' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
</function>
<function name='encodeAscii85'>
<arg declared_type='l_uint8*' name='inarray' type='*'/>
<arg declared_type='l_int32' name='insize' type='i'/>
<arg declared_type='l_int32*' name='poutsize' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='erodeGrayLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<arg declared_type='l_uint8*' name='buffer' type='*'/>
<arg declared_type='l_uint8*' name='minarray' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='err_exit'>
<retval declared_type='void' type='v'/>
</function>
<function name='expandBinaryPower2Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractG4DataFromFile'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pminisblack' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractJpegDataFromArray'>
<arg const='true' declared_type='void*' name='data' type='^v'/>
<arg declared_type='size_t' name='nbytes' type='L'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractJpegDataFromFile'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractMinMaxComponent'>
<arg declared_type='l_uint32' name='pixel' type='I'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractNumberFromFilename'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='l_int32' name='numpre' type='i'/>
<arg declared_type='l_int32' name='numpost' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractRGBValues'>
<arg declared_type='l_uint32' name='pixel' type='I'/>
<arg declared_type='l_int32*' name='prval' type='^i'/>
<arg declared_type='l_int32*' name='pgval' type='^i'/>
<arg declared_type='l_int32*' name='pbval' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fgetJpegResolution'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pxres' type='^i'/>
<arg declared_type='l_int32*' name='pyres' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fgetPngResolution'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pxres' type='^i'/>
<arg declared_type='l_int32*' name='pyres' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtautogen'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='fileindex' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtautogen1'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='fileindex' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtautogen2'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='fileindex' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtgen_low_1'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileAppendString'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileConcatenate'>
<arg const='true' declared_type='char*' name='srcfile' type='*'/>
<arg const='true' declared_type='char*' name='destfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileCopy'>
<arg const='true' declared_type='char*' name='srcfile' type='*'/>
<arg const='true' declared_type='char*' name='newfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileFormatIsTiff'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='filesAreIdentical'>
<arg const='true' declared_type='char*' name='fname1' type='*'/>
<arg const='true' declared_type='char*' name='fname2' type='*'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='finalAccumulateLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32' name='offset' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='finalAccumulateThreshLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32' name='offset' type='I'/>
<arg declared_type='l_uint32' name='threshold' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='findFileFormat'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findFileFormatBuffer'>
<arg const='true' declared_type='l_uint8*' name='buf' type='*'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findFileFormatStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findNextBorderPixel'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_int32' name='px' type='i'/>
<arg declared_type='l_int32' name='py' type='i'/>
<arg declared_type='l_int32*' name='pqpos' type='^i'/>
<arg declared_type='l_int32*' name='pnpx' type='^i'/>
<arg declared_type='l_int32*' name='pnpy' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findTiffCompression'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pcomptype' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='find_cblob_hlimits'>
<arg declared_type='int*' name='blob' type='^i'/>
<arg declared_type='float' name='bottomy' type='f'/>
<arg declared_type='float' name='topy' type='f'/>
<arg declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='find_cblob_limits'>
<arg declared_type='int*' name='blob' type='^i'/>
<arg declared_type='float' name='leftx' type='f'/>
<arg declared_type='float' name='rightx' type='f'/>
<arg declared_type='int' name='rotation' type='i'/>
<arg declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='find_cblob_vlimits'>
<arg declared_type='int*' name='blob' type='^i'/>
<arg declared_type='float' name='leftx' type='f'/>
<arg declared_type='float' name='rightx' type='f'/>
<arg declared_type='float' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='find_split_in_blob'>
<arg declared_type='SPLIT*' name='split' type='^{split_record=^{EDGEPT}^{EDGEPT}}'/>
<arg declared_type='struct TBLOB*' name='blob' type='^{TBLOB=??????????????}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='fix2'>
<arg declared_type='struct EDGEPT*' name='start' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='int' name='area' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fixspace_dbg'>
<arg declared_type='int*' name='word' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='flipLRLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_uint8*' name='tab' type='*'/>
<arg declared_type='l_uint32*' name='buffer' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='flipTBLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_uint32*' name='buffer' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='flip_0O'>
<arg declared_type='int*' name='word' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='flip_hyphens'>
<arg declared_type='int*' name='word' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fmorphautogen'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='fileindex' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphautogen1'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='fileindex' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphautogen2'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='fileindex' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphopgen_low_1'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphopgen_low_2'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fnbytesInFile'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='size_t' type='L'/>
</function>
<function name='fopenReadStream'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='fopenWriteStream'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg const='true' declared_type='char*' name='modestring' type='*'/>
<retval declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='fpixAddBorder'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixAddContinuedBorder'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixAddMirroredBorder'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixAddMultConstant'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32' name='addc' type='f'/>
<arg declared_type='l_float32' name='multc' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixAddSlopeBorder'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixAffine'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_float32' name='inval' type='f'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixAffinePta'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='border' type='i'/>
<arg declared_type='l_float32' name='inval' type='f'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixAutoRenderContours'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='ncontours' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixChangeRefcount'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixClone'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixConvertToDPix'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='fpixConvertToPix'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='negvals' type='i'/>
<arg declared_type='l_int32' name='errorflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixConvolve'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='normflag' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixConvolveSep'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='L_KERNEL*' name='kelx' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='L_KERNEL*' name='kely' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='normflag' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixCopy'>
<arg declared_type='FPIX*' name='fpixd' type='^{FPix=iiiIii^f}'/>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixCopyResolution'>
<arg declared_type='FPIX*' name='fpixd' type='^{FPix=iiiIii^f}'/>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixCreate'>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixCreateTemplate'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixDestroy'>
<arg declared_type='FPIX**' name='pfpix' type='^^{FPix}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fpixDisplayMaxDynamicRange'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixEndianByteSwap'>
<arg declared_type='FPIX*' name='fpixd' type='^{FPix=iiiIii^f}'/>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixGetData'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='fpixGetDimensions'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetMax'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32*' name='pmaxval' type='^f'/>
<arg declared_type='l_int32*' name='pxmaxloc' type='^i'/>
<arg declared_type='l_int32*' name='pymaxloc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetMin'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32*' name='pminval' type='^f'/>
<arg declared_type='l_int32*' name='pxminloc' type='^i'/>
<arg declared_type='l_int32*' name='pyminloc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetPixel'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetRefcount'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetResolution'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32*' name='pxres' type='^i'/>
<arg declared_type='l_int32*' name='pyres' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetWpl'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixLinearCombination'>
<arg declared_type='FPIX*' name='fpixd' type='^{FPix=iiiIii^f}'/>
<arg declared_type='FPIX*' name='fpixs1' type='^{FPix=iiiIii^f}'/>
<arg declared_type='FPIX*' name='fpixs2' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32' name='a' type='f'/>
<arg declared_type='l_float32' name='b' type='f'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixPrintStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixProjective'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_float32' name='inval' type='f'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixProjectivePta'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='border' type='i'/>
<arg declared_type='l_float32' name='inval' type='f'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixRasterop'>
<arg declared_type='FPIX*' name='fpixd' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='dx' type='i'/>
<arg declared_type='l_int32' name='dy' type='i'/>
<arg declared_type='l_int32' name='dw' type='i'/>
<arg declared_type='l_int32' name='dh' type='i'/>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixRemoveBorder'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixRenderContours'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32' name='incr' type='f'/>
<arg declared_type='l_float32' name='proxim' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixResizeImageData'>
<arg declared_type='FPIX*' name='fpixd' type='^{FPix=iiiIii^f}'/>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixScaleByInteger'>
<arg declared_type='FPIX*' name='fpixs' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixSetAllArbitrary'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32' name='inval' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetData'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_float32*' name='data' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetDimensions'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetPixel'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetResolution'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='xres' type='i'/>
<arg declared_type='l_int32' name='yres' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetWpl'>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaAddFPix'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='FPIX*' name='fpix' type='^{FPix=iiiIii^f}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaChangeRefcount'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaCopy'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
</function>
<function name='fpixaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
</function>
<function name='fpixaDestroy'>
<arg declared_type='FPIXA**' name='pfpixa' type='^^{FPixa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fpixaDisplayQuadtree'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixaExtendArray'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaExtendArrayToSize'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaGetCount'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaGetFPix'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='fpixaGetFPixDimensions'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaGetPixel'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaSetPixel'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fprintTiffInfo'>
<arg declared_type='FILE*' name='fpout' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type='char*' name='tiffile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderJpeg'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='pycck' type='^i'/>
<arg declared_type='l_int32*' name='pcmyk' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderPng'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderPnm'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX**' name='ppix' type='^^{Pix}'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pdepth' type='^i'/>
<arg declared_type='l_int32*' name='ptype' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderSpix'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderTiff'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='pres' type='^i'/>
<arg declared_type='l_int32*' name='pcmap' type='^i'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='free_big_mem'>
<arg declared_type='void*' name='oldchunk' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='free_mem'>
<arg declared_type='void*' name='oldchunk' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='free_seam_list'>
<arg declared_type='SEAMS' name='seam_list' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='free_string'>
<arg declared_type='char*' name='string' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='free_struct'>
<arg declared_type='void*' name='deadstruct' type='^v'/>
<arg declared_type='inT32' type='i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gaussjordan'>
<arg declared_type='l_float32**' name='a' type='^^f'/>
<arg declared_type='l_float32*' name='b' type='^f'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='genPathname'>
<arg const='true' declared_type='char*' name='dir' type='*'/>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='genRandomIntegerInRange'>
<arg declared_type='l_int32' name='range' type='i'/>
<arg declared_type='l_int32' name='seed' type='i'/>
<arg declared_type='l_int32*' name='pval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='genTempFilename'>
<arg const='true' declared_type='char*' name='dir' type='*'/>
<arg const='true' declared_type='char*' name='tail' type='*'/>
<arg declared_type='l_int32' name='usetime' type='i'/>
<arg declared_type='l_int32' name='usepid' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generateBinaryMaze'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='xi' type='i'/>
<arg declared_type='l_int32' name='yi' type='i'/>
<arg declared_type='l_float32' name='wallps' type='f'/>
<arg declared_type='l_float32' name='ranis' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='generateFlatePS'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='L_COMPRESSED_DATA*' name='cid' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
<arg declared_type='l_float32' name='xpt' type='f'/>
<arg declared_type='l_float32' name='ypt' type='f'/>
<arg declared_type='l_float32' name='wpt' type='f'/>
<arg declared_type='l_float32' name='hpt' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generateG4PS'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='L_COMPRESSED_DATA*' name='cid' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
<arg declared_type='l_float32' name='xpt' type='f'/>
<arg declared_type='l_float32' name='ypt' type='f'/>
<arg declared_type='l_float32' name='wpt' type='f'/>
<arg declared_type='l_float32' name='hpt' type='f'/>
<arg declared_type='l_int32' name='maskflag' type='i'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generateJpegPS'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg declared_type='L_COMPRESSED_DATA*' name='cid' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
<arg declared_type='l_float32' name='xpt' type='f'/>
<arg declared_type='l_float32' name='ypt' type='f'/>
<arg declared_type='l_float32' name='wpt' type='f'/>
<arg declared_type='l_float32' name='hpt' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg declared_type='l_int32' name='endpage' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generatePtaBox'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaBoxa'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='removedups' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaFilledCircle'>
<arg declared_type='l_int32' name='radius' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaHashBox'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='orient' type='i'/>
<arg declared_type='l_int32' name='outline' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaLine'>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaLineFromPt'>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float64' name='length' type='d'/>
<arg declared_type='l_float64' name='radang' type='d'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaPolyline'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='closeflag' type='i'/>
<arg declared_type='l_int32' name='removedups' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaWideLine'>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='generatePtaaBoxa'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='generatePtaaHashBoxa'>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='orient' type='i'/>
<arg declared_type='l_int32' name='outline' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='generateUncompressedPS'>
<arg declared_type='char*' name='hexdata' type='*'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='psbpl' type='i'/>
<arg declared_type='l_int32' name='bps' type='i'/>
<arg declared_type='l_float32' name='xpt' type='f'/>
<arg declared_type='l_float32' name='ypt' type='f'/>
<arg declared_type='l_float32' name='wpt' type='f'/>
<arg declared_type='l_float32' name='hpt' type='f'/>
<arg declared_type='l_int32' name='boxflag' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='getAffineXformCoeffs'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32**' name='pvc' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getBilinearXformCoeffs'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32**' name='pvc' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getCompositeParameters'>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32*' name='psize1' type='^i'/>
<arg declared_type='l_int32*' name='psize2' type='^i'/>
<arg declared_type='char**' name='pnameh1' type='^*'/>
<arg declared_type='char**' name='pnameh2' type='^*'/>
<arg declared_type='char**' name='pnamev1' type='^*'/>
<arg declared_type='char**' name='pnamev2' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getCutPathForHole'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='BOX*' name='boxinner' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32*' name='pdir' type='^i'/>
<arg declared_type='l_int32*' name='plen' type='^i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='getExtendedCompositeParameters'>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32*' name='pn' type='^i'/>
<arg declared_type='l_int32*' name='pextra' type='^i'/>
<arg declared_type='l_int32*' name='pactualsize' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getFilenamesInDirectory'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='getFormatExtension'>
<arg declared_type='l_int32' name='format' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='getImagelibVersions'>
<retval declared_type='char*' type='*'/>
</function>
<function name='getImpliedFileFormat'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getLeptonicaVersion'>
<retval declared_type='char*' type='*'/>
</function>
<function name='getLogBase2'>
<arg declared_type='l_int32' name='val' type='i'/>
<arg declared_type='l_float32*' name='logtab' type='^f'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='getMorphBorderPixelColor'>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='l_uint32' type='I'/>
</function>
<function name='getNumberedPathnamesInDirectory'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='numpre' type='i'/>
<arg declared_type='l_int32' name='numpost' type='i'/>
<arg declared_type='l_int32' name='maxnum' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='getOctcubeIndexFromRGB'>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_uint32*' name='rtab' type='^I'/>
<arg declared_type='l_uint32*' name='gtab' type='^I'/>
<arg declared_type='l_uint32*' name='btab' type='^I'/>
<arg declared_type='l_uint32*' name='pindex' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='getProjectiveXformCoeffs'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32**' name='pvc' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getResA4Page'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_float32' name='fillfract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getResLetterPage'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_float32' name='fillfract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getScaledParametersPS'>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='wpix' type='i'/>
<arg declared_type='l_int32' name='hpix' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_float32*' name='pxpt' type='^f'/>
<arg declared_type='l_float32*' name='pypt' type='^f'/>
<arg declared_type='l_float32*' name='pwpt' type='^f'/>
<arg declared_type='l_float32*' name='phpt' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='getSortedPathnamesInDirectory'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='firstpage' type='i'/>
<arg declared_type='l_int32' name='npages' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='getTiffResolution'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pxres' type='^i'/>
<arg declared_type='l_int32*' name='pyres' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotAddPlot'>
<arg declared_type='GPLOT*' name='gplot' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='plotstyle' type='i'/>
<arg const='true' declared_type='char*' name='plottitle' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotCreate'>
<arg const='true' declared_type='char*' name='rootname' type='*'/>
<arg declared_type='l_int32' name='outformat' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg const='true' declared_type='char*' name='xlabel' type='*'/>
<arg const='true' declared_type='char*' name='ylabel' type='*'/>
<retval declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
</function>
<function name='gplotDestroy'>
<arg declared_type='GPLOT**' name='pgplot' type='^^{GPlot}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gplotGenCommandFile'>
<arg declared_type='GPLOT*' name='gplot' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotGenDataFiles'>
<arg declared_type='GPLOT*' name='gplot' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotMakeOutput'>
<arg declared_type='GPLOT*' name='gplot' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
</function>
<function name='gplotSetScaling'>
<arg declared_type='GPLOT*' name='gplot' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<arg declared_type='l_int32' name='scaling' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotSimple1'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='outformat' type='i'/>
<arg const='true' declared_type='char*' name='outroot' type='*'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotSimple2'>
<arg declared_type='NUMA*' name='na1' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='na2' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='outformat' type='i'/>
<arg const='true' declared_type='char*' name='outroot' type='*'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotSimpleN'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='outformat' type='i'/>
<arg const='true' declared_type='char*' name='outroot' type='*'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='GPLOT*' name='gplot' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='hash'>
<arg declared_type='inT32' name='bits' type='i'/>
<arg declared_type='void*' name='key' type='^v'/>
<arg declared_type='inT32' name='keysize' type='i'/>
<retval declared_type='inT32' type='i'/>
</function>
<function name='hide_edge_pair'>
<arg declared_type='struct EDGEPT*' name='pt1' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='pt2' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='hide_seam'>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='insert_seam'>
<arg declared_type='SEAMS' name='seam_list' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='struct TBLOB*' name='left_blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='struct TBLOB*' name='first_blob' type='^{TBLOB=??????????????}'/>
<retval declared_type='SEAMS' type='i'/>
</function>
<function name='ioFormatTest'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='is_hole'>
<retval declared_type='int' type='i'/>
</function>
<function name='jbAccumulateComposites'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='NUMA**' name='pna' type='^^{Numa}'/>
<arg declared_type='PTA**' name='pptat' type='^^{Pta}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='jbAddPage'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbAddPageComponents'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxas' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbAddPages'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg declared_type='SARRAY*' name='safiles' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbClasserCreate'>
<arg declared_type='l_int32' name='method' type='i'/>
<arg declared_type='l_int32' name='components' type='i'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbClasserDestroy'>
<arg declared_type='JBCLASSER**' name='pclasser' type='^^{JbClasser}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='jbClassifyCorrelation'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbClassifyRankHaus'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbCorrelation'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_float32' name='weight' type='f'/>
<arg declared_type='l_int32' name='components' type='i'/>
<arg const='true' declared_type='char*' name='rootname' type='*'/>
<arg declared_type='l_int32' name='firstpage' type='i'/>
<arg declared_type='l_int32' name='npages' type='i'/>
<arg declared_type='l_int32' name='renderflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbCorrelationInit'>
<arg declared_type='l_int32' name='components' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='maxheight' type='i'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_float32' name='weightfactor' type='f'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbCorrelationInitWithoutComponents'>
<arg declared_type='l_int32' name='components' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='maxheight' type='i'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_float32' name='weightfactor' type='f'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbDataDestroy'>
<arg declared_type='JBDATA**' name='pdata' type='^^{JbData}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='jbDataRead'>
<arg const='true' declared_type='char*' name='rootname' type='*'/>
<retval declared_type='JBDATA*' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
</function>
<function name='jbDataRender'>
<arg declared_type='JBDATA*' name='data' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='jbDataSave'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<retval declared_type='JBDATA*' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
</function>
<function name='jbDataWrite'>
<arg const='true' declared_type='char*' name='rootout' type='*'/>
<arg declared_type='JBDATA*' name='jbdata' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbGetComponents'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='components' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='maxheight' type='i'/>
<arg declared_type='BOXA**' name='pboxad' type='^^{Boxa}'/>
<arg declared_type='PIXA**' name='ppixad' type='^^{Pixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbGetLLCorners'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbGetULCorners'>
<arg declared_type='JBCLASSER*' name='classer' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbRankHaus'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_int32' name='components' type='i'/>
<arg const='true' declared_type='char*' name='rootname' type='*'/>
<arg declared_type='l_int32' name='firstpage' type='i'/>
<arg declared_type='l_int32' name='npages' type='i'/>
<arg declared_type='l_int32' name='renderflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbRankHausInit'>
<arg declared_type='l_int32' name='components' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='maxheight' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbTemplatesFromComposites'>
<arg declared_type='PIXA*' name='pixac' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='jbWordsInTextlines'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='maxheight' type='i'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_float32' name='weight' type='f'/>
<arg declared_type='NUMA**' name='pnatl' type='^^{Numa}'/>
<arg declared_type='l_int32' name='firstpage' type='i'/>
<arg declared_type='l_int32' name='npages' type='i'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='join_pieces'>
<arg declared_type='struct TBLOB*' name='piece_blobs' type='^{TBLOB=??????????????}'/>
<arg declared_type='SEAMS' name='seams' type='i'/>
<arg declared_type='inT16' name='start' type='s'/>
<arg declared_type='inT16' name='end' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='join_two_seams'>
<arg declared_type='SEAM*' name='seam1' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='SEAM*' name='seam2' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<retval declared_type='SEAM*' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
</function>
<function name='kernelCopy'>
<arg declared_type='L_KERNEL*' name='kels' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreate'>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreateFromFile'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreateFromPix'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreateFromString'>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<arg const='true' declared_type='char*' name='kdata' type='*'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelDestroy'>
<arg declared_type='L_KERNEL**' name='pkel' type='^^{L_Kernel}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kernelDisplayInPix'>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='gthick' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='kernelGetElement'>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelGetMinMax'>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_float32*' name='pmin' type='^f'/>
<arg declared_type='l_float32*' name='pmax' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelGetParameters'>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32*' name='psy' type='^i'/>
<arg declared_type='l_int32*' name='psx' type='^i'/>
<arg declared_type='l_int32*' name='pcy' type='^i'/>
<arg declared_type='l_int32*' name='pcx' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelGetSum'>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_float32*' name='psum' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelInvert'>
<arg declared_type='L_KERNEL*' name='kels' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelNormalize'>
<arg declared_type='L_KERNEL*' name='kels' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_float32' name='normsum' type='f'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelRead'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelSetElement'>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelSetOrigin'>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelWrite'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_binaryCopy'>
<arg declared_type='l_uint8*' name='datas' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_binaryRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_binaryReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_binaryWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg const='true' declared_type='char*' name='operation' type='*'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='size_t' name='nbytes' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaAppendData'>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='l_uint8*' name='newdata' type='*'/>
<arg declared_type='size_t' name='newbytes' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaAppendString'>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='char*' name='str' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaCopy'>
<arg declared_type='L_BYTEA*' name='bas' type='^{L_Bytea=IIi*}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaCopyData'>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_byteaCreate'>
<arg declared_type='size_t' name='nbytes' type='L'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaDestroy'>
<arg declared_type='L_BYTEA**' name='pba' type='^^{L_Bytea}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_byteaExtendArrayToSize'>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaFindEachSequence'>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='l_uint8*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='seqlen' type='i'/>
<arg declared_type='L_DNA**' name='pda' type='^^{L_Dna}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaGetData'>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_byteaGetSize'>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<retval declared_type='size_t' type='L'/>
</function>
<function name='l_byteaInitFromFile'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaInitFromMem'>
<arg declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaInitFromStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaJoin'>
<arg declared_type='L_BYTEA*' name='ba1' type='^{L_Bytea=IIi*}'/>
<arg declared_type='L_BYTEA**' name='pba2' type='^^{L_Bytea}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaSplit'>
<arg declared_type='L_BYTEA*' name='ba1' type='^{L_Bytea=IIi*}'/>
<arg declared_type='size_t' name='splitloc' type='L'/>
<arg declared_type='L_BYTEA**' name='pba2' type='^^{L_Bytea}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaWrite'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='size_t' name='startloc' type='L'/>
<arg declared_type='size_t' name='endloc' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_BYTEA*' name='ba' type='^{L_Bytea=IIi*}'/>
<arg declared_type='size_t' name='startloc' type='L'/>
<arg declared_type='size_t' name='endloc' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_chooseDisplayProg'>
<arg declared_type='l_int32' name='selection' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_clearDataBit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_clearDataDibit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_clearDataQbit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_dnaAddNumber'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_float64' name='val' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaChangeRefcount'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaClone'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaConvertToNuma'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='l_dnaCopy'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaCopyXParameters'>
<arg declared_type='L_DNA*' name='dad' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='L_DNA*' name='das' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaCreateFromDArray'>
<arg declared_type='l_float64*' name='darray' type='^d'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaCreateFromIArray'>
<arg declared_type='l_int32*' name='iarray' type='^i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaDestroy'>
<arg declared_type='L_DNA**' name='pda' type='^^{L_Dna}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_dnaEmpty'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaExtendArray'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaGetCount'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaGetDArray'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_float64*' type='^d'/>
</function>
<function name='l_dnaGetDValue'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float64*' name='pval' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaGetIArray'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='l_dnaGetIValue'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='pival' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaGetRefcount'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaGetXParameters'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_float64*' name='pstartx' type='^d'/>
<arg declared_type='l_float64*' name='pdelx' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaInsertNumber'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float64' name='val' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaMakeDelta'>
<arg declared_type='L_DNA*' name='das' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaMakeSequence'>
<arg declared_type='l_float64' name='startval' type='d'/>
<arg declared_type='l_float64' name='increment' type='d'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaRemoveNumber'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaReplaceNumber'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float64' name='val' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaSetCount'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='newcount' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaSetValue'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float64' name='val' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaSetXParameters'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_float64' name='startx' type='d'/>
<arg declared_type='l_float64' name='delx' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaShiftValue'>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float64' name='diff' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaAddDna'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaAddNumber'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float64' name='val' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='L_DNAA*' type='^{L_Dnaa=ii^^{L_Dna}}'/>
</function>
<function name='l_dnaaDestroy'>
<arg declared_type='L_DNAA**' name='pdaa' type='^^{L_Dnaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_dnaaExtendArray'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaGetCount'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaGetDna'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='l_dnaaGetDnaCount'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaGetNumberCount'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaGetValue'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<arg declared_type='l_int32' name='i' type='i'/>
<arg declared_type='l_int32' name='j' type='i'/>
<arg declared_type='l_float64*' name='pval' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='L_DNAA*' type='^{L_Dnaa=ii^^{L_Dna}}'/>
</function>
<function name='l_dnaaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_DNAA*' type='^{L_Dnaa=ii^^{L_Dna}}'/>
</function>
<function name='l_dnaaReplaceDna'>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='L_DNA*' name='da' type='^{L_Dna=iiidd^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_dnaaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_DNAA*' name='daa' type='^{L_Dnaa=ii^^{L_Dna}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_error'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_errorFloat'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_float32' name='fval' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_errorInt'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_int32' name='ival' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_errorString'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_generateFlateData'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='l_int32' name='ascii85flag' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='l_generateG4Data'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='l_int32' name='ascii85flag' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='l_generateJpegData'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='l_int32' name='ascii85flag' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='l_getCurrentTime'>
<arg declared_type='l_int32*' name='sec' type='^i'/>
<arg declared_type='l_int32*' name='usec' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_getDataBit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataByte'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataDibit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataFourBytes'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataQbit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataTwoBytes'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getFormattedDate'>
<retval declared_type='char*' type='*'/>
</function>
<function name='l_info'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoFloat'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_float32' name='fval' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoFloat2'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_float32' name='fval1' type='f'/>
<arg declared_type='l_float32' name='fval2' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoInt'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_int32' name='ival' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoInt2'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_int32' name='ival1' type='i'/>
<arg declared_type='l_int32' name='ival2' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoString'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_jpegSetNoChromaSampling'>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pdfSetDateAndVersion'>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pdfSetG4ImageMask'>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetStrip16To8'>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetStripAlpha'>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetWriteAlpha'>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetZlibCompression'>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_productMat2'>
<arg declared_type='l_float32*' name='mat1' type='^f'/>
<arg declared_type='l_float32*' name='mat2' type='^f'/>
<arg declared_type='l_float32*' name='matd' type='^f'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_productMat3'>
<arg declared_type='l_float32*' name='mat1' type='^f'/>
<arg declared_type='l_float32*' name='mat2' type='^f'/>
<arg declared_type='l_float32*' name='mat3' type='^f'/>
<arg declared_type='l_float32*' name='matd' type='^f'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_productMat4'>
<arg declared_type='l_float32*' name='mat1' type='^f'/>
<arg declared_type='l_float32*' name='mat2' type='^f'/>
<arg declared_type='l_float32*' name='mat3' type='^f'/>
<arg declared_type='l_float32*' name='mat4' type='^f'/>
<arg declared_type='l_float32*' name='matd' type='^f'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_productMatVec'>
<arg declared_type='l_float32*' name='mat' type='^f'/>
<arg declared_type='l_float32*' name='vecs' type='^f'/>
<arg declared_type='l_float32*' name='vecd' type='^f'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_psWriteBoundingBox'>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setAlphaMaskBorder'>
<arg declared_type='l_float32' name='val1' type='f'/>
<arg declared_type='l_float32' name='val2' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setConvolveSampling'>
<arg declared_type='l_int32' name='xfact' type='i'/>
<arg declared_type='l_int32' name='yfact' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataBit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataBitVal'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataByte'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataDibit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataFourBytes'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataQbit'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataTwoBytes'>
<arg declared_type='void*' name='line' type='^v'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warning'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningFloat'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_float32' name='fval' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningFloat2'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_float32' name='fval1' type='f'/>
<arg declared_type='l_float32' name='fval2' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningInt'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_int32' name='ival' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningInt2'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_int32' name='ival1' type='i'/>
<arg declared_type='l_int32' name='ival2' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningString'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lept_calloc'>
<arg declared_type='size_t' name='nmemb' type='L'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='lept_cp'>
<arg const='true' declared_type='char*' name='srcfile' type='*'/>
<arg const='true' declared_type='char*' name='newfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_direxists'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg declared_type='l_int32*' name='pexists' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lept_fclose'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_fopen'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg const='true' declared_type='char*' name='mode' type='*'/>
<retval declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='lept_free'>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lept_mkdir'>
<arg const='true' declared_type='char*' name='subdir' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_mv'>
<arg const='true' declared_type='char*' name='srcfile' type='*'/>
<arg const='true' declared_type='char*' name='newfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_rm'>
<arg const='true' declared_type='char*' name='subdir' type='*'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_rmdir'>
<arg const='true' declared_type='char*' name='subdir' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_roundftoi'>
<arg declared_type='l_float32' name='fval' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapAdd'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<arg declared_type='void*' name='item' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapCreate'>
<arg declared_type='l_int32' name='nalloc' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
</function>
<function name='lheapDestroy'>
<arg declared_type='L_HEAP**' name='plh' type='^^{L_Heap}'/>
<arg declared_type='l_int32' name='freeflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lheapExtendArray'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapGetCount'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapPrint'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapRemove'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='lheapSort'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapSortStrictOrder'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapSwapDown'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapSwapUp'>
<arg declared_type='L_HEAP*' name='lh' type='^{L_Heap=ii^^vi}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lineEndianByteSwap'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='linearInterpolatePixelColor'>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32' name='y' type='f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<arg declared_type='l_uint32*' name='pval' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='linearInterpolatePixelFloat'>
<arg declared_type='l_float32*' name='datas' type='^f'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32' name='y' type='f'/>
<arg declared_type='l_float32' name='inval' type='f'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='linearInterpolatePixelGray'>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32' name='y' type='f'/>
<arg declared_type='l_int32' name='grayval' type='i'/>
<arg declared_type='l_int32*' name='pval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listAddToHead'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listAddToTail'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<arg declared_type='DLLIST**' name='ptail' type='^^{DoubleLinkedList}'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listDestroy'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='listFindElement'>
<arg declared_type='DLLIST*' name='head' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
</function>
<function name='listFindTail'>
<arg declared_type='DLLIST*' name='head' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<retval declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
</function>
<function name='listGetCount'>
<arg declared_type='DLLIST*' name='head' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listInsertAfter'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<arg declared_type='DLLIST*' name='elem' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listInsertBefore'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<arg declared_type='DLLIST*' name='elem' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listJoin'>
<arg declared_type='DLLIST**' name='phead1' type='^^{DoubleLinkedList}'/>
<arg declared_type='DLLIST**' name='phead2' type='^^{DoubleLinkedList}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listRemoveElement'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<arg declared_type='DLLIST*' name='elem' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='listRemoveFromHead'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='listRemoveFromTail'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<arg declared_type='DLLIST**' name='ptail' type='^^{DoubleLinkedList}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='listReverse'>
<arg declared_type='DLLIST**' name='phead' type='^^{DoubleLinkedList}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='locateOutsideSeedPixel'>
<arg declared_type='l_int32' name='fpx' type='i'/>
<arg declared_type='l_int32' name='fpy' type='i'/>
<arg declared_type='l_int32' name='spx' type='i'/>
<arg declared_type='l_int32' name='spy' type='i'/>
<arg declared_type='l_int32*' name='pxs' type='^i'/>
<arg declared_type='l_int32*' name='pys' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='locatePtRadially'>
<arg declared_type='l_int32' name='xr' type='i'/>
<arg declared_type='l_int32' name='yr' type='i'/>
<arg declared_type='l_float64' name='dist' type='d'/>
<arg declared_type='l_float64' name='radang' type='d'/>
<arg declared_type='l_float64*' name='px' type='^d'/>
<arg declared_type='l_float64*' name='py' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueAdd'>
<arg declared_type='L_QUEUE*' name='lq' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<arg declared_type='void*' name='item' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueCreate'>
<arg declared_type='l_int32' name='nalloc' type='i'/>
<retval declared_type='L_QUEUE*' type='^{L_Queue=iii^^v^{L_Stack}}'/>
</function>
<function name='lqueueDestroy'>
<arg declared_type='L_QUEUE**' name='plq' type='^^{L_Queue}'/>
<arg declared_type='l_int32' name='freeflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lqueueExtendArray'>
<arg declared_type='L_QUEUE*' name='lq' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueGetCount'>
<arg declared_type='L_QUEUE*' name='lq' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueuePrint'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_QUEUE*' name='lq' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueRemove'>
<arg declared_type='L_QUEUE*' name='lq' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='lstackAdd'>
<arg declared_type='L_STACK*' name='lstack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg declared_type='void*' name='item' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackCreate'>
<arg declared_type='l_int32' name='nalloc' type='i'/>
<retval declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</function>
<function name='lstackDestroy'>
<arg declared_type='L_STACK**' name='plstack' type='^^{L_Stack}'/>
<arg declared_type='l_int32' name='freeflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lstackExtendArray'>
<arg declared_type='L_STACK*' name='lstack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackGetCount'>
<arg declared_type='L_STACK*' name='lstack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackPrint'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='L_STACK*' name='lstack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackRemove'>
<arg declared_type='L_STACK*' name='lstack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='make8To1DitherTables'>
<arg declared_type='l_int32**' name='ptabval' type='^^i'/>
<arg declared_type='l_int32**' name='ptab38' type='^^i'/>
<arg declared_type='l_int32**' name='ptab14' type='^^i'/>
<arg declared_type='l_int32' name='lowerclip' type='i'/>
<arg declared_type='l_int32' name='upperclip' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='make8To2DitherTables'>
<arg declared_type='l_int32**' name='ptabval' type='^^i'/>
<arg declared_type='l_int32**' name='ptab38' type='^^i'/>
<arg declared_type='l_int32**' name='ptab14' type='^^i'/>
<arg declared_type='l_int32' name='cliptoblack' type='i'/>
<arg declared_type='l_int32' name='cliptowhite' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeDoGKernel'>
<arg declared_type='l_int32' name='halfheight' type='i'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='stdev' type='f'/>
<arg declared_type='l_float32' name='ratio' type='f'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='makeExpandTab2x'>
<retval declared_type='l_uint16*' type='^S'/>
</function>
<function name='makeExpandTab4x'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeExpandTab8x'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeFlatKernel'>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='makeGaussianKernel'>
<arg declared_type='l_int32' name='halfheight' type='i'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='stdev' type='f'/>
<arg declared_type='l_float32' name='max' type='f'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='makeGaussianKernelSep'>
<arg declared_type='l_int32' name='halfheight' type='i'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='stdev' type='f'/>
<arg declared_type='l_float32' name='max' type='f'/>
<arg declared_type='L_KERNEL**' name='pkelx' type='^^{L_Kernel}'/>
<arg declared_type='L_KERNEL**' name='pkely' type='^^{L_Kernel}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeGrayQuantColormapArb'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='PIXCMAP**' name='pcmap' type='^^{PixColormap}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeGrayQuantIndexTable'>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeGrayQuantTableArb'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32**' name='ptab' type='^^i'/>
<arg declared_type='PIXCMAP**' name='pcmap' type='^^{PixColormap}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeGrayQuantTargetTable'>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeLogBase2Tab'>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='makeMSBitLocTab'>
<arg declared_type='l_int32' name='bitval' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeOrientDecision'>
<arg declared_type='l_float32' name='upconf' type='f'/>
<arg declared_type='l_float32' name='leftconf' type='f'/>
<arg declared_type='l_float32' name='minupconf' type='f'/>
<arg declared_type='l_float32' name='minratio' type='f'/>
<arg declared_type='l_int32*' name='porient' type='^i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makePixelCentroidTab8'>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makePixelSumTab8'>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeRGBToIndexTables'>
<arg declared_type='l_uint32**' name='prtab' type='^^I'/>
<arg declared_type='l_uint32**' name='pgtab' type='^^I'/>
<arg declared_type='l_uint32**' name='pbtab' type='^^I'/>
<arg declared_type='l_int32' name='cqlevels' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeReverseByteTab1'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeReverseByteTab2'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeReverseByteTab4'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeSubsampleTab2x'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeSumTabSG2'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeSumTabSG3'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeSumTabSG4'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeValTabSG2'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG3'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG4'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG6'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG8'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='make_edgept'>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='struct EDGEPT*' name='next' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='prev' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='struct EDGEPT*' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
</function>
<function name='morphSequenceVerify'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='multConstAccumulateLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='l_uint32' name='offset' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='multConstantGrayLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='nbytesInFile'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='size_t' type='L'/>
</function>
<function name='new_seam'>
<arg declared_type='PRIORITY' name='priority' type='f'/>
<arg const='true' declared_type='struct TPOINT' type='{TPOINT=??}'/>
<retval declared_type='SEAM*' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
</function>
<function name='new_seam_list'>
<retval declared_type='SEAMS' type='i'/>
</function>
<function name='new_split'>
<arg declared_type='struct EDGEPT*' name='point1' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='point2' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='SPLIT*' type='^{split_record=^{EDGEPT}^{EDGEPT}}'/>
</function>
<function name='newseam'>
<retval declared_type='SEAM*' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
</function>
<function name='next'>
<retval declared_type='int' type='i'/>
</function>
<function name='nextOnPixelInRaster'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xstart' type='i'/>
<arg declared_type='l_int32' name='ystart' type='i'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='nextOnPixelInRasterLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_int32' name='xstart' type='i'/>
<arg declared_type='l_int32' name='ystart' type='i'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='non_0_digit'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='BOOL8' type='C'/>
</function>
<function name='numa2dAddNumber'>
<arg declared_type='NUMA2D*' name='na2d' type='^{Numa2d=iii^^^{Numa}}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dCreate'>
<arg declared_type='l_int32' name='nrows' type='i'/>
<arg declared_type='l_int32' name='ncols' type='i'/>
<arg declared_type='l_int32' name='initsize' type='i'/>
<retval declared_type='NUMA2D*' type='^{Numa2d=iii^^^{Numa}}'/>
</function>
<function name='numa2dDestroy'>
<arg declared_type='NUMA2D**' name='pna2d' type='^^{Numa2d}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numa2dGetCount'>
<arg declared_type='NUMA2D*' name='na2d' type='^{Numa2d=iii^^^{Numa}}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dGetFValue'>
<arg declared_type='NUMA2D*' name='na2d' type='^{Numa2d=iii^^^{Numa}}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dGetIValue'>
<arg declared_type='NUMA2D*' name='na2d' type='^{Numa2d=iii^^^{Numa}}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='pval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dGetNuma'>
<arg declared_type='NUMA2D*' name='na2d' type='^{Numa2d=iii^^^{Numa}}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaAddBorder'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaAddNumber'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaAddSpecifiedBorder'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaArithOp'>
<arg declared_type='NUMA*' name='nad' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='na1' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='na2' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaBinSort'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaChangeRefcount'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaClipToInterval'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='first' type='i'/>
<arg declared_type='l_int32' name='last' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaClone'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaClose'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaContrastTRC'>
<arg declared_type='l_float32' name='factor' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaConvertToDna'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='L_DNA*' type='^{L_Dna=iiidd^d}'/>
</function>
<function name='numaConvertToInt'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCopy'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCopyXParameters'>
<arg declared_type='NUMA*' name='nad' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaCountReversals'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='minreversal' type='f'/>
<arg declared_type='l_int32*' name='pnr' type='^i'/>
<arg declared_type='l_float32*' name='pnrpl' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCreateFromFArray'>
<arg declared_type='l_float32*' name='farray' type='^f'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCreateFromIArray'>
<arg declared_type='l_int32*' name='iarray' type='^i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCrossingsByPeaks'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='delta' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCrossingsByThreshold'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaDestroy'>
<arg declared_type='NUMA**' name='pna' type='^^{Numa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numaDifferentiateInterval'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='x0' type='f'/>
<arg declared_type='l_float32' name='x1' type='f'/>
<arg declared_type='l_int32' name='npts' type='i'/>
<arg declared_type='NUMA**' name='pnadx' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnady' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaDilate'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaDiscretizeRankAndIntensity'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='NUMA**' name='pnarbin' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnam' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnar' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnabb' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaEmpty'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaEqualizeTRC'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaErode'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaEvalBestHaarParameters'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='relweight' type='f'/>
<arg declared_type='l_int32' name='nwidth' type='i'/>
<arg declared_type='l_int32' name='nshift' type='i'/>
<arg declared_type='l_float32' name='minwidth' type='f'/>
<arg declared_type='l_float32' name='maxwidth' type='f'/>
<arg declared_type='l_float32*' name='pbestwidth' type='^f'/>
<arg declared_type='l_float32*' name='pbestshift' type='^f'/>
<arg declared_type='l_float32*' name='pbestscore' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaEvalHaarSum'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='width' type='f'/>
<arg declared_type='l_float32' name='shift' type='f'/>
<arg declared_type='l_float32' name='relweight' type='f'/>
<arg declared_type='l_float32*' name='pscore' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaExtendArray'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaFindExtrema'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='delta' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaFindPeaks'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='nmax' type='i'/>
<arg declared_type='l_float32 (*)(Fract)' function_pointer='true' type='^?'>
<arg declared_type='Fract' type='l'/>
<retval declared_type='l_float32' type='f'/>
</arg>
<arg declared_type='l_float32' name='fract2' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaFitMax'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pmaxval' type='^f'/>
<arg declared_type='NUMA*' name='naloc' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pmaxloc' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGammaTRC'>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_int32' name='minval' type='i'/>
<arg declared_type='l_int32' name='maxval' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetBinSortIndex'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetBinnedMedian'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32*' name='pval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetCount'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetCountRelativeToZero'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetEdgeValues'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='edge' type='i'/>
<arg declared_type='l_int32*' name='pstart' type='^i'/>
<arg declared_type='l_int32*' name='pend' type='^i'/>
<arg declared_type='l_int32*' name='psign' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetFArray'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='numaGetFValue'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetHistogramStats'>
<arg declared_type='NUMA*' name='nahisto' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='startx' type='f'/>
<arg declared_type='l_float32' name='deltax' type='f'/>
<arg declared_type='l_float32*' name='pxmean' type='^f'/>
<arg declared_type='l_float32*' name='pxmedian' type='^f'/>
<arg declared_type='l_float32*' name='pxmode' type='^f'/>
<arg declared_type='l_float32*' name='pxvariance' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetHistogramStatsOnInterval'>
<arg declared_type='NUMA*' name='nahisto' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='startx' type='f'/>
<arg declared_type='l_float32' name='deltax' type='f'/>
<arg declared_type='l_int32' name='ifirst' type='i'/>
<arg declared_type='l_int32' name='ilast' type='i'/>
<arg declared_type='l_float32*' name='pxmean' type='^f'/>
<arg declared_type='l_float32*' name='pxmedian' type='^f'/>
<arg declared_type='l_float32*' name='pxmode' type='^f'/>
<arg declared_type='l_float32*' name='pxvariance' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetIArray'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='numaGetIValue'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='pival' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMax'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pmaxval' type='^f'/>
<arg declared_type='l_int32*' name='pimaxloc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMedian'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMedianVariation'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pmedval' type='^f'/>
<arg declared_type='l_float32*' name='pmedvar' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMin'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pminval' type='^f'/>
<arg declared_type='l_int32*' name='piminloc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMode'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetNonzeroRange'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='eps' type='f'/>
<arg declared_type='l_int32*' name='pfirst' type='^i'/>
<arg declared_type='l_int32*' name='plast' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetPartialSums'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetRankBinValues'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='NUMA**' name='pnarbin' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnam' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetRankValue'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='NUMA*' name='nasort' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='usebins' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetRefcount'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetSortIndex'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetSpanValues'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='span' type='i'/>
<arg declared_type='l_int32*' name='pstart' type='^i'/>
<arg declared_type='l_int32*' name='pend' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetStatsUsingHistogram'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='maxbins' type='i'/>
<arg declared_type='l_float32*' name='pmin' type='^f'/>
<arg declared_type='l_float32*' name='pmax' type='^f'/>
<arg declared_type='l_float32*' name='pmean' type='^f'/>
<arg declared_type='l_float32*' name='pvariance' type='^f'/>
<arg declared_type='l_float32*' name='pmedian' type='^f'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_float32*' name='prval' type='^f'/>
<arg declared_type='NUMA**' name='phisto' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetSum'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='psum' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetSumOnInterval'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='first' type='i'/>
<arg declared_type='l_int32' name='last' type='i'/>
<arg declared_type='l_float32*' name='psum' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetXParameters'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32*' name='pstartx' type='^f'/>
<arg declared_type='l_float32*' name='pdelx' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHasOnlyIntegers'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='maxsamples' type='i'/>
<arg declared_type='l_int32*' name='pallints' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHashAdd'>
<arg declared_type='NUMAHASH*' name='nahash' type='^{NumaHash=ii^^{Numa}}'/>
<arg declared_type='l_uint32' name='key' type='I'/>
<arg declared_type='l_float32' name='value' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHashCreate'>
<arg declared_type='l_int32' name='nbuckets' type='i'/>
<arg declared_type='l_int32' name='initsize' type='i'/>
<retval declared_type='NUMAHASH*' type='^{NumaHash=ii^^{Numa}}'/>
</function>
<function name='numaHashDestroy'>
<arg declared_type='NUMAHASH**' name='pnahash' type='^^{NumaHash}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numaHashGetNuma'>
<arg declared_type='NUMAHASH*' name='nahash' type='^{NumaHash=ii^^{Numa}}'/>
<arg declared_type='l_uint32' name='key' type='I'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaHistogramGetRankFromVal'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='rval' type='f'/>
<arg declared_type='l_float32*' name='prank' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHistogramGetValFromRank'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_float32*' name='prval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInsertNumber'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaIntegrateInterval'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='x0' type='f'/>
<arg declared_type='l_float32' name='x1' type='f'/>
<arg declared_type='l_int32' name='npts' type='i'/>
<arg declared_type='l_float32*' name='psum' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateArbxInterval'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_float32' name='x0' type='f'/>
<arg declared_type='l_float32' name='x1' type='f'/>
<arg declared_type='l_int32' name='npts' type='i'/>
<arg declared_type='NUMA**' name='pnadx' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnady' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateArbxVal'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_float32' name='xval' type='f'/>
<arg declared_type='l_float32*' name='pyval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateEqxInterval'>
<arg declared_type='l_float32' name='startx' type='f'/>
<arg declared_type='l_float32' name='deltax' type='f'/>
<arg declared_type='NUMA*' name='nasy' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_float32' name='x0' type='f'/>
<arg declared_type='l_float32' name='x1' type='f'/>
<arg declared_type='l_int32' name='npts' type='i'/>
<arg declared_type='NUMA**' name='pnax' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnay' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateEqxVal'>
<arg declared_type='l_float32' name='startx' type='f'/>
<arg declared_type='l_float32' name='deltax' type='f'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_float32' name='xval' type='f'/>
<arg declared_type='l_float32*' name='pyval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInvert'>
<arg declared_type='NUMA*' name='nad' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaIsSorted'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='l_int32*' name='psorted' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaJoin'>
<arg declared_type='NUMA*' name='nad' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='istart' type='i'/>
<arg declared_type='l_int32' name='iend' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaLogicalOp'>
<arg declared_type='NUMA*' name='nad' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='na1' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='na2' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaLowPassIntervals'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_float32' name='maxn' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeAbsValue'>
<arg declared_type='NUMA*' name='nad' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeConstant'>
<arg declared_type='l_float32' name='val' type='f'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeDelta'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeHistogram'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='maxbins' type='i'/>
<arg declared_type='l_int32*' name='pbinsize' type='^i'/>
<arg declared_type='l_int32*' name='pbinstart' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeHistogramAuto'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='maxbins' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeHistogramClipped'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='binsize' type='f'/>
<arg declared_type='l_float32' name='maxsize' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeRankFromHistogram'>
<arg declared_type='l_float32' name='startx' type='f'/>
<arg declared_type='l_float32' name='deltax' type='f'/>
<arg declared_type='NUMA*' name='nasy' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='npts' type='i'/>
<arg declared_type='NUMA**' name='pnax' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnay' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaMakeSequence'>
<arg declared_type='l_float32' name='startval' type='f'/>
<arg declared_type='l_float32' name='increment' type='f'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeThresholdIndicator'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaNormalizeHistogram'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='area' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaOpen'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaPseudorandomSequence'>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='seed' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaQuantizeCrossingsByWidth'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='binfract' type='f'/>
<arg declared_type='NUMA**' name='pnaehist' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnaohist' type='^^{Numa}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaQuantizeCrossingsByWindow'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='ratio' type='f'/>
<arg declared_type='l_float32*' name='pwidth' type='^f'/>
<arg declared_type='l_float32*' name='pfirstloc' type='^f'/>
<arg declared_type='NUMA**' name='pnac' type='^^{Numa}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRandomPermutation'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='seed' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRebinHistogram'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='newsize' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRemoveBorder'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRemoveNumber'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaReplaceNumber'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSelectCrossingThreshold'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='estthresh' type='f'/>
<arg declared_type='l_float32*' name='pbestthresh' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSetCount'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='newcount' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSetValue'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSetXParameters'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='startx' type='f'/>
<arg declared_type='l_float32' name='delx' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaShiftValue'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32' name='diff' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSort'>
<arg declared_type='NUMA*' name='naout' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nain' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaSortByIndex'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='naindex' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaSortPair'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='NUMA**' name='pnasx' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnasy' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSplitDistribution'>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='scorefract' type='f'/>
<arg declared_type='l_int32*' name='psplitindex' type='^i'/>
<arg declared_type='l_float32*' name='pave1' type='^f'/>
<arg declared_type='l_float32*' name='pave2' type='^f'/>
<arg declared_type='l_float32*' name='pnum1' type='^f'/>
<arg declared_type='l_float32*' name='pnum2' type='^f'/>
<arg declared_type='NUMA**' name='pnascore' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSubsample'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='subfactor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaThresholdEdges'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='thresh1' type='f'/>
<arg declared_type='l_float32' name='thresh2' type='f'/>
<arg declared_type='l_float32' name='maxn' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaTransform'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_float32' name='shift' type='f'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaUniformSampling'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='nsamp' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaWindowedMean'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaWindowedMeanSquare'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaWindowedStats'>
<arg declared_type='NUMA*' name='nas' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='NUMA**' name='pnam' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnams' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnav' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnarv' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaWindowedVariance'>
<arg declared_type='NUMA*' name='nam' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nams' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA**' name='pnav' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnarv' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaAddNuma'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaAddNumber'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaCompareImagesByBoxes'>
<arg declared_type='NUMAA*' name='naa1' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='NUMAA*' name='naa2' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='nperline' type='i'/>
<arg declared_type='l_int32' name='nreq' type='i'/>
<arg declared_type='l_int32' name='maxshiftx' type='i'/>
<arg declared_type='l_int32' name='maxshifty' type='i'/>
<arg declared_type='l_int32' name='delx' type='i'/>
<arg declared_type='l_int32' name='dely' type='i'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='numaaDestroy'>
<arg declared_type='NUMAA**' name='pnaa' type='^^{Numaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numaaExtendArray'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaFlattenToNuma'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaaGetCount'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaGetNuma'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaaGetNumaCount'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaGetNumberCount'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaGetPtrArray'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='NUMA**' type='^^{Numa}'/>
</function>
<function name='numaaGetValue'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='i' type='i'/>
<arg declared_type='l_int32' name='j' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='numaaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='numaaReplaceNuma'>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='orientation_and_script_detection'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='orientation_id'>
<retval declared_type='int' type='i'/>
</function>
<function name='os_detect'>
<arg declared_type='int*' name='port_blocks' type='^i'/>
<arg declared_type='struct OSResults*' name='osr' type='^{OSResults=??????[4f][4f]^i{OSBestResult=????}}'/>
<arg declared_type='int' name='tesseract' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='os_detect_blob'>
<arg declared_type='int*' name='bbox' type='^i'/>
<arg declared_type='int*' name='o' type='^i'/>
<arg declared_type='int*' name='s' type='^i'/>
<arg declared_type='struct OSResults*' type='^{OSResults=??????[4f][4f]^i{OSBestResult=????}}'/>
<arg declared_type='int' name='tesseract' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='os_detect_blobs'>
<arg declared_type='int*' name='blob_list' type='^i'/>
<arg declared_type='struct OSResults*' name='osr' type='^{OSResults=??????[4f][4f]^i{OSBestResult=????}}'/>
<arg declared_type='int' name='tesseract' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='outlines'>
<retval declared_type='int' type='i'/>
</function>
<function name='parseForProtos'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='prestring' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='parseStringForNumbers'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg const='true' declared_type='char*' name='seps' type='*'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pathJoin'>
<arg const='true' declared_type='char*' name='dir' type='*'/>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pause_continue' variadic='true'>
<arg const='true' declared_type='char*' name='format' type='*'/>
<retval declared_type='BOOL8' type='C'/>
</function>
<function name='pgeditor_msg'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pgeditor_show_point'>
<arg declared_type='struct SVEvent*' name='event' type='^{SVEvent=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixAbsDifference'>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAccumulate'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddBlackBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='npix' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='npix' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddBorderGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddConstantGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddGray'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddGrayColormap8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddMinimalGrayColormap8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddMirroredBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddMixedBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddRepeatedBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddSingleTextblock'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg const='true' declared_type='char*' name='textstr' type='*'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<arg declared_type='l_int32' name='location' type='i'/>
<arg declared_type='l_int32*' name='poverflow' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddText'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='textstring' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddWithIndicator'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAffine'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaGammaXform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaWithAlpha'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineSampled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineSampledPta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineSequential'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='bw' type='i'/>
<arg declared_type='l_int32' name='bh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAlphaBlendUniform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='color' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAnd'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyInvBackgroundGrayMap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyInvBackgroundRGBMap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixmr' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixmg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixmb' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyLocalThreshold'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixth' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='redfactor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyVariableGrayMap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='target' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAssignToNearestColor'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32*' name='countarray' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAverageIntensityProfile'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='first' type='i'/>
<arg declared_type='l_int32' name='last' type='i'/>
<arg declared_type='l_int32' name='factor1' type='i'/>
<arg declared_type='l_int32' name='factor2' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixAverageOnLine'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='pixBackgroundNorm'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBackgroundNormFlex'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBackgroundNormGrayArray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormGrayArrayMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBackgroundNormRGBArrays'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='PIX**' name='ppixr' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixg' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixb' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormRGBArraysMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<arg declared_type='PIX**' name='ppixr' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixg' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixb' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormSimple'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBestCorrelation'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='area1' type='i'/>
<arg declared_type='l_int32' name='area2' type='i'/>
<arg declared_type='l_int32' name='etransx' type='i'/>
<arg declared_type='l_int32' name='etransy' type='i'/>
<arg declared_type='l_int32' name='maxshift' type='i'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<arg declared_type='l_int32*' name='pdelx' type='^i'/>
<arg declared_type='l_int32*' name='pdely' type='^i'/>
<arg declared_type='l_float32*' name='pscore' type='^f'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBilinear'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaGammaXform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaWithAlpha'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearSampled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearSampledPta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlend'>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendBackgroundToColor'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_uint32' name='color' type='I'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_int32' name='minval' type='i'/>
<arg declared_type='l_int32' name='maxval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendBoxaRandom'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixb' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='sindex' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBlendColor'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='transparent' type='i'/>
<arg declared_type='l_uint32' name='transpix' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendColorByChannel'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='rfract' type='f'/>
<arg declared_type='l_float32' name='gfract' type='f'/>
<arg declared_type='l_float32' name='bfract' type='f'/>
<arg declared_type='l_int32' name='transparent' type='i'/>
<arg declared_type='l_uint32' name='transpix' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendGray'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='transparent' type='i'/>
<arg declared_type='l_uint32' name='transpix' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendGrayAdapt'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='shift' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendGrayInverse'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendHardLight'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendInRect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBlendMask'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendWithGrayMask'>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconv'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvAccum'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixacc' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvGrayTile'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixacc' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvGrayUnnormalized'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvTiled'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<arg declared_type='l_int32' name='nx' type='i'/>
<arg declared_type='l_int32' name='ny' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockrank'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixacc' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlocksum'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixacc' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCensusTransform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='halfsize' type='i'/>
<arg declared_type='PIX*' name='pixacc' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCentroid'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='centtab' type='^i'/>
<arg declared_type='l_int32*' name='sumtab' type='^i'/>
<arg declared_type='l_float32*' name='pxave' type='^f'/>
<arg declared_type='l_float32*' name='pyave' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixChangeRefcount'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixChooseOutputFormat'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCleanupByteProcessing'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint8**' name='lineptrs' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClearAll'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClearInRect'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClearPixel'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClipBoxToEdges'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='boxs' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='lowthresh' type='i'/>
<arg declared_type='l_int32' name='highthresh' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<arg declared_type='BOX**' name='pboxd' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClipBoxToForeground'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='boxs' type='^{Box=iiiiI}'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<arg declared_type='BOX**' name='pboxd' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClipMasked'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_uint32' name='outval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixClipRectangle'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='BOX**' name='pboxc' type='^^{Box}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixClipToForeground'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<arg declared_type='BOX**' name='pbox' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClone'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixClose'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseCompBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseCompBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseCompBrickExtendDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseGeneralized'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseGray3'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseSafe'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseSafeBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseSafeCompBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorContent'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='rwhite' type='i'/>
<arg declared_type='l_int32' name='gwhite' type='i'/>
<arg declared_type='l_int32' name='bwhite' type='i'/>
<arg declared_type='l_int32' name='mingray' type='i'/>
<arg declared_type='PIX**' name='ppixr' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixg' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixb' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorFraction'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='darkthresh' type='i'/>
<arg declared_type='l_int32' name='lightthresh' type='i'/>
<arg declared_type='l_int32' name='diffthresh' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_float32*' name='ppixfract' type='^f'/>
<arg declared_type='l_float32*' name='pcolorfract' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorGrayCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorMagnitude'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='rwhite' type='i'/>
<arg declared_type='l_int32' name='gwhite' type='i'/>
<arg declared_type='l_int32' name='bwhite' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorMorphSequence'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='dispsep' type='i'/>
<arg declared_type='l_int32' name='dispy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorSegment'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='maxdist' type='i'/>
<arg declared_type='l_int32' name='maxcolors' type='i'/>
<arg declared_type='l_int32' name='selsize' type='i'/>
<arg declared_type='l_int32' name='finalcolors' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorSegmentClean'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='selsize' type='i'/>
<arg declared_type='l_int32*' name='countarray' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorSegmentCluster'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='maxdist' type='i'/>
<arg declared_type='l_int32' name='maxcolors' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorSegmentRemoveColors'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='finalcolors' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorizeGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='color' type='I'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorsForQuantization'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32*' name='pncolors' type='^i'/>
<arg declared_type='l_int32*' name='piscolor' type='^i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColumnStats'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='NUMA**' name='pnamean' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnamedian' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnamode' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnamodecount' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnavar' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnarootvar' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCombineMasked'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCombineMaskedGeneral'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareBinary'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg declared_type='l_float32*' name='pfract' type='^f'/>
<arg declared_type='PIX**' name='ppixdiff' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareGray'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg declared_type='l_int32' name='plottype' type='i'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<arg declared_type='l_float32*' name='pdiff' type='^f'/>
<arg declared_type='l_float32*' name='prmsdiff' type='^f'/>
<arg declared_type='PIX**' name='ppixdiff' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareGrayOrRGB'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg declared_type='l_int32' name='plottype' type='i'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<arg declared_type='l_float32*' name='pdiff' type='^f'/>
<arg declared_type='l_float32*' name='prmsdiff' type='^f'/>
<arg declared_type='PIX**' name='ppixdiff' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareRGB'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg declared_type='l_int32' name='plottype' type='i'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<arg declared_type='l_float32*' name='pdiff' type='^f'/>
<arg declared_type='l_float32*' name='prmsdiff' type='^f'/>
<arg declared_type='PIX**' name='ppixdiff' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareRankDifference'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixCompareTiled'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='PIX**' name='ppixdiff' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareWithTranslation'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32*' name='pdelx' type='^i'/>
<arg declared_type='l_int32*' name='pdely' type='^i'/>
<arg declared_type='l_float32*' name='pscore' type='^f'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConformsToRectangle'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='dist' type='i'/>
<arg declared_type='l_int32*' name='pconforms' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConnComp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA**' name='ppixa' type='^^{Pixa}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixConnCompBB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixConnCompPixa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA**' name='ppixa' type='^^{Pixa}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixContrastNorm'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='mindiff' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixContrastTRC'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixContrastTRCMasked'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert16To8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='whichbyte' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To16'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint16' name='val0' type='S'/>
<arg declared_type='l_uint16' name='val1' type='S'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To2'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='val0' type='i'/>
<arg declared_type='l_int32' name='val1' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To2Cmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To32'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='val0' type='I'/>
<arg declared_type='l_uint32' name='val1' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To4'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='val0' type='i'/>
<arg declared_type='l_int32' name='val1' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To4Cmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To8'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint8' name='val0' type='C'/>
<arg declared_type='l_uint8' name='val1' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert24To32'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert2To8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint8' name='val0' type='C'/>
<arg declared_type='l_uint8' name='val1' type='C'/>
<arg declared_type='l_uint8' name='val2' type='C'/>
<arg declared_type='l_uint8' name='val3' type='C'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert32To24'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert4To8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert8To16'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='leftshift' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert8To32'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertColorToSubpixelRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='l_int32' name='order' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertForPSWrap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToColormap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToColormap8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='mindepth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToFalseColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToSubpixelRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='l_int32' name='order' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertHSVToRGB'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertLossless'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='d' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToColormap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ditherflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='rwt' type='f'/>
<arg declared_type='l_float32' name='gwt' type='f'/>
<arg declared_type='l_float32' name='bwt' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToGrayFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToGrayMinMax'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToHSV'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToHue'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToLuminance'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToSaturation'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToValue'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToYUV'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo1'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='threshold' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo16'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo1BySampling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='threshold' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo32'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo32BySampling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo8BySampling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo8Or32'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<arg declared_type='l_int32' name='warnflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertToDPix'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ncomps' type='i'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='pixConvertToFPix'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ncomps' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiIii^f}'/>
</function>
<function name='pixConvertToPdf'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='L_PDF_DATA**' name='plpd' type='^^{L_Pdf_Data}'/>
<arg declared_type='l_int32' name='position' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToPdfData'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='L_PDF_DATA**' name='plpd' type='^^{L_Pdf_Data}'/>
<arg declared_type='l_int32' name='position' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToPdfDataSegmented'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToPdfSegmented'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToSubpixelRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='l_int32' name='order' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertYUVToRGB'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolve'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='normflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolveRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolveRGBSep'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_KERNEL*' name='kelx' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='L_KERNEL*' name='kely' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolveSep'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_KERNEL*' name='kelx' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='L_KERNEL*' name='kely' type='^{L_Kernel=iiii^^f}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='normflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCopy'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCopyBorder'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCopyColormap'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyDimensions'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyInputFormat'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyResolution'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyText'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCorrelationBinary'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCorrelationScore'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='area1' type='i'/>
<arg declared_type='l_int32' name='area2' type='i'/>
<arg declared_type='l_float32' name='delx' type='f'/>
<arg declared_type='l_float32' name='dely' type='f'/>
<arg declared_type='l_int32' name='maxdiffw' type='i'/>
<arg declared_type='l_int32' name='maxdiffh' type='i'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='pixCorrelationScoreShifted'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='area1' type='i'/>
<arg declared_type='l_int32' name='area2' type='i'/>
<arg declared_type='l_int32' name='delx' type='i'/>
<arg declared_type='l_int32' name='dely' type='i'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='pixCorrelationScoreSimple'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='area1' type='i'/>
<arg declared_type='l_int32' name='area2' type='i'/>
<arg declared_type='l_float32' name='delx' type='f'/>
<arg declared_type='l_float32' name='dely' type='f'/>
<arg declared_type='l_int32' name='maxdiffw' type='i'/>
<arg declared_type='l_int32' name='maxdiffh' type='i'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='pixCorrelationScoreThresholded'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='area1' type='i'/>
<arg declared_type='l_int32' name='area2' type='i'/>
<arg declared_type='l_float32' name='delx' type='f'/>
<arg declared_type='l_float32' name='dely' type='f'/>
<arg declared_type='l_int32' name='maxdiffw' type='i'/>
<arg declared_type='l_int32' name='maxdiffh' type='i'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<arg declared_type='l_int32*' name='downcount' type='^i'/>
<arg declared_type='l_float32' name='score_threshold' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCountArbInRect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='val' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCountConnComp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCountPixels'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCountPixelsByColumn'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixCountPixelsByRow'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixCountPixelsInRow'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCreate'>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateFromPixcomp'>
<arg declared_type='PIXC*' name='pixc' type='^{PixComp=iiiiii*i*I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateHeader'>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateNoInit'>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateRGBImage'>
<arg declared_type='PIX*' name='pixr' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixb' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateTemplate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateTemplateNoInit'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeserializeFromMemory'>
<arg const='true' declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='size_t' name='nbytes' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskew'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskewBarcode'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixb' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='margin' type='i'/>
<arg declared_type='l_int32' name='threshold' type='i'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskewGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskewLocal'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nslices' type='i'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_float32' name='minbsdelta' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDestroy'>
<arg declared_type='PIX**' name='ppix' type='^^{Pix}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixDestroyColormap'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDilate'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateCompBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateCompBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateCompBrickExtendDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateGray3'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplay'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayColorArray'>
<arg declared_type='l_uint32*' name='carray' type='^I'/>
<arg declared_type='l_int32' name='ncolors' type='i'/>
<arg declared_type='l_int32' name='side' type='i'/>
<arg declared_type='l_int32' name='ncols' type='i'/>
<arg declared_type='l_int32' name='textflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayDiffBinary'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayHitMissSel'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32' name='scalefactor' type='i'/>
<arg declared_type='l_uint32' name='hitcolor' type='I'/>
<arg declared_type='l_uint32' name='misscolor' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayMatchedPattern'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixp' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixe' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x0' type='i'/>
<arg declared_type='l_int32' name='y0' type='i'/>
<arg declared_type='l_uint32' name='color' type='I'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayMultiple'>
<arg const='true' declared_type='char*' name='filepattern' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayPta'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayPtaPattern'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PIX*' name='pixp' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_uint32' name='color' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayPtaa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayPtaaPattern'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='PIX*' name='pixp' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayWithTitle'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg declared_type='l_int32' name='dispflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayWrite'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayWriteFormat'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='format' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDistanceFunction'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='boundcond' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherTo2bpp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherTo2bppSpec'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='lowerclip' type='i'/>
<arg declared_type='l_int32' name='upperclip' type='i'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherToBinary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherToBinaryLUT'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='lowerclip' type='i'/>
<arg declared_type='l_int32' name='upperclip' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherToBinarySpec'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='lowerclip' type='i'/>
<arg declared_type='l_int32' name='upperclip' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDrawBoxa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDrawBoxaRandom'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEmbedForRotation'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEndianByteSwap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEndianByteSwapNew'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEndianTwoByteSwap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEndianTwoByteSwapNew'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEqual'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEqualWithCmap'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEqualizeTRC'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErode'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeCompBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeCompBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeCompBrickExtendDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeGray3'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExpandBinaryPower2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExpandBinaryReplicate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExpandReplicate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtendByReplication'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='addw' type='i'/>
<arg declared_type='l_int32' name='addh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtractBarcodeCrossings'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixExtractBarcodeWidths1'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_float32' name='binfract' type='f'/>
<arg declared_type='NUMA**' name='pnaehist' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnaohist' type='^^{Numa}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixExtractBarcodeWidths2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_float32*' name='pwidth' type='^f'/>
<arg declared_type='NUMA**' name='pnac' type='^^{Numa}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixExtractBarcodes'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixExtractBorderConnComps'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtractBoundary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtractData'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='pixExtractOnLine'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixFHMTGen_1'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFMorphopGen_1'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='operation' type='i'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFMorphopGen_2'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='operation' type='i'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFadeWithGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixb' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFastTophat'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xsize' type='i'/>
<arg declared_type='l_int32' name='ysize' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsMedianCutQuantMixed'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ncolor' type='i'/>
<arg declared_type='l_int32' name='ngray' type='i'/>
<arg declared_type='l_int32' name='maxncolors' type='i'/>
<arg declared_type='l_int32' name='darkthresh' type='i'/>
<arg declared_type='l_int32' name='lightthresh' type='i'/>
<arg declared_type='l_int32' name='diffthresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsOctcubeQuant1'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsOctcubeQuant2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='ncolors' type='i'/>
<arg declared_type='l_int32*' name='pnerrors' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsOctcubeQuantMixed'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='darkthresh' type='i'/>
<arg declared_type='l_int32' name='lightthresh' type='i'/>
<arg declared_type='l_int32' name='diffthresh' type='i'/>
<arg declared_type='l_float32' name='minfract' type='f'/>
<arg declared_type='l_int32' name='maxspan' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFillClosedBorders'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFillHolesToBoundingRect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='minsize' type='i'/>
<arg declared_type='l_float32' name='maxhfract' type='f'/>
<arg declared_type='l_float32' name='minfgfract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFillMapHoles'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nx' type='i'/>
<arg declared_type='l_int32' name='ny' type='i'/>
<arg declared_type='l_int32' name='filltype' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFinalAccumulate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='offset' type='I'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFinalAccumulateThreshold'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='offset' type='I'/>
<arg declared_type='l_uint32' name='threshold' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFindAreaFraction'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<arg declared_type='l_float32*' name='pfract' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindAreaPerimRatio'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<arg declared_type='l_float32*' name='pfract' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindBaselines'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA**' name='ppta' type='^^{Pta}'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixFindCornerPixels'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='pixFindDifferentialSquareSum'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='psum' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindEqualValues'>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFindHistoPeaksHSV'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='npeaks' type='i'/>
<arg declared_type='l_float32' name='erasefactor' type='f'/>
<arg declared_type='PTA**' name='ppta' type='^^{Pta}'/>
<arg declared_type='NUMA**' name='pnatot' type='^^{Numa}'/>
<arg declared_type='PIXA**' name='ppixa' type='^^{Pixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindHorizontalRuns'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32*' name='xstart' type='^i'/>
<arg declared_type='l_int32*' name='xend' type='^i'/>
<arg declared_type='l_int32*' name='pn' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindLargestRectangle'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='polarity' type='i'/>
<arg declared_type='BOX**' name='pbox' type='^^{Box}'/>
<arg const='true' declared_type='char*' name='debugfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindNormalizedSquareSum'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='phratio' type='^f'/>
<arg declared_type='l_float32*' name='pvratio' type='^f'/>
<arg declared_type='l_float32*' name='pfract' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindOverlapFraction'>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<arg declared_type='l_float32*' name='pratio' type='^f'/>
<arg declared_type='l_int32*' name='pnoverlap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindPerimSizeRatio'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<arg declared_type='l_float32*' name='pratio' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindRectangleComps'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dist' type='i'/>
<arg declared_type='l_int32' name='minw' type='i'/>
<arg declared_type='l_int32' name='minh' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixFindSkew'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewAndDeskew'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFindSkewOrthogonalRange'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_float32' name='minbsdelta' type='f'/>
<arg declared_type='l_float32' name='confprior' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweep'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweepAndSearch'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_float32' name='minbsdelta' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweepAndSearchScore'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_float32*' name='pendscore' type='^f'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32' name='sweepcenter' type='f'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_float32' name='minbsdelta' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweepAndSearchScorePivot'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pangle' type='^f'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_float32*' name='pendscore' type='^f'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32' name='sweepcenter' type='f'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_float32' name='minbsdelta' type='f'/>
<arg declared_type='l_int32' name='pivot' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindVerticalRuns'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32*' name='ystart' type='^i'/>
<arg declared_type='l_int32*' name='yend' type='^i'/>
<arg declared_type='l_int32*' name='pn' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFixedOctcubeQuant256'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ditherflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFixedOctcubeQuantGenRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFlipFHMTGen'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFlipLR'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFlipPixel'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFlipTB'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixForegroundFraction'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pfract' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFreeData'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGammaTRC'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_int32' name='minval' type='i'/>
<arg declared_type='l_int32' name='maxval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGammaTRCMasked'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_int32' name='minval' type='i'/>
<arg declared_type='l_int32' name='maxval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGammaTRCWithAlpha'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_int32' name='minval' type='i'/>
<arg declared_type='l_int32' name='maxval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenHalftoneMask'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX**' name='ppixtext' type='^^{Pix}'/>
<arg declared_type='l_int32*' name='phtfound' type='^i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenTextblockMask'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixvws' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenTextlineMask'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX**' name='ppixvws' type='^^{Pix}'/>
<arg declared_type='l_int32*' name='ptlfound' type='^i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateFlateData'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ascii85flag' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='pixGenerateFromPta'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateG4Data'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ascii85flag' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='pixGenerateJpegData'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ascii85flag' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='pixGenerateMaskByBand'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='lower' type='i'/>
<arg declared_type='l_int32' name='upper' type='i'/>
<arg declared_type='l_int32' name='inband' type='i'/>
<arg declared_type='l_int32' name='usecmap' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateMaskByBand32'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='refval' type='I'/>
<arg declared_type='l_int32' name='delm' type='i'/>
<arg declared_type='l_int32' name='delp' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateMaskByDiscr32'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='refval1' type='I'/>
<arg declared_type='l_uint32' name='refval2' type='I'/>
<arg declared_type='l_int32' name='distflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateMaskByValue'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='val' type='i'/>
<arg declared_type='l_int32' name='usecmap' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateSelBoundary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hitdist' type='i'/>
<arg declared_type='l_int32' name='missdist' type='i'/>
<arg declared_type='l_int32' name='hitskip' type='i'/>
<arg declared_type='l_int32' name='missskip' type='i'/>
<arg declared_type='l_int32' name='topflag' type='i'/>
<arg declared_type='l_int32' name='botflag' type='i'/>
<arg declared_type='l_int32' name='leftflag' type='i'/>
<arg declared_type='l_int32' name='rightflag' type='i'/>
<arg declared_type='PIX**' name='ppixe' type='^^{Pix}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='pixGenerateSelRandom'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='hitfract' type='f'/>
<arg declared_type='l_float32' name='missfract' type='f'/>
<arg declared_type='l_int32' name='distance' type='i'/>
<arg declared_type='l_int32' name='toppix' type='i'/>
<arg declared_type='l_int32' name='botpix' type='i'/>
<arg declared_type='l_int32' name='leftpix' type='i'/>
<arg declared_type='l_int32' name='rightpix' type='i'/>
<arg declared_type='PIX**' name='ppixe' type='^^{Pix}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='pixGenerateSelWithRuns'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nhlines' type='i'/>
<arg declared_type='l_int32' name='nvlines' type='i'/>
<arg declared_type='l_int32' name='distance' type='i'/>
<arg declared_type='l_int32' name='minlength' type='i'/>
<arg declared_type='l_int32' name='toppix' type='i'/>
<arg declared_type='l_int32' name='botpix' type='i'/>
<arg declared_type='l_int32' name='leftpix' type='i'/>
<arg declared_type='l_int32' name='rightpix' type='i'/>
<arg declared_type='PIX**' name='ppixe' type='^^{Pix}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='pixGetAllCCBorders'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='pixGetAverageMasked'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetAverageMaskedRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_float32*' name='prval' type='^f'/>
<arg declared_type='l_float32*' name='pgval' type='^f'/>
<arg declared_type='l_float32*' name='pbval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetAverageTiled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetAverageTiledRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='PIX**' name='ppixr' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixg' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixb' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetAverageValue'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_uint32*' name='pvalue' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundGrayMap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundGrayMapMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='PIX**' name='ppixm' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundRGBMap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='PIX**' name='ppixmr' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixmg' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixmb' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundRGBMapMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='PIX**' name='ppixmr' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixmg' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixmb' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBinnedColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='NUMA*' name='nalut' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_uint32**' name='pcarray' type='^^I'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBinnedComponentRange'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='color' type='i'/>
<arg declared_type='l_int32*' name='pminval' type='^i'/>
<arg declared_type='l_int32*' name='pmaxval' type='^i'/>
<arg declared_type='l_uint32**' name='pcarray' type='^^I'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetCCBorders'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
</function>
<function name='pixGetCmapHistogram'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetCmapHistogramInRect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetCmapHistogramMasked'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetColorHistogram'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='NUMA**' name='pnar' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnag' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnab' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetColorHistogramMasked'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='NUMA**' name='pnar' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnag' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnab' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetColormap'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixGetColumnStats'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_float32*' name='rowvect' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetComponentRange'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='color' type='i'/>
<arg declared_type='l_int32*' name='pminval' type='^i'/>
<arg declared_type='l_int32*' name='pmaxval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetData'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='pixGetDepth'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetDifferenceHistogram'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetDifferenceStats'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='mindiff' type='i'/>
<arg declared_type='l_float32*' name='pfractdiff' type='^f'/>
<arg declared_type='l_float32*' name='pavediff' type='^f'/>
<arg declared_type='l_int32' name='printstats' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetDimensions'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pd' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetEdgeProfile'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='side' type='i'/>
<arg const='true' declared_type='char*' name='debugfile' type='*'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetExtremeValue'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='prval' type='^i'/>
<arg declared_type='l_int32*' name='pgval' type='^i'/>
<arg declared_type='l_int32*' name='pbval' type='^i'/>
<arg declared_type='l_int32*' name='pgrayval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetGrayHistogram'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetGrayHistogramInRect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetGrayHistogramMasked'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetHeight'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetHoleBorder'>
<arg declared_type='CCBORD*' name='ccb' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='xs' type='i'/>
<arg declared_type='l_int32' name='ys' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetInputFormat'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetInvBackgroundMap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetLastOffPixelInRun'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<arg declared_type='l_int32*' name='ploc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetLastOnPixelInRun'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<arg declared_type='l_int32*' name='ploc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetLinePtrs'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='psize' type='^i'/>
<retval declared_type='void**' type='^^v'/>
</function>
<function name='pixGetLocalSkewAngles'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nslices' type='i'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_float32' name='minbsdelta' type='f'/>
<arg declared_type='l_float32*' name='pa' type='^f'/>
<arg declared_type='l_float32*' name='pb' type='^f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetLocalSkewTransform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nslices' type='i'/>
<arg declared_type='l_int32' name='redsweep' type='i'/>
<arg declared_type='l_int32' name='redsearch' type='i'/>
<arg declared_type='l_float32' name='sweeprange' type='f'/>
<arg declared_type='l_float32' name='sweepdelta' type='f'/>
<arg declared_type='l_float32' name='minbsdelta' type='f'/>
<arg declared_type='PTA**' name='pptas' type='^^{Pta}'/>
<arg declared_type='PTA**' name='pptad' type='^^{Pta}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetMaxValueInRect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_uint32*' name='pmaxval' type='^I'/>
<arg declared_type='l_int32*' name='pxmax' type='^i'/>
<arg declared_type='l_int32*' name='pymax' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetOuterBorder'>
<arg declared_type='CCBORD*' name='ccb' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetOuterBorderPta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='pixGetOuterBordersPtaa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='pixGetPSNR'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_float32*' name='ppsnr' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetPixel'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_uint32*' name='pval' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRGBComponent'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='color' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetRGBComponentCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='color' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetRGBLine'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_uint8*' name='bufr' type='*'/>
<arg declared_type='l_uint8*' name='bufg' type='*'/>
<arg declared_type='l_uint8*' name='bufb' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRGBPixel'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32*' name='prval' type='^i'/>
<arg declared_type='l_int32*' name='pgval' type='^i'/>
<arg declared_type='l_int32*' name='pbval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRandomPixel'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32*' name='pval' type='^I'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRankColorArray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_uint32**' name='pcarray' type='^^I'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRankValue'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_uint32*' name='pvalue' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRankValueMasked'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<arg declared_type='NUMA**' name='pna' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRankValueMaskedRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_float32*' name='prval' type='^f'/>
<arg declared_type='l_float32*' name='pgval' type='^f'/>
<arg declared_type='l_float32*' name='pbval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRasterData'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRefcount'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRegionsBinary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX**' name='ppixhm' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixtm' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixtb' type='^^{Pix}'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetResolution'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='pxres' type='^i'/>
<arg declared_type='l_int32*' name='pyres' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRowStats'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_float32*' name='colvect' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRunCentersOnLine'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='minlength' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetRunsOnLine'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetText'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pixGetWidth'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetWordBoxesInTextlines'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='minwidth' type='i'/>
<arg declared_type='l_int32' name='minheight' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='maxheight' type='i'/>
<arg declared_type='BOXA**' name='pboxad' type='^^{Boxa}'/>
<arg declared_type='NUMA**' name='pnai' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetWordsInTextlines'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='minwidth' type='i'/>
<arg declared_type='l_int32' name='minheight' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='maxheight' type='i'/>
<arg declared_type='BOXA**' name='pboxad' type='^^{Boxa}'/>
<arg declared_type='PIXA**' name='ppixad' type='^^{Pixa}'/>
<arg declared_type='NUMA**' name='pnai' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetWpl'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetXRes'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetYRes'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGlobalNormNoSatRGB'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGlobalNormRGB'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32' name='mapval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGrayMorphSequence'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='dispsep' type='i'/>
<arg declared_type='l_int32' name='dispy' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGrayQuantFromCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='mindepth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGrayQuantFromHisto'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='minfract' type='f'/>
<arg declared_type='l_int32' name='maxsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHDome'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHMT'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHMTDwa_1'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShear'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='liney' type='i'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShearCenter'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShearCorner'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShearIP'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='liney' type='i'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixHShearLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='liney' type='i'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHalfEdgeByBandpass'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sm1h' type='i'/>
<arg declared_type='l_int32' name='sm1v' type='i'/>
<arg declared_type='l_int32' name='sm2h' type='i'/>
<arg declared_type='l_int32' name='sm2v' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHaustest'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix3' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix4' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='delx' type='f'/>
<arg declared_type='l_float32' name='dely' type='f'/>
<arg declared_type='l_int32' name='maxdiffw' type='i'/>
<arg declared_type='l_int32' name='maxdiffh' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixHolesByFilling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHtmlViewer'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg const='true' declared_type='char*' name='dirout' type='*'/>
<arg const='true' declared_type='char*' name='rootname' type='*'/>
<arg declared_type='l_int32' name='thumbwidth' type='i'/>
<arg declared_type='l_int32' name='viewwidth' type='i'/>
<arg declared_type='l_int32' name='copyorig' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixInitAccumulate'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_uint32' name='offset' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixIntersectionOfMorphOps'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixInvert'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixItalicWords'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxaw' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='PIX*' name='pixw' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA**' name='pboxa' type='^^{Boxa}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixLinearMapToTargetColor'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='srcval' type='I'/>
<arg declared_type='l_uint32' name='dstval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixLinearTRCTiled'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='PIX*' name='pixmin' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixmax' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixLocalExtrema'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='maxmin' type='i'/>
<arg declared_type='l_int32' name='minmax' type='i'/>
<arg declared_type='PIX**' name='ppixmin' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixmax' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixLocateBarcodes'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='PIX**' name='ppixb' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixm' type='^^{Pix}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixMakeHistoHS'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='NUMA**' name='pnahue' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnasat' type='^^{Numa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeHistoHV'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='NUMA**' name='pnahue' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnaval' type='^^{Numa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeHistoSV'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='NUMA**' name='pnasat' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnaval' type='^^{Numa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeMaskFromLUT'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeRangeMaskHS'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='huecenter' type='i'/>
<arg declared_type='l_int32' name='huehw' type='i'/>
<arg declared_type='l_int32' name='satcenter' type='i'/>
<arg declared_type='l_int32' name='sathw' type='i'/>
<arg declared_type='l_int32' name='regionflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeRangeMaskHV'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='huecenter' type='i'/>
<arg declared_type='l_int32' name='huehw' type='i'/>
<arg declared_type='l_int32' name='valcenter' type='i'/>
<arg declared_type='l_int32' name='valhw' type='i'/>
<arg declared_type='l_int32' name='regionflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeRangeMaskSV'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='satcenter' type='i'/>
<arg declared_type='l_int32' name='sathw' type='i'/>
<arg declared_type='l_int32' name='valcenter' type='i'/>
<arg declared_type='l_int32' name='valhw' type='i'/>
<arg declared_type='l_int32' name='regionflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskBoxa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskConnComp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='BOXA**' name='pboxa' type='^^{Boxa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskOverColorPixels'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='threshdiff' type='i'/>
<arg declared_type='l_int32' name='mindist' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskedThreshOnBackgroundNorm'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='l_float32' name='scorefract' type='f'/>
<arg declared_type='l_int32*' name='pthresh' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaxDynamicRange'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMeanInRectangle'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='PIX*' name='pixma' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMeanSquareAccum'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiIii^d}'/>
</function>
<function name='pixMeasureEdgeSmoothness'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='side' type='i'/>
<arg declared_type='l_int32' name='minjump' type='i'/>
<arg declared_type='l_int32' name='minreversal' type='i'/>
<arg declared_type='l_float32*' name='pjpl' type='^f'/>
<arg declared_type='l_float32*' name='pjspl' type='^f'/>
<arg declared_type='l_float32*' name='prpl' type='^f'/>
<arg const='true' declared_type='char*' name='debugfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMeasureSaturation'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_float32*' name='psat' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMedianCutHisto'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sigbits' type='i'/>
<arg declared_type='l_int32' name='subsample' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='pixMedianCutQuant'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ditherflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMedianCutQuantGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ditherflag' type='i'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='maxcolors' type='i'/>
<arg declared_type='l_int32' name='sigbits' type='i'/>
<arg declared_type='l_int32' name='maxsub' type='i'/>
<arg declared_type='l_int32' name='checkbw' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMedianCutQuantMixed'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='ncolor' type='i'/>
<arg declared_type='l_int32' name='ngray' type='i'/>
<arg declared_type='l_int32' name='darkthresh' type='i'/>
<arg declared_type='l_int32' name='lightthresh' type='i'/>
<arg declared_type='l_int32' name='diffthresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMedianFilter'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wf' type='i'/>
<arg declared_type='l_int32' name='hf' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMinMaxTiles'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='mindiff' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='PIX**' name='ppixmin' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixmax' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMinOrMax'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMirrorDetect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMirrorDetectDwa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMirroredTiling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixModifyHue'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixModifySaturation'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphCompSequence'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='dispsep' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphCompSequenceDwa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='dispsep' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphDwa_1'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='operation' type='i'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphDwa_2'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='operation' type='i'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphGradient'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<arg declared_type='l_int32' name='smoothing' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequence'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='dispsep' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceByComponent'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='minw' type='i'/>
<arg declared_type='l_int32' name='minh' type='i'/>
<arg declared_type='BOXA**' name='pboxa' type='^^{Boxa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceByRegion'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='minw' type='i'/>
<arg declared_type='l_int32' name='minh' type='i'/>
<arg declared_type='BOXA**' name='pboxa' type='^^{Boxa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceDwa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='dispsep' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceMasked'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='dispsep' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMultConstAccumulate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='l_uint32' name='offset' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMultConstantColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='rfact' type='f'/>
<arg declared_type='l_float32' name='gfact' type='f'/>
<arg declared_type='l_float32' name='bfact' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMultConstantGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='val' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMultMatrixColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_KERNEL*' name='kel' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMultiplyByColor'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_uint32' name='color' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixNumColors'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32*' name='pncolors' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixNumSignificantGrayColors'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='darkthresh' type='i'/>
<arg declared_type='l_int32' name='lightthresh' type='i'/>
<arg declared_type='l_float32' name='minfract' type='f'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32*' name='pncolors' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixNumberOccupiedOctcubes'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_float32' name='minfract' type='f'/>
<arg declared_type='l_int32*' name='pncolors' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOctcubeHistogram'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32*' name='pncolors' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixOctcubeQuantFromCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='mindepth' type='i'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='metric' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctcubeQuantFromCmapLUT'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='mindepth' type='i'/>
<arg declared_type='l_int32*' name='cmaptab' type='^i'/>
<arg declared_type='l_uint32*' name='rtab' type='^I'/>
<arg declared_type='l_uint32*' name='gtab' type='^I'/>
<arg declared_type='l_uint32*' name='btab' type='^I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctcubeQuantMixedWithGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32' name='graylevels' type='i'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeColorQuant'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='colors' type='i'/>
<arg declared_type='l_int32' name='ditherflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeColorQuantGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='colors' type='i'/>
<arg declared_type='l_int32' name='ditherflag' type='i'/>
<arg declared_type='l_float32' name='validthresh' type='f'/>
<arg declared_type='l_float32' name='colorthresh' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeQuantByPopulation'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='ditherflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeQuantNumColors'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='maxcolors' type='i'/>
<arg declared_type='l_int32' name='subsample' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpen'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenCompBrick'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenCompBrickDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenCompBrickExtendDwa'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenGeneralized'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenGray3'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOr'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOrientDetect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pupconf' type='^f'/>
<arg declared_type='l_float32*' name='pleftconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOrientDetectDwa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pupconf' type='^f'/>
<arg declared_type='l_float32*' name='pleftconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOtsuAdaptiveThreshold'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='l_float32' name='scorefract' type='f'/>
<arg declared_type='PIX**' name='ppixth' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOtsuThreshOnBackgroundNorm'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixim' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='bgval' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='l_float32' name='scorefract' type='f'/>
<arg declared_type='l_int32*' name='pthresh' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixPaintBoxa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixPaintBoxaRandom'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixPaintSelfThroughMask'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='tilesize' type='i'/>
<arg declared_type='l_int32' name='searchdir' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixPaintThroughMask'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixPlotAlongPta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='outformat' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixPrintStreamInfo'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='text' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixProcessBarcodes'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<arg declared_type='l_int32' name='method' type='i'/>
<arg declared_type='SARRAY**' name='psaw' type='^^{Sarray}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='pixProjective'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaGammaXform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaWithAlpha'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveSampled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveSampledPta'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadraticVShear'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='vmaxt' type='i'/>
<arg declared_type='l_int32' name='vmaxb' type='i'/>
<arg declared_type='l_int32' name='operation' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadraticVShearLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='vmaxt' type='i'/>
<arg declared_type='l_int32' name='vmaxb' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadraticVShearSampled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='vmaxt' type='i'/>
<arg declared_type='l_int32' name='vmaxb' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadtreeMean'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<arg declared_type='PIX*' name='pix_ma' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='FPIXA**' name='pfpixa' type='^^{FPixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixQuadtreeVariance'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<arg declared_type='PIX*' name='pix_ma' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='DPIX*' name='dpix_msa' type='^{DPix=iiiIii^d}'/>
<arg declared_type='FPIXA**' name='pfpixa_v' type='^^{FPixa}'/>
<arg declared_type='FPIXA**' name='pfpixa_rv' type='^^{FPixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixQuantFromCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='mindepth' type='i'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='metric' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuantizeIfFewColors'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='maxcolors' type='i'/>
<arg declared_type='l_int32' name='mingraycolors' type='i'/>
<arg declared_type='l_int32' name='octlevel' type='i'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRandomHarmonicWarp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='xmag' type='f'/>
<arg declared_type='l_float32' name='ymag' type='f'/>
<arg declared_type='l_float32' name='xfreq' type='f'/>
<arg declared_type='l_float32' name='yfreq' type='f'/>
<arg declared_type='l_int32' name='nx' type='i'/>
<arg declared_type='l_int32' name='ny' type='i'/>
<arg declared_type='l_uint32' name='seed' type='I'/>
<arg declared_type='l_int32' name='grayval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankColumnTransform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankFilter'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wf' type='i'/>
<arg declared_type='l_int32' name='hf' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankFilterGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wf' type='i'/>
<arg declared_type='l_int32' name='hf' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankFilterRGB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wf' type='i'/>
<arg declared_type='l_int32' name='hf' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankFilterWithScaling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wf' type='i'/>
<arg declared_type='l_int32' name='hf' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankHaustest'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix3' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix4' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='delx' type='f'/>
<arg declared_type='l_float32' name='dely' type='f'/>
<arg declared_type='l_int32' name='maxdiffw' type='i'/>
<arg declared_type='l_int32' name='maxdiffh' type='i'/>
<arg declared_type='l_int32' name='area1' type='i'/>
<arg declared_type='l_int32' name='area3' type='i'/>
<arg declared_type='l_float32' name='rank' type='f'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRankRowTransform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRasterop'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dx' type='i'/>
<arg declared_type='l_int32' name='dy' type='i'/>
<arg declared_type='l_int32' name='dw' type='i'/>
<arg declared_type='l_int32' name='dh' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropFullImage'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropHip'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='by' type='i'/>
<arg declared_type='l_int32' name='bh' type='i'/>
<arg declared_type='l_int32' name='hshift' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropIP'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hshift' type='i'/>
<arg declared_type='l_int32' name='vshift' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropVip'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='bx' type='i'/>
<arg declared_type='l_int32' name='bw' type='i'/>
<arg declared_type='l_int32' name='vshift' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadBarcodeWidths'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='method' type='i'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixReadBarcodes'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<arg declared_type='l_int32' name='method' type='i'/>
<arg declared_type='SARRAY**' name='psaw' type='^^{Sarray}'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='pixReadHeader'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixReadHeaderMem'>
<arg const='true' declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixReadIndexed'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadJpeg'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32' name='cmflag' type='i'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32*' name='pnwarn' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMem'>
<arg const='true' declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemBmp'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemGif'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemJpeg'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32' name='cmflag' type='i'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32*' name='pnwarn' type='^i'/>
<arg declared_type='l_int32' name='hint' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemPng'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemPnm'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemSpix'>
<arg const='true' declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemTiff'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadRGBAPng'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32' name='hint' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamBmp'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamGif'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamJpeg'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32' name='cmflag' type='i'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32*' name='pnwarn' type='^i'/>
<arg declared_type='l_int32' name='hint' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamPng'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamPnm'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamSpix'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamTiff'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamWebP'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadTiff'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadWithHint'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32' name='hint' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReduceBinary2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint8*' name='intab' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReduceRankBinary2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_uint8*' name='intab' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReduceRankBinaryCascade'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level1' type='i'/>
<arg declared_type='l_int32' name='level2' type='i'/>
<arg declared_type='l_int32' name='level3' type='i'/>
<arg declared_type='l_int32' name='level4' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='npix' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveBorderConnComps'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveBorderGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveColormap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveMatchedPattern'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixp' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixe' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x0' type='i'/>
<arg declared_type='l_int32' name='y0' type='i'/>
<arg declared_type='l_int32' name='dsize' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRemoveSeededComponents'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='bordersize' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveUnusedColors'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRemoveWithIndicator'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBox'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxArb'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxBlend'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxa'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxaArb'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxaBlend'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='removedups' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderContours'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='startval' type='i'/>
<arg declared_type='l_int32' name='incr' type='i'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRenderHashBox'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='orient' type='i'/>
<arg declared_type='l_int32' name='outline' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderHashBoxArb'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='orient' type='i'/>
<arg declared_type='l_int32' name='outline' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderHashBoxBlend'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='orient' type='i'/>
<arg declared_type='l_int32' name='outline' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderLine'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderLineArb'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderLineBlend'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x1' type='i'/>
<arg declared_type='l_int32' name='y1' type='i'/>
<arg declared_type='l_int32' name='x2' type='i'/>
<arg declared_type='l_int32' name='y2' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPolyline'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<arg declared_type='l_int32' name='closeflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPolylineArb'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<arg declared_type='l_int32' name='closeflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPolylineBlend'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='closeflag' type='i'/>
<arg declared_type='l_int32' name='removedups' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPta'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPtaArb'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPtaBlend'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint8' name='rval' type='C'/>
<arg declared_type='l_uint8' name='gval' type='C'/>
<arg declared_type='l_uint8' name='bval' type='C'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderRandomCmapPtaa'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='l_int32' name='polyflag' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='closeflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixResizeImageData'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixResizeToMatch'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixt' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReversalProfile'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='first' type='i'/>
<arg declared_type='l_int32' name='last' type='i'/>
<arg declared_type='l_int32' name='minreversal' type='i'/>
<arg declared_type='l_int32' name='factor1' type='i'/>
<arg declared_type='l_int32' name='factor2' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixRotate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate180'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate2Shear'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xcen' type='i'/>
<arg declared_type='l_int32' name='ycen' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate3Shear'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xcen' type='i'/>
<arg declared_type='l_int32' name='ycen' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate90'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAM'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMColorCorner'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint32' name='fillval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMColorFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMCorner'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMGrayCorner'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateBinaryNice'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateBySampling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xcen' type='i'/>
<arg declared_type='l_int32' name='ycen' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateGammaXform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateOrth'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='quads' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateShear'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xcen' type='i'/>
<arg declared_type='l_int32' name='ycen' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateShearCenter'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateShearCenterIP'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRotateShearIP'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xcen' type='i'/>
<arg declared_type='l_int32' name='ycen' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRotateWithAlpha'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRowStats'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='NUMA**' name='pnamean' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnamedian' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnamode' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnamodecount' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnavar' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnarootvar' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRunHistogramMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='runtype' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<arg declared_type='l_int32' name='maxsize' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixRunlengthTransform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='color' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSauvolaBinarize'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='whsize' type='i'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='l_int32' name='addborder' type='i'/>
<arg declared_type='PIX**' name='ppixm' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixsd' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixth' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSauvolaBinarizeTiled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='whsize' type='i'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='l_int32' name='nx' type='i'/>
<arg declared_type='l_int32' name='ny' type='i'/>
<arg declared_type='PIX**' name='ppixth' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSauvolaGetThreshold'>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixms' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='PIX**' name='ppixsd' type='^^{Pix}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSaveTiled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='newrow' type='i'/>
<arg declared_type='l_int32' name='space' type='i'/>
<arg declared_type='l_int32' name='dp' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSaveTiledOutline'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='reduction' type='i'/>
<arg declared_type='l_int32' name='newrow' type='i'/>
<arg declared_type='l_int32' name='space' type='i'/>
<arg declared_type='l_int32' name='linewidth' type='i'/>
<arg declared_type='l_int32' name='dp' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSaveTiledWithText'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='outwidth' type='i'/>
<arg declared_type='l_int32' name='newrow' type='i'/>
<arg declared_type='l_int32' name='space' type='i'/>
<arg declared_type='l_int32' name='linewidth' type='i'/>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg const='true' declared_type='char*' name='textstr' type='*'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<arg declared_type='l_int32' name='location' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixScale'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleAreaMap'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleAreaMap2'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleBinary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleByIntSubsampling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleBySampling'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleColor2xLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleColor4xLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleColorLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGammaXform'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='l_float32' name='sharpfract' type='f'/>
<arg declared_type='l_int32' name='sharpwidth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray2xLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray2xLIDither'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray2xLIThresh'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray4xLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray4xLIDither'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray4xLIThresh'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayMinMax'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xfact' type='i'/>
<arg declared_type='l_int32' name='yfact' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayMinMax2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayRank2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='rank' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayRankCascade'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='level1' type='i'/>
<arg declared_type='l_int32' name='level2' type='i'/>
<arg declared_type='l_int32' name='level3' type='i'/>
<arg declared_type='l_int32' name='level4' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayToBinaryFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleMipmap'>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleRGBToBinaryFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleRGBToGray2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='rwt' type='f'/>
<arg declared_type='l_float32' name='gwt' type='f'/>
<arg declared_type='l_float32' name='bwt' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleRGBToGrayFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='color' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleResolution'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='xscale' type='f'/>
<arg declared_type='l_float32' name='yscale' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixScaleSmooth'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray16'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray2'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray3'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray4'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray6'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGrayFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGrayMipmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToSize'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleWithAlpha'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScanForEdge'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='lowthresh' type='i'/>
<arg declared_type='l_int32' name='highthresh' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='scanflag' type='i'/>
<arg declared_type='l_int32*' name='ploc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixScanForForeground'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='scanflag' type='i'/>
<arg declared_type='l_int32*' name='ploc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSearchBinaryMaze'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xi' type='i'/>
<arg declared_type='l_int32' name='yi' type='i'/>
<arg declared_type='l_int32' name='xf' type='i'/>
<arg declared_type='l_int32' name='yf' type='i'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='pixSearchGrayMaze'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xi' type='i'/>
<arg declared_type='l_int32' name='yi' type='i'/>
<arg declared_type='l_int32' name='xf' type='i'/>
<arg declared_type='l_int32' name='yf' type='i'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='pixSeedfill'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_STACK*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfill4'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_STACK*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfill4BB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_STACK*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixSeedfill8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_STACK*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfill8BB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_STACK*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixSeedfillBB'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_STACK*' name='stack' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixSeedfillBinary'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedfillBinaryRestricted'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='xmax' type='i'/>
<arg declared_type='l_int32' name='ymax' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedfillGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillGrayBasin'>
<arg declared_type='PIX*' name='pixb' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedfillGrayInv'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillGrayInvSimple'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillGraySimple'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillMorph'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedspread'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectByAreaFraction'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectByAreaPerimRatio'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectBySize'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='relation' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectByWidthHeightRatio'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectMinInConnComp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='NUMA**' name='pnav' type='^^{Numa}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='pixSelectedLocalExtrema'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='mindist' type='i'/>
<arg declared_type='PIX**' name='ppixmin' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixmax' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSelectiveConnCompFill'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='minw' type='i'/>
<arg declared_type='l_int32' name='minh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSerializeToMemory'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32**' name='pdata' type='^^I'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetAll'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetAllArbitrary'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetAlphaOverWhite'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSetBlackOrWhite'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetBlackOrWhiteBoxa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSetBorderRingVal'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dist' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetBorderVal'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetColormap'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXCMAP*' name='colormap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetData'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetDepth'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetDimensions'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetHeight'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='height' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetInRect'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetInRectArbitrary'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetInputFormat'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='informat' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetLowContrast'>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='mindiff' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMasked'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMaskedCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMaskedGeneral'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMirroredBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetOrClearBorder'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPadBits'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPadBitsBand'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='by' type='i'/>
<arg declared_type='l_int32' name='bh' type='i'/>
<arg declared_type='l_int32' name='val' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPixel'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPixelColumn'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_float32*' name='colvect' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetRGBComponent'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='color' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetRGBPixel'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetResolution'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='xres' type='i'/>
<arg declared_type='l_int32' name='yres' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetSelectCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='sindex' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetSelectMaskedCmap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='sindex' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetText'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='textstring' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetTextblock'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg const='true' declared_type='char*' name='textstr' type='*'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<arg declared_type='l_int32' name='x0' type='i'/>
<arg declared_type='l_int32' name='y0' type='i'/>
<arg declared_type='l_int32' name='wtext' type='i'/>
<arg declared_type='l_int32' name='firstindent' type='i'/>
<arg declared_type='l_int32*' name='poverflow' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetTextline'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='L_BMF*' name='bmf' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg const='true' declared_type='char*' name='textstr' type='*'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<arg declared_type='l_int32' name='x0' type='i'/>
<arg declared_type='l_int32' name='y0' type='i'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='poverflow' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetUnderTransparency'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSetWidth'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetWpl'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetXRes'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetYRes'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetupByteProcessing'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_uint8**' type='^*'/>
</function>
<function name='pixShiftByComponent'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='srcval' type='I'/>
<arg declared_type='l_uint32' name='dstval' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSimpleCaptcha'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='border' type='i'/>
<arg declared_type='l_int32' name='nterms' type='i'/>
<arg declared_type='l_uint32' name='seed' type='I'/>
<arg declared_type='l_uint32' name='color' type='I'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSizesEqual'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSmoothConnectedRegions'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSnapColor'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='srcval' type='I'/>
<arg declared_type='l_uint32' name='dstval' type='I'/>
<arg declared_type='l_int32' name='diff' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSnapColorCmap'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_uint32' name='srcval' type='I'/>
<arg declared_type='l_uint32' name='dstval' type='I'/>
<arg declared_type='l_int32' name='diff' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSobelEdgeFilter'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='orientflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSplitComponentIntoBoxa'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='minsum' type='i'/>
<arg declared_type='l_int32' name='skipdist' type='i'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<arg declared_type='l_int32' name='maxbg' type='i'/>
<arg declared_type='l_int32' name='maxcomps' type='i'/>
<arg declared_type='l_int32' name='remainder' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixSplitDistributionFgBg'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scorefract' type='f'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32*' name='pthresh' type='^i'/>
<arg declared_type='l_int32*' name='pfgval' type='^i'/>
<arg declared_type='l_int32*' name='pbgval' type='^i'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSplitIntoBoxa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='minsum' type='i'/>
<arg declared_type='l_int32' name='skipdist' type='i'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<arg declared_type='l_int32' name='maxbg' type='i'/>
<arg declared_type='l_int32' name='maxcomps' type='i'/>
<arg declared_type='l_int32' name='remainder' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixStereoFromPair'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='rwt' type='f'/>
<arg declared_type='l_float32' name='gwt' type='f'/>
<arg declared_type='l_float32' name='bwt' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixStretchHorizontal'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='hmax' type='i'/>
<arg declared_type='l_int32' name='operation' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixStretchHorizontalLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='hmax' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixStretchHorizontalSampled'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='dir' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='hmax' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSubsampleBoundaryPixels'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='skip' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='pixSubtract'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSubtractGray'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSumPixelValues'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_float64*' name='psum' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSumPixelsByColumn'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixSumPixelsByRow'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixSwapAndDestroy'>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixs' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTRCMap'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTestForSimilarity'>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='mindiff' type='i'/>
<arg declared_type='l_float32' name='maxfract' type='f'/>
<arg declared_type='l_float32' name='maxave' type='f'/>
<arg declared_type='l_int32*' name='psimilar' type='^i'/>
<arg declared_type='l_int32' name='printstats' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThin'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='l_int32' name='maxiters' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThinExamples'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='maxiters' type='i'/>
<arg const='true' declared_type='char*' name='selfile' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThinGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='maxiters' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThreshold8'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdForFgBg'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='factor' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32*' name='pfgval' type='^i'/>
<arg declared_type='l_int32*' name='pbgval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThresholdGrayArb'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg const='true' declared_type='char*' name='edgevals' type='*'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='use_average' type='i'/>
<arg declared_type='l_int32' name='setblack' type='i'/>
<arg declared_type='l_int32' name='setwhite' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdOn8bpp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdPixelSum'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<arg declared_type='l_int32*' name='pabove' type='^i'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThresholdSpreadNorm'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='filtertype' type='i'/>
<arg declared_type='l_int32' name='edgethresh' type='i'/>
<arg declared_type='l_int32' name='smoothx' type='i'/>
<arg declared_type='l_int32' name='smoothy' type='i'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_int32' name='minval' type='i'/>
<arg declared_type='l_int32' name='maxval' type='i'/>
<arg declared_type='l_int32' name='targetthresh' type='i'/>
<arg declared_type='PIX**' name='ppixth' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixb' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixd' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThresholdTo2bpp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdTo4bpp'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdToBinary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdToValue'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='threshval' type='i'/>
<arg declared_type='l_int32' name='setval' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTilingCreate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nx' type='i'/>
<arg declared_type='l_int32' name='ny' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='xoverlap' type='i'/>
<arg declared_type='l_int32' name='yoverlap' type='i'/>
<retval declared_type='PIXTILING*' type='^{PixTiling=^{Pix}iiiiiii}'/>
</function>
<function name='pixTilingDestroy'>
<arg declared_type='PIXTILING**' name='ppt' type='^^{PixTiling}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixTilingGetCount'>
<arg declared_type='PIXTILING*' name='pt' type='^{PixTiling=^{Pix}iiiiiii}'/>
<arg declared_type='l_int32*' name='pnx' type='^i'/>
<arg declared_type='l_int32*' name='pny' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTilingGetSize'>
<arg declared_type='PIXTILING*' name='pt' type='^{PixTiling=^{Pix}iiiiiii}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTilingGetTile'>
<arg declared_type='PIXTILING*' name='pt' type='^{PixTiling=^{Pix}iiiiiii}'/>
<arg declared_type='l_int32' name='i' type='i'/>
<arg declared_type='l_int32' name='j' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTilingNoStripOnPaint'>
<arg declared_type='PIXTILING*' name='pt' type='^{PixTiling=^{Pix}iiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTilingPaintTile'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='i' type='i'/>
<arg declared_type='l_int32' name='j' type='i'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXTILING*' name='pt' type='^{PixTiling=^{Pix}iiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTophat'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTransferAllData'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX**' name='ppixs' type='^^{Pix}'/>
<arg declared_type='l_int32' name='copytext' type='i'/>
<arg declared_type='l_int32' name='copyformat' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTranslate'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='hshift' type='i'/>
<arg declared_type='l_int32' name='vshift' type='i'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTwoSidedEdgeFilter'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='orientflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnionOfMorphOps'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnpackBinary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32' name='invert' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMasking'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGray'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGray1D'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGray2D'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGrayFast'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='halfwidth' type='i'/>
<arg declared_type='l_float32' name='fract' type='f'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUpDownDetect'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUpDownDetectDwa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUpDownDetectGeneral'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='npixels' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUpDownDetectGeneralDwa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32*' name='pconf' type='^f'/>
<arg declared_type='l_int32' name='mincount' type='i'/>
<arg declared_type='l_int32' name='npixels' type='i'/>
<arg declared_type='l_int32' name='debug' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUsesCmapColor'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='pcolor' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixVShear'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='linex' type='i'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVShearCenter'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVShearCorner'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVShearIP'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='linex' type='i'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixVShearLI'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='linex' type='i'/>
<arg declared_type='l_float32' name='radang' type='f'/>
<arg declared_type='l_int32' name='incolor' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVarThresholdToBinary'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixg' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVarianceInRectangle'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='PIX*' name='pix_ma' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='DPIX*' name='dpix_msa' type='^{DPix=iiiIii^d}'/>
<arg declared_type='l_float32*' name='pvar' type='^f'/>
<arg declared_type='l_float32*' name='prvar' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWarpStereoscopic'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='zbend' type='i'/>
<arg declared_type='l_int32' name='zshiftt' type='i'/>
<arg declared_type='l_int32' name='zshiftb' type='i'/>
<arg declared_type='l_int32' name='ybendt' type='i'/>
<arg declared_type='l_int32' name='ybendb' type='i'/>
<arg declared_type='l_int32' name='redleft' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWindowedMean'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<arg declared_type='l_int32' name='hasborder' type='i'/>
<arg declared_type='l_int32' name='normflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWindowedMeanSquare'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<arg declared_type='l_int32' name='hasborder' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWindowedStats'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='wc' type='i'/>
<arg declared_type='l_int32' name='hc' type='i'/>
<arg declared_type='l_int32' name='hasborder' type='i'/>
<arg declared_type='PIX**' name='ppixm' type='^^{Pix}'/>
<arg declared_type='PIX**' name='ppixms' type='^^{Pix}'/>
<arg declared_type='FPIX**' name='pfpixv' type='^^{FPix}'/>
<arg declared_type='FPIX**' name='pfpixrv' type='^^{FPix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWindowedVariance'>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixms' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='FPIX**' name='pfpixv' type='^^{FPix}'/>
<arg declared_type='FPIX**' name='pfpixrv' type='^^{FPix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWordMaskByDilation'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='maxsize' type='i'/>
<arg declared_type='l_int32*' name='psize' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteImpliedFormat'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_int32' name='progressive' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteJpeg'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_int32' name='progressive' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMem'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemBmp'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemGif'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemJpeg'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_int32' name='progressive' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemPS'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemPng'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemPnm'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemSpix'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemTiff'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemTiffCustom'>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='psize' type='^I'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg declared_type='NUMA*' name='natags' type='^{Numa=iiiff^f}'/>
<arg declared_type='SARRAY*' name='savals' type='^{Sarray=iii^*}'/>
<arg declared_type='SARRAY*' name='satypes' type='^{Sarray=iii^*}'/>
<arg declared_type='NUMA*' name='nasizes' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMixedToPS'>
<arg declared_type='PIX*' name='pixb' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixc' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWritePSEmbed'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWritePng'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteRGBAPng'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteSegmentedPageToPS'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='textscale' type='f'/>
<arg declared_type='l_float32' name='imagescale' type='f'/>
<arg declared_type='l_int32' name='threshold' type='i'/>
<arg declared_type='l_int32' name='pageno' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamAsciiPnm'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamBmp'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamGif'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamJpeg'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg declared_type='l_int32' name='progressive' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPS'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPdf'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPng'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPnm'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamSpix'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamTiff'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamWebP'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStringPS'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scale' type='f'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pixWriteTempfile'>
<arg const='true' declared_type='char*' name='dir' type='*'/>
<arg const='true' declared_type='char*' name='tail' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<arg declared_type='char**' name='pfilename' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteTiff'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg const='true' declared_type='char*' name='modestring' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteTiffCustom'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg const='true' declared_type='char*' name='modestring' type='*'/>
<arg declared_type='NUMA*' name='natags' type='^{Numa=iiiff^f}'/>
<arg declared_type='SARRAY*' name='savals' type='^{Sarray=iii^*}'/>
<arg declared_type='SARRAY*' name='satypes' type='^{Sarray=iii^*}'/>
<arg declared_type='NUMA*' name='nasizes' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteWebP'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixXor'>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixs2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixZero'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='pempty' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaAddBorderGeneral'>
<arg declared_type='PIXA*' name='pixad' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='left' type='i'/>
<arg declared_type='l_int32' name='right' type='i'/>
<arg declared_type='l_int32' name='top' type='i'/>
<arg declared_type='l_int32' name='bot' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaAddBox'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaAddPix'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaAnyColormaps'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32*' name='phascmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaBinSort'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='sorttype' type='i'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCentroids'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='pixaChangeRefcount'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaClear'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaClipToPix'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaConvertToPdf'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaConvertToPdfData'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaCopy'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCountPixels'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCreateFromBoxa'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOXA*' name='boxa' type='^{Boxa=iiI^^{Box}}'/>
<arg declared_type='l_int32*' name='pcropwarn' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCreateFromPix'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='cellw' type='i'/>
<arg declared_type='l_int32' name='cellh' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCreateFromPixacomp'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaDestroy'>
<arg declared_type='PIXA**' name='ppixa' type='^^{Pixa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixaDisplay'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayOnColor'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_uint32' name='bgcolor' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayOnLattice'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='xspace' type='i'/>
<arg declared_type='l_int32' name='yspace' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayRandomCmap'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayTiled'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_int32' name='background' type='i'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayTiledAndScaled'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='tilewidth' type='i'/>
<arg declared_type='l_int32' name='ncols' type='i'/>
<arg declared_type='l_int32' name='background' type='i'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayTiledInRows'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='maxwidth' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='background' type='i'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayUnsplit'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='nx' type='i'/>
<arg declared_type='l_int32' name='ny' type='i'/>
<arg declared_type='l_int32' name='borderwidth' type='i'/>
<arg declared_type='l_uint32' name='bordercolor' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaEqual'>
<arg declared_type='PIXA*' name='pixa1' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='PIXA*' name='pixa2' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='maxdist' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaExtendArray'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaExtendArrayToSize'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaExtractColumnFromEachPix'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='PIX*' name='pixd' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaFindAreaFraction'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindAreaPerimRatio'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindDimensions'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='NUMA**' name='pnaw' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnah' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaFindPerimSizeRatio'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindWidthHeightProduct'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindWidthHeightRatio'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaGenerateFont'>
<arg const='true' declared_type='char*' name='dir' type='*'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32*' name='pbl0' type='^i'/>
<arg declared_type='l_int32*' name='pbl1' type='^i'/>
<arg declared_type='l_int32*' name='pbl2' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaGetAlignedStats'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='nbins' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaGetBox'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixaGetBoxGeometry'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetBoxa'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixaGetBoxaCount'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetCount'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetDepthInfo'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32*' name='pmaxdepth' type='^i'/>
<arg declared_type='l_int32*' name='psame' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetFont'>
<arg const='true' declared_type='char*' name='dir' type='*'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32*' name='pbl0' type='^i'/>
<arg declared_type='l_int32*' name='pbl1' type='^i'/>
<arg declared_type='l_int32*' name='pbl2' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaGetPix'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaGetPixArray'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='PIX**' type='^^{Pix}'/>
</function>
<function name='pixaGetPixDimensions'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pd' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaInitFull'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaInsertPix'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaJoin'>
<arg declared_type='PIXA*' name='pixad' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='istart' type='i'/>
<arg declared_type='l_int32' name='iend' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaMorphSequenceByComponent'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='minw' type='i'/>
<arg declared_type='l_int32' name='minh' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaMorphSequenceByRegion'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA*' name='pixam' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg const='true' declared_type='char*' name='sequence' type='*'/>
<arg declared_type='l_int32' name='minw' type='i'/>
<arg declared_type='l_int32' name='minh' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadFiles'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadFilesSA'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadMultipageTiff'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaRemovePix'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaRenderComponent'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaReplacePix'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaSaveFont'>
<arg const='true' declared_type='char*' name='indir' type='*'/>
<arg const='true' declared_type='char*' name='outdir' type='*'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaSelectByAreaFraction'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectByAreaPerimRatio'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectBySize'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='relation' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectByWidthHeightRatio'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_float32' name='thresh' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectWithIndicator'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='NUMA*' name='na' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32*' name='pchanged' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSizeRange'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32*' name='pminw' type='^i'/>
<arg declared_type='l_int32*' name='pminh' type='^i'/>
<arg declared_type='l_int32*' name='pmaxw' type='^i'/>
<arg declared_type='l_int32*' name='pmaxh' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaSort'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='sorttype' type='i'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSort2dByIndex'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='NUMAA*' name='naa' type='^{Numaa=ii^^{Numa}}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaSortByIndex'>
<arg declared_type='PIXA*' name='pixas' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='NUMA*' name='naindex' type='^{Numa=iiiff^f}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSplitPix'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='nx' type='i'/>
<arg declared_type='l_int32' name='ny' type='i'/>
<arg declared_type='l_int32' name='borderwidth' type='i'/>
<arg declared_type='l_uint32' name='bordercolor' type='I'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaWriteCompressedToPS'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_int32' name='level' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaWriteFiles'>
<arg const='true' declared_type='char*' name='rootname' type='*'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaAddBox'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaAddPixa'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaCreateFromPixa'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaDestroy'>
<arg declared_type='PIXAA**' name='ppixaa' type='^^{Pixaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixaaDisplay'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaaDisplayByPixa'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='l_int32' name='xspace' type='i'/>
<arg declared_type='l_int32' name='yspace' type='i'/>
<arg declared_type='l_int32' name='maxw' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaaDisplayTiledAndScaled'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='tilewidth' type='i'/>
<arg declared_type='l_int32' name='ncols' type='i'/>
<arg declared_type='l_int32' name='background' type='i'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaaExtendArray'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaFlattenToPixa'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaaGetBoxa'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixaaGetCount'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaGetPix'>
<arg declared_type='PIXAA*' name='paa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='l_int32' name='ipixa' type='i'/>
<arg declared_type='l_int32' name='ipix' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaaGetPixa'>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIXAA*' name='pixaa' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccAdd'>
<arg declared_type='PIXACC*' name='pixacc' type='^{Pixacc=iii^{Pix}}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccCreate'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='negflag' type='i'/>
<retval declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
</function>
<function name='pixaccCreateWithPix'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='negflag' type='i'/>
<retval declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
</function>
<function name='pixaccDestroy'>
<arg declared_type='PIXACC**' name='ppixacc' type='^^{Pixacc}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixaccFinal'>
<arg declared_type='PIXACC*' name='pixacc' type='^{Pixacc=iii^{Pix}}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaccGetOffset'>
<arg declared_type='PIXACC*' name='pixacc' type='^{Pixacc=iii^{Pix}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccGetPix'>
<arg declared_type='PIXACC*' name='pixacc' type='^{Pixacc=iii^{Pix}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaccMultConst'>
<arg declared_type='PIXACC*' name='pixacc' type='^{Pixacc=iii^{Pix}}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccMultConstAccumulate'>
<arg declared_type='PIXACC*' name='pixacc' type='^{Pixacc=iii^{Pix}}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccSubtract'>
<arg declared_type='PIXACC*' name='pixacc' type='^{Pixacc=iii^{Pix}}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompAddBox'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompAddPix'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompAddPixcomp'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='PIXC*' name='pixc' type='^{PixComp=iiiiii*i*I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompConvertToPdf'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompConvertToPdfData'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateFromFiles'>
<arg const='true' declared_type='char*' name='dirname' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateFromPixa'>
<arg declared_type='PIXA*' name='pixa' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateFromSA'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateInitialized'>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32' name='offset' type='i'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompDestroy'>
<arg declared_type='PIXAC**' name='ppixac' type='^^{PixaComp}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixacompDisplayTiledAndScaled'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='outdepth' type='i'/>
<arg declared_type='l_int32' name='tilewidth' type='i'/>
<arg declared_type='l_int32' name='ncols' type='i'/>
<arg declared_type='l_int32' name='background' type='i'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='border' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixacompExtendArray'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetBox'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixacompGetBoxGeometry'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetBoxa'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='accesstype' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixacompGetBoxaCount'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetCount'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetOffset'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetPix'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixacompGetPixDimensions'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pd' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetPixcomp'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixacompRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PIXAC*' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXAC*' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompReplacePix'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompReplacePixcomp'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='PIXC*' name='pixc' type='^{PixComp=iiiiii*i*I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompSetOffset'>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg declared_type='l_int32' name='offset' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompWriteStreamInfo'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIXAC*' name='pixac' type='^{PixaComp=iii^^{PixComp}^{Boxa}}'/>
<arg const='true' declared_type='char*' name='text' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddBlackOrWhite'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='color' type='i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddColor'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddNearestColor'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddNewColor'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapClear'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapColorToGray'>
<arg declared_type='PIXCMAP*' name='cmaps' type='^{PixColormap=^viii}'/>
<arg declared_type='l_float32' name='rwt' type='f'/>
<arg declared_type='l_float32' name='gwt' type='f'/>
<arg declared_type='l_float32' name='bwt' type='f'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapContrastTRC'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertHSVToRGB'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertRGBToHSV'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertRGBToYUV'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertToHex'>
<arg declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='l_int32' name='nbytes' type='i'/>
<arg declared_type='l_int32' name='ncolors' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pixcmapConvertYUVToRGB'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapCopy'>
<arg declared_type='PIXCMAP*' name='cmaps' type='^{PixColormap=^viii}'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapCountGrayColors'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32*' name='pngray' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapCreate'>
<arg declared_type='l_int32' name='depth' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapCreateLinear'>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='nlevels' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapCreateRandom'>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32' name='hasblack' type='i'/>
<arg declared_type='l_int32' name='haswhite' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapDeserializeFromMemory'>
<arg declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='l_int32' name='ncolors' type='i'/>
<arg declared_type='l_int32' name='nbytes' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapDestroy'>
<arg declared_type='PIXCMAP**' name='pcmap' type='^^{PixColormap}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixcmapGammaTRC'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_float32' name='gamma' type='f'/>
<arg declared_type='l_int32' name='minval' type='i'/>
<arg declared_type='l_int32' name='maxval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetColor'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='prval' type='^i'/>
<arg declared_type='l_int32*' name='pgval' type='^i'/>
<arg declared_type='l_int32*' name='pbval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetColor32'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_uint32*' name='pval32' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetComponentRange'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='color' type='i'/>
<arg declared_type='l_int32*' name='pminval' type='^i'/>
<arg declared_type='l_int32*' name='pmaxval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetCount'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetDepth'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetExtremeValue'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32*' name='prval' type='^i'/>
<arg declared_type='l_int32*' name='pgval' type='^i'/>
<arg declared_type='l_int32*' name='pbval' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetFreeCount'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetIndex'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetMinDepth'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32*' name='pmindepth' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetNearestGrayIndex'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='val' type='i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetNearestIndex'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetRankIntensity'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_float32' name='rankval' type='f'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGrayToColor'>
<arg declared_type='l_uint32' name='color' type='I'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapHasColor'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32*' name='pcolor' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapResetColor'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapSerializeToMemory'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='cpc' type='i'/>
<arg declared_type='l_int32*' name='pncolors' type='^i'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='l_int32*' name='pnbytes' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapSetBlackAndWhite'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='setblack' type='i'/>
<arg declared_type='l_int32' name='setwhite' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapShiftByComponent'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_uint32' name='srcval' type='I'/>
<arg declared_type='l_uint32' name='dstval' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapShiftIntensity'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_float32' name='fraction' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapToArrays'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32**' name='prmap' type='^^i'/>
<arg declared_type='l_int32**' name='pgmap' type='^^i'/>
<arg declared_type='l_int32**' name='pbmap' type='^^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapToOctcubeLUT'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='metric' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='pixcmapToRGBTable'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_uint32**' name='ptab' type='^^I'/>
<arg declared_type='l_int32*' name='pncolors' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapUsableColor'>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_int32*' name='pusable' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIXCMAP*' name='cmap' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcompCreateFromFile'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixcompCreateFromPix'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='comptype' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixcompCreateFromString'>
<arg declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixcompDestroy'>
<arg declared_type='PIXC**' name='ppixc' type='^^{PixComp}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixcompDetermineFormat'>
<arg declared_type='l_int32' name='comptype' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='cmapflag' type='i'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcompGetDimensions'>
<arg declared_type='PIXC*' name='pixc' type='^{PixComp=iiiiii*i*I}'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pd' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcompWriteStreamInfo'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PIXC*' name='pixc' type='^{PixComp=iiiiii*i*I}'/>
<arg const='true' declared_type='char*' name='text' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixelFractionalShift'>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_float32' name='fraction' type='f'/>
<arg declared_type='l_uint32*' name='ppixel' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixelLinearMapToTargetColor'>
<arg declared_type='l_uint32' name='scolor' type='I'/>
<arg declared_type='l_uint32' name='srcmap' type='I'/>
<arg declared_type='l_uint32' name='dstmap' type='I'/>
<arg declared_type='l_uint32*' name='pdcolor' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixelShiftByComponent'>
<arg declared_type='l_int32' name='rval' type='i'/>
<arg declared_type='l_int32' name='gval' type='i'/>
<arg declared_type='l_int32' name='bval' type='i'/>
<arg declared_type='l_uint32' name='srcval' type='I'/>
<arg declared_type='l_uint32' name='dstval' type='I'/>
<arg declared_type='l_uint32*' name='ppixel' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='plot_blob_list'>
<arg declared_type='int*' name='win' type='^i'/>
<arg declared_type='int*' name='list' type='^i'/>
<arg declared_type='int' name='ScrollView' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pmsCreate'>
<arg declared_type='size_t' name='minsize' type='L'/>
<arg declared_type='size_t' name='smallest' type='L'/>
<arg declared_type='NUMA*' name='numalloc' type='^{Numa=iiiff^f}'/>
<arg const='true' declared_type='char*' name='logfile' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pmsCustomAlloc'>
<arg declared_type='size_t' name='nbytes' type='L'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='pmsCustomDealloc'>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pmsDestroy'>
<retval declared_type='void' type='v'/>
</function>
<function name='pmsGetAlloc'>
<arg declared_type='size_t' name='nbytes' type='L'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='pmsGetLevelForAlloc'>
<arg declared_type='size_t' name='nbytes' type='L'/>
<arg declared_type='l_int32*' name='plevel' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pmsGetLevelForDealloc'>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='l_int32*' name='plevel' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pmsLogInfo'>
<retval declared_type='void' type='v'/>
</function>
<function name='point_in_seam'>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='SPLIT*' name='split' type='^{split_record=^{EDGEPT}^{EDGEPT}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='point_in_split'>
<arg declared_type='SPLIT*' name='split' type='^{split_record=^{EDGEPT}^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='point1' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='point2' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='point_used_by_seam'>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='struct EDGEPT*' name='point' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='point_used_by_split'>
<arg declared_type='SPLIT*' name='split' type='^{split_record=^{EDGEPT}^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='point' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='poly2'>
<arg declared_type='struct EDGEPT*' name='startpt' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='int' name='area' type='i'/>
<retval declared_type='struct EDGEPT*' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
</function>
<function name='print_char_choices_list'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='print_ratings_info'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='int*' name='ratings' type='^i'/>
<arg const='true' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='print_ratings_list'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg declared_type='int*' name='ratings' type='^i'/>
<arg const='true' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='print_seam'>
<arg const='true' declared_type='char*' name='label' type='*'/>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='print_seams'>
<arg const='true' declared_type='char*' name='label' type='*'/>
<arg declared_type='SEAMS' name='seams' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='print_split'>
<arg declared_type='SPLIT*' name='split' type='^{split_record=^{EDGEPT}^{EDGEPT}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='print_word_alternates_list'>
<arg declared_type='int*' name='word' type='^i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='projectiveXformPt'>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32*' name='pxp' type='^f'/>
<arg declared_type='l_float32*' name='pyp' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='projectiveXformSampledPt'>
<arg declared_type='l_float32*' name='vc' type='^f'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32*' name='pxp' type='^i'/>
<arg declared_type='l_int32*' name='pyp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaAddPt'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32' name='y' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaAffineTransform'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32*' name='mat' type='^f'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaChangeRefcount'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaClone'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaContainsPt'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaConvertToBoxa'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='ncorners' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='ptaCopy'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaCopyRange'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='istart' type='i'/>
<arg declared_type='l_int32' name='iend' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaCreateFromNuma'>
<arg declared_type='NUMA*' name='nax' type='^{Numa=iiiff^f}'/>
<arg declared_type='NUMA*' name='nay' type='^{Numa=iiiff^f}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaCyclicPerm'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='xs' type='i'/>
<arg declared_type='l_int32' name='ys' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaDestroy'>
<arg declared_type='PTA**' name='ppta' type='^^{Pta}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptaEmpty'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaExtendArrays'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetArrays'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='NUMA**' name='pnax' type='^^{Numa}'/>
<arg declared_type='NUMA**' name='pnay' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetBoundaryPixels'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaGetBoundingRegion'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='ptaGetCount'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetCubicLSF'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32*' name='pa' type='^f'/>
<arg declared_type='l_float32*' name='pb' type='^f'/>
<arg declared_type='l_float32*' name='pc' type='^f'/>
<arg declared_type='l_float32*' name='pd' type='^f'/>
<arg declared_type='NUMA**' name='pnafit' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetIPt'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32*' name='px' type='^i'/>
<arg declared_type='l_int32*' name='py' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetInsideBox'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaGetLinearLSF'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32*' name='pa' type='^f'/>
<arg declared_type='l_float32*' name='pb' type='^f'/>
<arg declared_type='NUMA**' name='pnafit' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetPixelsFromPix'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='BOX*' name='box' type='^{Box=iiiiI}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaGetPt'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32*' name='px' type='^f'/>
<arg declared_type='l_float32*' name='py' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetQuadraticLSF'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32*' name='pa' type='^f'/>
<arg declared_type='l_float32*' name='pb' type='^f'/>
<arg declared_type='l_float32*' name='pc' type='^f'/>
<arg declared_type='NUMA**' name='pnafit' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetQuarticLSF'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32*' name='pa' type='^f'/>
<arg declared_type='l_float32*' name='pb' type='^f'/>
<arg declared_type='l_float32*' name='pc' type='^f'/>
<arg declared_type='l_float32*' name='pd' type='^f'/>
<arg declared_type='l_float32*' name='pe' type='^f'/>
<arg declared_type='NUMA**' name='pnafit' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetRange'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32*' name='pminx' type='^f'/>
<arg declared_type='l_float32*' name='pmaxx' type='^f'/>
<arg declared_type='l_float32*' name='pminy' type='^f'/>
<arg declared_type='l_float32*' name='pmaxy' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetRefcount'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetSortIndex'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='sorttype' type='i'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaJoin'>
<arg declared_type='PTA*' name='ptad' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='istart' type='i'/>
<arg declared_type='l_int32' name='iend' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaNoisyLinearLSF'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='PTA**' name='pptad' type='^^{Pta}'/>
<arg declared_type='l_float32*' name='pa' type='^f'/>
<arg declared_type='l_float32*' name='pb' type='^f'/>
<arg declared_type='l_float32*' name='pmederr' type='^f'/>
<arg declared_type='NUMA**' name='pnafit' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaNoisyQuadraticLSF'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='factor' type='f'/>
<arg declared_type='PTA**' name='pptad' type='^^{Pta}'/>
<arg declared_type='l_float32*' name='pa' type='^f'/>
<arg declared_type='l_float32*' name='pb' type='^f'/>
<arg declared_type='l_float32*' name='pc' type='^f'/>
<arg declared_type='l_float32*' name='pmederr' type='^f'/>
<arg declared_type='NUMA**' name='pnafit' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaRemoveDuplicates'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_uint32' name='factor' type='I'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaReplicatePattern'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PIX*' name='pixp' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaReverse'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaRotate'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='xc' type='f'/>
<arg declared_type='l_float32' name='yc' type='f'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaScale'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaSetPt'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_float32' name='x' type='f'/>
<arg declared_type='l_float32' name='y' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaSort'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='sorttype' type='i'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<arg declared_type='NUMA**' name='pnaindex' type='^^{Numa}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaSortByIndex'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='NUMA*' name='naindex' type='^{Numa=iiiff^f}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaSubsample'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='subfactor' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaTestIntersection'>
<arg declared_type='PTA*' name='pta1' type='^{Pta=iiI^f^f}'/>
<arg declared_type='PTA*' name='pta2' type='^{Pta=iiI^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaTransform'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='shiftx' type='i'/>
<arg declared_type='l_int32' name='shifty' type='i'/>
<arg declared_type='l_float32' name='scalex' type='f'/>
<arg declared_type='l_float32' name='scaley' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaTranslate'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_float32' name='transx' type='f'/>
<arg declared_type='l_float32' name='transy' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaTranspose'>
<arg declared_type='PTA*' name='ptas' type='^{Pta=iiI^f^f}'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaAddPta'>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaDestroy'>
<arg declared_type='PTAA**' name='pptaa' type='^^{Ptaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptaaExtendArray'>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaGetBoundaryPixels'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<arg declared_type='BOXA**' name='pboxa' type='^^{Boxa}'/>
<arg declared_type='PIXA**' name='ppixa' type='^^{Pixa}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaGetCount'>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaGetPt'>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='l_int32' name='ipta' type='i'/>
<arg declared_type='l_int32' name='jpt' type='i'/>
<arg declared_type='l_float32*' name='px' type='^f'/>
<arg declared_type='l_float32*' name='py' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaGetPta'>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iiI^f^f}'/>
</function>
<function name='ptaaRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaSortByIndex'>
<arg declared_type='PTAA*' name='ptaas' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='NUMA*' name='naindex' type='^{Numa=iiiff^f}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='PTAA*' name='ptaa' type='^{Ptaa=ii^^{Pta}}'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraAdd'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='void*' name='item' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraCompactArray'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraConcatenatePdf'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraConcatenatePdfToData'>
<arg declared_type='L_PTRA*' name='pa_data' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
</function>
<function name='ptraDestroy'>
<arg declared_type='L_PTRA**' name='ppa' type='^^{L_Ptra}'/>
<arg declared_type='l_int32' name='freeflag' type='i'/>
<arg declared_type='l_int32' name='warnflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptraExtendArray'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraGetActualCount'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraGetHandle'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraGetMaxIndex'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32*' name='pmaxindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraGetPtrToItem'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraInsert'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='void*' name='item' type='^v'/>
<arg declared_type='l_int32' name='shiftflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraJoin'>
<arg declared_type='L_PTRA*' name='pa1' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='L_PTRA*' name='pa2' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraRemove'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='flag' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraRemoveLast'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraReplace'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='void*' name='item' type='^v'/>
<arg declared_type='l_int32' name='freeflag' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraReverse'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraSwap'>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<arg declared_type='l_int32' name='index1' type='i'/>
<arg declared_type='l_int32' name='index2' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='L_PTRAA*' type='^{L_Ptraa=i^^{L_Ptra}}'/>
</function>
<function name='ptraaDestroy'>
<arg declared_type='L_PTRAA**' name='ppaa' type='^^{L_Ptraa}'/>
<arg declared_type='l_int32' name='freeflag' type='i'/>
<arg declared_type='l_int32' name='warnflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptraaFlattenToPtra'>
<arg declared_type='L_PTRAA*' name='paa' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<retval declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
</function>
<function name='ptraaGetPtra'>
<arg declared_type='L_PTRAA*' name='paa' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='accessflag' type='i'/>
<retval declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
</function>
<function name='ptraaGetSize'>
<arg declared_type='L_PTRAA*' name='paa' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<arg declared_type='l_int32*' name='psize' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraaInsertPtra'>
<arg declared_type='L_PTRAA*' name='paa' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='L_PTRA*' name='pa' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='quadtreeGetChildren'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32*' name='pval00' type='^f'/>
<arg declared_type='l_float32*' name='pval10' type='^f'/>
<arg declared_type='l_float32*' name='pval01' type='^f'/>
<arg declared_type='l_float32*' name='pval11' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='quadtreeGetParent'>
<arg declared_type='FPIXA*' name='fpixa' type='^{FPixa=iiI^^{FPix}}'/>
<arg declared_type='l_int32' name='level' type='i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_float32*' name='pval' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='quadtreeMaxLevels'>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='rasteropHipLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='pixh' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_int32' name='y' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='shift' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rasteropLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='dpixw' type='i'/>
<arg declared_type='l_int32' name='dpixh' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32' name='dwpl' type='i'/>
<arg declared_type='l_int32' name='dx' type='i'/>
<arg declared_type='l_int32' name='dy' type='i'/>
<arg declared_type='l_int32' name='dw' type='i'/>
<arg declared_type='l_int32' name='dh' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='spixw' type='i'/>
<arg declared_type='l_int32' name='spixh' type='i'/>
<arg declared_type='l_int32' name='swpl' type='i'/>
<arg declared_type='l_int32' name='sx' type='i'/>
<arg declared_type='l_int32' name='sy' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rasteropUniLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='dpixw' type='i'/>
<arg declared_type='l_int32' name='dpixh' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32' name='dwpl' type='i'/>
<arg declared_type='l_int32' name='dx' type='i'/>
<arg declared_type='l_int32' name='dy' type='i'/>
<arg declared_type='l_int32' name='dw' type='i'/>
<arg declared_type='l_int32' name='dh' type='i'/>
<arg declared_type='l_int32' name='op' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rasteropVipLow'>
<arg declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32' name='pixw' type='i'/>
<arg declared_type='l_int32' name='pixh' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32' name='wpl' type='i'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='shift' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='readHeaderJpeg'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='pycck' type='^i'/>
<arg declared_type='l_int32*' name='pcmyk' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderMemJpeg'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32*' name='pw' type='^i'/>
<arg declared_type='l_int32*' name='ph' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='pycck' type='^i'/>
<arg declared_type='l_int32*' name='pcmyk' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderMemTiff'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='pres' type='^i'/>
<arg declared_type='l_int32*' name='pcmap' type='^i'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderPng'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderPnm'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='PIX**' name='ppix' type='^^{Pix}'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pdepth' type='^i'/>
<arg declared_type='l_int32*' name='ptype' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderSpix'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderTiff'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='pres' type='^i'/>
<arg declared_type='l_int32*' name='pcmap' type='^i'/>
<arg declared_type='l_int32*' name='pformat' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderWebP'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='read_unlv_file'>
<arg declared_type='int' name='name' type='i'/>
<arg declared_type='inT32' name='xsize' type='i'/>
<arg declared_type='inT32' name='ysize' type='i'/>
<arg declared_type='int*' name='blocks' type='^i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='reallocNew'>
<arg declared_type='void**' name='pindata' type='^^v'/>
<arg declared_type='l_int32' name='oldsize' type='i'/>
<arg declared_type='l_int32' name='newsize' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='reduceBinary2Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint8*' name='tab' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='reduceRankBinary2Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint8*' name='tab' type='*'/>
<arg declared_type='l_int32' name='level' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='regTestCheckFile'>
<arg declared_type='L_REGPARAMS*' name='rp' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg const='true' declared_type='char*' name='localname' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestCleanup'>
<arg declared_type='L_REGPARAMS*' name='rp' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestCompareFiles'>
<arg declared_type='L_REGPARAMS*' name='rp' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg declared_type='l_int32' name='index1' type='i'/>
<arg declared_type='l_int32' name='index2' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestComparePix'>
<arg declared_type='L_REGPARAMS*' name='rp' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestCompareSimilarPix'>
<arg declared_type='L_REGPARAMS*' name='rp' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg declared_type='PIX*' name='pix1' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pix2' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='mindiff' type='i'/>
<arg declared_type='l_float32' name='maxfract' type='f'/>
<arg declared_type='l_int32' name='printstats' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestCompareValues'>
<arg declared_type='L_REGPARAMS*' name='rp' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg declared_type='l_float32' name='val1' type='f'/>
<arg declared_type='l_float32' name='val2' type='f'/>
<arg declared_type='l_float32' name='delta' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestSetup'>
<arg declared_type='l_int32' name='argc' type='i'/>
<arg declared_type='char**' name='argv' type='^*'/>
<arg declared_type='L_REGPARAMS**' name='prp' type='^^{L_RegParams}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestWritePixAndCheck'>
<arg declared_type='L_REGPARAMS*' name='rp' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='format' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='reject_blanks'>
<arg declared_type='int*' name='word' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='reject_poor_matches'>
<arg declared_type='int*' name='word' type='^i'/>
<arg declared_type='int*' name='blob_choices' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='reject_whole_page'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='remove_edgept'>
<arg declared_type='struct EDGEPT*' name='point' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='resetMorphBoundaryCondition'>
<arg declared_type='l_int32' name='bc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='returnErrorFloat'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_float32' name='fval' type='f'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='returnErrorInt'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='l_int32' name='ival' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='returnErrorPtr'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='procname' type='*'/>
<arg declared_type='void*' name='pval' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='reveal_edge_pair'>
<arg declared_type='struct EDGEPT*' name='pt1' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='pt2' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='reveal_seam'>
<arg declared_type='SEAM*' name='seam' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='reverse16'>
<arg declared_type='uinT16' type='S'/>
<retval declared_type='uinT16' type='S'/>
</function>
<function name='reverse32'>
<arg declared_type='uinT32' type='I'/>
<retval declared_type='uinT32' type='I'/>
</function>
<function name='reverse64'>
<arg declared_type='uinT64' type='Q'/>
<retval declared_type='uinT64' type='Q'/>
</function>
<function name='rotate90Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMColorCornerLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMColorFastLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMColorLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint32' name='colorval' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMGrayCornerLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMGrayLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_float32' name='angle' type='f'/>
<arg declared_type='l_uint8' name='grayval' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='runlengthMembershipOnLine'>
<arg declared_type='l_int32*' name='buffer' type='^i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_int32*' name='start' type='^i'/>
<arg declared_type='l_int32*' name='end' type='^i'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConcatenatePdf'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConcatenatePdfToData'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConvertFilesToPdf'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConvertFilesToPdfData'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_float32' name='scalefactor' type='f'/>
<arg declared_type='l_int32' name='type' type='i'/>
<arg declared_type='l_int32' name='quality' type='i'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<arg declared_type='l_uint8**' name='pdata' type='^*'/>
<arg declared_type='size_t*' name='pnbytes' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayAddString'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='char*' name='string' type='*'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayAppend'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayAppendRange'>
<arg declared_type='SARRAY*' name='sa1' type='^{Sarray=iii^*}'/>
<arg declared_type='SARRAY*' name='sa2' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='start' type='i'/>
<arg declared_type='l_int32' name='end' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayChangeRefcount'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='delta' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayClear'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayClone'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayConcatenate'>
<arg declared_type='SARRAY*' name='sa1' type='^{Sarray=iii^*}'/>
<arg declared_type='SARRAY*' name='sa2' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayConvertFilesFittedToPS'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_float32' name='xpts' type='f'/>
<arg declared_type='l_float32' name='ypts' type='f'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayConvertFilesToPS'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayConvertWordsToLines'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='linesize' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCopy'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreateInitialized'>
<arg declared_type='l_int32' name='n' type='i'/>
<arg declared_type='char*' name='initstr' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreateLinesFromString'>
<arg declared_type='char*' name='string' type='*'/>
<arg declared_type='l_int32' name='blankflag' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreateWordsFromString'>
<arg const='true' declared_type='char*' name='string' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayDestroy'>
<arg declared_type='SARRAY**' name='psa' type='^^{Sarray}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sarrayExtendArray'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayGetArray'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32*' name='pnalloc' type='^i'/>
<arg declared_type='l_int32*' name='pn' type='^i'/>
<retval declared_type='char**' type='^*'/>
</function>
<function name='sarrayGetCount'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayGetRefcount'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayGetString'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayPadToSameSize'>
<arg declared_type='SARRAY*' name='sa1' type='^{Sarray=iii^*}'/>
<arg declared_type='SARRAY*' name='sa2' type='^{Sarray=iii^*}'/>
<arg declared_type='char*' name='padstring' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayParseRange'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='start' type='i'/>
<arg declared_type='l_int32*' name='pactualstart' type='^i'/>
<arg declared_type='l_int32*' name='pend' type='^i'/>
<arg declared_type='l_int32*' name='pnewstart' type='^i'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg declared_type='l_int32' name='loc' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayRead'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayRemoveString'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayReplaceString'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='index' type='i'/>
<arg declared_type='char*' name='newstr' type='*'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarraySelectByRange'>
<arg declared_type='SARRAY*' name='sain' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='first' type='i'/>
<arg declared_type='l_int32' name='last' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarraySelectBySubstring'>
<arg declared_type='SARRAY*' name='sain' type='^{Sarray=iii^*}'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarraySort'>
<arg declared_type='SARRAY*' name='saout' type='^{Sarray=iii^*}'/>
<arg declared_type='SARRAY*' name='sain' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='sortorder' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarraySplitString'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg const='true' declared_type='char*' name='separators' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayToString'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='addnlflag' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayToStringRange'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg declared_type='l_int32' name='first' type='i'/>
<arg declared_type='l_int32' name='nstrings' type='i'/>
<arg declared_type='l_int32' name='addnlflag' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayWrite'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleAreaMapLow2'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleBinaryLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleBySamplingLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleColor2xLILineLow'>
<arg declared_type='l_uint32*' name='lined' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='lines' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='lastlineflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleColor2xLILow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleColorAreaMapLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleColorLILow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray2xLILineLow'>
<arg declared_type='l_uint32*' name='lined' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='lines' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='lastlineflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray2xLILow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray4xLILineLow'>
<arg declared_type='l_uint32*' name='lined' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='lines' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='lastlineflag' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray4xLILow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGrayAreaMapLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGrayLILow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleMipmapLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas1' type='^I'/>
<arg declared_type='l_int32' name='wpls1' type='i'/>
<arg declared_type='l_uint32*' name='datas2' type='^I'/>
<arg declared_type='l_int32' name='wpls2' type='i'/>
<arg declared_type='l_float32' name='red' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleRGBToGray2Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_float32' name='rwt' type='f'/>
<arg declared_type='l_float32' name='gwt' type='f'/>
<arg declared_type='l_float32' name='bwt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleSmoothLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='ws' type='i'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='size' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleToGray16Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray2Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='sumtab' type='^I'/>
<arg declared_type='l_uint8*' name='valtab' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray3Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='sumtab' type='^I'/>
<arg declared_type='l_uint8*' name='valtab' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray4Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='sumtab' type='^I'/>
<arg declared_type='l_uint8*' name='valtab' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray6Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<arg declared_type='l_uint8*' name='valtab' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray8Low'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wd' type='i'/>
<arg declared_type='l_int32' name='hd' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32*' name='tab8' type='^i'/>
<arg declared_type='l_uint8*' name='valtab' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scale_image'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scale_image_cop_out'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillBinaryLow'>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='hs' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='datam' type='^I'/>
<arg declared_type='l_int32' name='hm' type='i'/>
<arg declared_type='l_int32' name='wplm' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayInvLow'>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='datam' type='^I'/>
<arg declared_type='l_int32' name='wplm' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayInvLowSimple'>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='datam' type='^I'/>
<arg declared_type='l_int32' name='wplm' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayLow'>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='datam' type='^I'/>
<arg declared_type='l_int32' name='wplm' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayLowSimple'>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_uint32*' name='datam' type='^I'/>
<arg declared_type='l_int32' name='wplm' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedspreadLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datat' type='^I'/>
<arg declared_type='l_int32' name='wplt' type='i'/>
<arg declared_type='l_int32' name='connectivity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='selCopy'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreate'>
<arg declared_type='l_int32' name='height' type='i'/>
<arg declared_type='l_int32' name='width' type='i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateBrick'>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateComb'>
<arg declared_type='l_int32' name='factor1' type='i'/>
<arg declared_type='l_int32' name='factor2' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromColorPix'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='char*' name='selname' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromPix'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromPta'>
<arg declared_type='PTA*' name='pta' type='^{Pta=iiI^f^f}'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromString'>
<arg const='true' declared_type='char*' name='text' type='*'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selDestroy'>
<arg declared_type='SEL**' name='psel' type='^^:'/>
<retval declared_type='void' type='v'/>
</function>
<function name='selDisplayInPix'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='gthick' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='selFindMaxTranslations'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32*' name='pxp' type='^i'/>
<arg declared_type='l_int32*' name='pyp' type='^i'/>
<arg declared_type='l_int32*' name='pxn' type='^i'/>
<arg declared_type='l_int32*' name='pyn' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selGetElement'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_int32*' name='ptype' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selGetName'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selGetParameters'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32*' name='psy' type='^i'/>
<arg declared_type='l_int32*' name='psx' type='^i'/>
<arg declared_type='l_int32*' name='pcy' type='^i'/>
<arg declared_type='l_int32*' name='pcx' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selGetTypeAtOrigin'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32*' name='ptype' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selPrintToString'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selRead'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selReadFromColorImage'>
<arg const='true' declared_type='char*' name='pathname' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selRotateOrth'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32' name='quads' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selSetElement'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32' name='row' type='i'/>
<arg declared_type='l_int32' name='col' type='i'/>
<arg declared_type='l_int32' name='type' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selSetName'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selSetOrigin'>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg declared_type='l_int32' name='cy' type='i'/>
<arg declared_type='l_int32' name='cx' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selWrite'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaAddBasic'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddCrossJunctions'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_float32' name='hlsize' type='f'/>
<arg declared_type='l_float32' name='mdist' type='f'/>
<arg declared_type='l_int32' name='norient' type='i'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddDwaCombs'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddDwaLinear'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddHitMiss'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddSel'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='SEL*' name='sel' type='^:'/>
<arg const='true' declared_type='char*' name='selname' type='*'/>
<arg declared_type='l_int32' name='copyflag' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaAddTJunctions'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_float32' name='hlsize' type='f'/>
<arg declared_type='l_float32' name='mdist' type='f'/>
<arg declared_type='l_int32' name='norient' type='i'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaCreate'>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaCreateFromFile'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaDestroy'>
<arg declared_type='SELA**' name='psela' type='^^{Sela}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='selaDisplayInPix'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='gthick' type='i'/>
<arg declared_type='l_int32' name='spacing' type='i'/>
<arg declared_type='l_int32' name='ncols' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='selaExtendArray'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaFindSelByName'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<arg declared_type='SEL**' name='psel' type='^^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaGetBrickName'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='hsize' type='i'/>
<arg declared_type='l_int32' name='vsize' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selaGetCombName'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selaGetCount'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaGetSel'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<arg declared_type='l_int32' name='i' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selaGetSelnames'>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='selaRead'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaReadStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaWrite'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaWriteStream'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='SELA*' name='sela' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selectComposableSels'>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32' name='direction' type='i'/>
<arg declared_type='SEL**' name='psel1' type='^^:'/>
<arg declared_type='SEL**' name='psel2' type='^^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selectComposableSizes'>
<arg declared_type='l_int32' name='size' type='i'/>
<arg declared_type='l_int32*' name='pfactor1' type='^i'/>
<arg declared_type='l_int32*' name='pfactor2' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selectDefaultPdfEncoding'>
<arg declared_type='PIX*' name='pix' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32*' name='ptype' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='setPixMemoryManager'>
<arg declared_type='void *(*)(size_t)' function_pointer='true' name='allocator' type='^?'>
<arg declared_type='size_t' type='L'/>
<retval declared_type='void*' type='^v'/>
</arg>
<arg declared_type='void (*)(void *)' function_pointer='true' name='deallocator' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='setPixelLow'>
<arg declared_type='l_uint32*' name='line' type='^I'/>
<arg declared_type='l_int32' name='x' type='i'/>
<arg declared_type='l_int32' name='depth' type='i'/>
<arg declared_type='l_uint32' name='val' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='set_global_loc_code'>
<arg declared_type='int' name='loc_code' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='set_global_subloc_code'>
<arg declared_type='int' name='loc_code' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='set_global_subsubloc_code'>
<arg declared_type='int' name='loc_code' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='shared_split_points'>
<arg declared_type='SEAM*' name='seam1' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<arg declared_type='SEAM*' name='seam2' type='^{seam_record=fcc{TPOINT=??}^{split_record}^{split_record}^{split_record}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='shiftDataHorizontalLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='shift' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='show_point'>
<arg declared_type='int*' name='page_res' type='^i'/>
<arg declared_type='float' name='x' type='f'/>
<arg declared_type='float' name='y' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='signal_exit'>
<arg declared_type='int' name='signal_code' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='signal_termination_handler'>
<arg declared_type='int' name='sig' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='splitPathAtDirectory'>
<arg const='true' declared_type='char*' name='pathname' type='*'/>
<arg declared_type='char**' name='pdir' type='^*'/>
<arg declared_type='char**' name='ptail' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='splitPathAtExtension'>
<arg const='true' declared_type='char*' name='pathname' type='*'/>
<arg declared_type='char**' name='pbasename' type='^*'/>
<arg declared_type='char**' name='pextension' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='splitStringToParagraphs'>
<arg declared_type='char*' name='textstr' type='*'/>
<arg declared_type='l_int32' name='splitflag' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='split_outline'>
<arg declared_type='struct EDGEPT*' name='join_point1' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='join_point2' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sreadHeaderPng'>
<arg const='true' declared_type='l_uint8*' name='data' type='*'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sreadHeaderPnm'>
<arg const='true' declared_type='l_uint8*' name='cdata' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pdepth' type='^i'/>
<arg declared_type='l_int32*' name='ptype' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sreadHeaderSpix'>
<arg const='true' declared_type='l_uint32*' name='data' type='^I'/>
<arg declared_type='l_int32*' name='pwidth' type='^i'/>
<arg declared_type='l_int32*' name='pheight' type='^i'/>
<arg declared_type='l_int32*' name='pbps' type='^i'/>
<arg declared_type='l_int32*' name='pspp' type='^i'/>
<arg declared_type='l_int32*' name='piscmap' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='startTimer'>
<retval declared_type='void' type='v'/>
</function>
<function name='startTimerNested'>
<retval declared_type='L_TIMER' type='^v'/>
</function>
<function name='start_seam_list'>
<arg declared_type='struct TBLOB*' name='blobs' type='^{TBLOB=??????????????}'/>
<retval declared_type='SEAMS' type='i'/>
</function>
<function name='stopTimer'>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='stopTimerNested'>
<arg declared_type='L_TIMER' name='rusage_start' type='^v'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='stringCat'>
<arg declared_type='char*' name='dest' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringCompareLexical'>
<arg const='true' declared_type='char*' name='str1' type='*'/>
<arg const='true' declared_type='char*' name='str2' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringCopy'>
<arg declared_type='char*' name='dest' type='*'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='l_int32' name='n' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringFindSubstr'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg const='true' declared_type='char*' name='sub' type='*'/>
<arg declared_type='l_int32*' name='ploc' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringJoin'>
<arg const='true' declared_type='char*' name='src1' type='*'/>
<arg const='true' declared_type='char*' name='src2' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringLength'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='size_t' name='size' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringNew'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringRemoveChars'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg const='true' declared_type='char*' name='remchars' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringReplace'>
<arg declared_type='char**' name='pdest' type='^*'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringReplaceEachSubstr'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg const='true' declared_type='char*' name='sub1' type='*'/>
<arg const='true' declared_type='char*' name='sub2' type='*'/>
<arg declared_type='l_int32*' name='pcount' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringReplaceSubstr'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg const='true' declared_type='char*' name='sub1' type='*'/>
<arg const='true' declared_type='char*' name='sub2' type='*'/>
<arg declared_type='l_int32*' name='pfound' type='^i'/>
<arg declared_type='l_int32*' name='ploc' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringReverse'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringSplitOnToken'>
<arg declared_type='char*' name='cstr' type='*'/>
<arg const='true' declared_type='char*' name='seps' type='*'/>
<arg declared_type='char**' name='phead' type='^*'/>
<arg declared_type='char**' name='ptail' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='strtokSafe'>
<arg declared_type='char*' name='cstr' type='*'/>
<arg const='true' declared_type='char*' name='seps' type='*'/>
<arg declared_type='char**' name='psaveptr' type='^*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='subtractGrayLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sudokuCreate'>
<arg declared_type='l_int32*' name='array' type='^i'/>
<retval declared_type='L_SUDOKU*' type='^{L_Sudoku=i^ii^i^iiii}'/>
</function>
<function name='sudokuDestroy'>
<arg declared_type='L_SUDOKU**' name='psud' type='^^{L_Sudoku}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sudokuGenerate'>
<arg declared_type='l_int32*' name='array' type='^i'/>
<arg declared_type='l_int32' name='seed' type='i'/>
<arg declared_type='l_int32' name='minelems' type='i'/>
<arg declared_type='l_int32' name='maxtries' type='i'/>
<retval declared_type='L_SUDOKU*' type='^{L_Sudoku=i^ii^i^iiii}'/>
</function>
<function name='sudokuOutput'>
<arg declared_type='L_SUDOKU*' name='sud' type='^{L_Sudoku=i^ii^i^iiii}'/>
<arg declared_type='l_int32' name='arraytype' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sudokuReadFile'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='sudokuReadString'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='sudokuSolve'>
<arg declared_type='L_SUDOKU*' name='sud' type='^{L_Sudoku=i^ii^i^iiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sudokuTestUniqueness'>
<arg declared_type='l_int32*' name='array' type='^i'/>
<arg declared_type='l_int32*' name='punique' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='swap_entries'>
<arg declared_type='void*' name='array' type='^v'/>
<arg declared_type='size_t' name='size' type='L'/>
<arg declared_type='inT32' name='index1' type='i'/>
<arg declared_type='inT32' name='index2' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='test_insert_seam'>
<arg declared_type='SEAMS' name='seam_list' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='struct TBLOB*' name='left_blob' type='^{TBLOB=??????????????}'/>
<arg declared_type='struct TBLOB*' name='first_blob' type='^{TBLOB=??????????????}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='thresholdTo2bppLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdTo4bppLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32*' name='tab' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdToBinaryLineLow'>
<arg declared_type='l_uint32*' name='lined' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_uint32*' name='lines' type='^I'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdToBinaryLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_uint32*' name='datas' type='^I'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpls' type='i'/>
<arg declared_type='l_int32' name='thresh' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdToValueLow'>
<arg declared_type='l_uint32*' name='datad' type='^I'/>
<arg declared_type='l_int32' name='w' type='i'/>
<arg declared_type='l_int32' name='h' type='i'/>
<arg declared_type='l_int32' name='d' type='i'/>
<arg declared_type='l_int32' name='wpld' type='i'/>
<arg declared_type='l_int32' name='threshval' type='i'/>
<arg declared_type='l_int32' name='setval' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='tiffGetCount'>
<arg declared_type='FILE*' name='fp' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='l_int32*' name='pn' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='tprintf' variadic='true'>
<arg const='true' declared_type='char*' name='format' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='transform_to_next_perm'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='truth_has_char_boxes'>
<retval declared_type='int' type='i'/>
</function>
<function name='unicharset'>
<retval declared_type='int' type='i'/>
</function>
<function name='unsplit_outlines'>
<arg declared_type='struct EDGEPT*' name='p1' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<arg declared_type='struct EDGEPT*' name='p2' type='^{EDGEPT=??{TPOINT=??}[4c]^{EDGEPT}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='vertical_cblob_projection'>
<arg declared_type='int*' name='blob' type='^i'/>
<arg declared_type='int*' name='stats' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='vertical_coutline_projection'>
<arg declared_type='int*' name='outline' type='^i'/>
<arg declared_type='int*' name='stats' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='word_blob_quality'>
<arg declared_type='int*' name='word' type='^i'/>
<arg declared_type='int*' name='row' type='^i'/>
<retval declared_type='inT16' type='s'/>
</function>
<function name='word_comparator'>
<arg const='true' declared_type='void*' name='word1p' type='^v'/>
<arg const='true' declared_type='void*' name='word2p' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='word_contains_non_1_digit'>
<arg const='true' declared_type='char*' name='word' type='*'/>
<arg const='true' declared_type='char*' name='word_lengths' type='*'/>
<retval declared_type='BOOL8' type='C'/>
</function>
<function name='writeImageCompressedToPSFile'>
<arg const='true' declared_type='char*' name='filein' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<arg declared_type='l_int32' name='res' type='i'/>
<arg declared_type='l_int32*' name='pfirstfile' type='^i'/>
<arg declared_type='l_int32*' name='pindex' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='writeMultipageTiff'>
<arg const='true' declared_type='char*' name='dirin' type='*'/>
<arg const='true' declared_type='char*' name='substr' type='*'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='writeMultipageTiffSA'>
<arg declared_type='SARRAY*' name='sa' type='^{Sarray=iii^*}'/>
<arg const='true' declared_type='char*' name='fileout' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='wshedApply'>
<arg declared_type='L_WSHED*' name='wshed' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='wshedBasins'>
<arg declared_type='L_WSHED*' name='wshed' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<arg declared_type='PIXA**' name='ppixa' type='^^{Pixa}'/>
<arg declared_type='NUMA**' name='pnalevels' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='wshedCreate'>
<arg declared_type='PIX*' name='pixs' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='PIX*' name='pixm' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg declared_type='l_int32' name='mindepth' type='i'/>
<arg declared_type='l_int32' name='debugflag' type='i'/>
<retval declared_type='L_WSHED*' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
</function>
<function name='wshedDestroy'>
<arg declared_type='L_WSHED**' name='pwshed' type='^^{L_WShed}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='wshedRenderColors'>
<arg declared_type='L_WSHED*' name='wshed' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='wshedRenderFill'>
<arg declared_type='L_WSHED*' name='wshed' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='x'>
<retval declared_type='int' type='i'/>
</function>
<function name='zlibCompress'>
<arg declared_type='l_uint8*' name='datain' type='*'/>
<arg declared_type='size_t' name='nin' type='L'/>
<arg declared_type='size_t*' name='pnout' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='zlibUncompress'>
<arg declared_type='l_uint8*' name='datain' type='*'/>
<arg declared_type='size_t' name='nin' type='L'/>
<arg declared_type='size_t*' name='pnout' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<class name='NSObject'>
<method selector='progressImageRecognitionForTesseract:'>
<arg declared_type='Tesseract*' index='0' name='tesseract' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldCancelImageRecognitionForTesseract:'>
<arg declared_type='Tesseract*' index='0' name='tesseract' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='Tesseract'>
<method selector='clear'>
<retval declared_type='void' type='v'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='image'>
<retval declared_type='int*' type='^i'/>
</method>
<method selector='initWithDataPath:language:'>
<arg declared_type='NSString*' index='0' name='dataPath' type='@'/>
<arg declared_type='NSString*' index='1' name='language' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithLanguage:'>
<arg declared_type='NSString*' index='0' name='language' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='language'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='progress'>
<retval declared_type='short' type='s'/>
</method>
<method selector='recognize'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='recognizedText'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='rect'>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</method>
<method selector='setDelegate:'>
<arg declared_type='id' index='0' name='delegate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg declared_type='int*' index='0' name='image' type='^i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLanguage:'>
<arg declared_type='NSString*' index='0' name='language' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRect:'>
<arg declared_type='CGRect' index='0' name='rect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVariableValue:forKey:'>
<arg declared_type='NSString*' index='0' name='value' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='version'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<informal_protocol name='TesseractDelegate'>
<method selector='progressImageRecognitionForTesseract:' type='v12@0:4@8'>
<arg declared_type='Tesseract*' index='0' name='tesseract' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldCancelImageRecognitionForTesseract:' type='B12@0:4@8'>
<arg declared_type='Tesseract*' index='0' name='tesseract' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
</signatures>
